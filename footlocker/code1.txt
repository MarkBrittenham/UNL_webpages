
NmrSpaces := function(p, n, k)
local pn, pk, i, powersn, powersk, x, y;
	if k=0 then return 1;
		fi;
	pn := p^n;
	pk := p^k;
	powersn := [];
	for i  in [0..k-1] do
		Add(powersn, p^(n-i));
		od;
	powersk := [];
	for i in [1..k] do
		Add(powersk, p^i);
		od;
	x := Product(powersn - 1);
	y := Product(powersk - 1);
return(x/y);
end;

Matrix:=function(p,n,k)
local A, nmr, MA, a, X, x, Y, y, S, product, i, j;
	A:=List(Subspaces(GF(p)^n, k));
	nmr:=NmrSpaces(p,n,k);
	MA:=NullMat(k*nmr,k*nmr);
	X:=[];
	Y:=[];

	for a in A do
		x:=GeneratorsOfVectorSpace(a);
		Add(X,x);
	od;

	for x in X do
		y:=TransposedMat(x);
		Add(Y,y);
	od;

	S:=Size(X);
	nmr:=0;

	for x in [1..S] do
		for y in [1..S] do
			product:=X[x]*Y[y];
				if IntFFE(Determinant(product))=0 then
					product:=0*product;
				fi;
					for i in [1..k] do
						for j in [1..k] do
							MA[(k*(x-1))+j][(k*(y-1))+i]:=IntFFE(product[j][i]);
						od;
					od;
		od;
	od;

return(MA);
end;

GraphFunction:=function(p,n,k)
local A, nmr, MA, a, X, x, Y, y, S, product, edges, G, F;
	A:=List(Subspaces(GF(p)^n, k));
	nmr:=NmrSpaces(p,n,k);
	MA:=NullMat(k*nmr,k*nmr);
	X:=[];
	Y:=[];
	edges:=[];
	
	for a in A do
		x:=GeneratorsOfVectorSpace(a);
		Add(X,x);
	od;

	for x in X do
		y:=TransposedMat(x);
		Add(Y,y);
	od;

	S:=Size(X);
	nmr:=0;

	for x in [1..S] do
		for y in [1..S] do
			product:=X[x]*Y[y];
				if IntFFE(Determinant(product))=0 then
					product:=0*product;
						else Add(edges,[x,S+y]);
						nmr:=nmr+1;
				fi;
		od;
	od;

	G:=EdgeOrbitsGraph(Group(()),edges,2*S);
	F:=FreeGroup(nmr);

return(G);
end;

nmrFunction:=function(p,n,k)
	local A, nmr, MA, a, X, x, Y, y, S, product;
	A:=List(Subspaces(GF(p)^n, k));
	nmr:=NmrSpaces(p,n,k);
	MA:=NullMat(k*nmr,k*nmr);
	X:=[];
	Y:=[];

	for a in A do
		x:=GeneratorsOfVectorSpace(a);
		Add(X,x);
	od;
	
	for x in X do
		y:=TransposedMat(x);
		Add(Y,y);
	od;

	S:=Size(X);
	nmr:=0;

	for x in [1..S] do
		for y in [1..S] do
			product:=X[x]*Y[y];
				if IntFFE(Determinant(product))=0 then
					product:=0*product;
					else nmr:=nmr+1;
				fi;
		od;
	od;

return(nmr);
end;

ExamineBlocks:= function(p,n,k)
local MA, nmr, i, j, x, y, m, q, A, B, C, D, E, G, g, L;
	MA:=Matrix(p,n,k);
	nmr:=NmrSpaces(p,n,k);
	A:=NullMat(k,k);
	B:=NullMat(k,k);
	C:=NullMat(k,k);
	D:=NullMat(k,k);
	E:=NullMat(k,k);
	G:=GL(k,p);
	L:=[];

	G:=Elements(G);

	for i in [1..nmr] do
		for j in [1..nmr] do
			for x in [1..k] do
				for y in [1..k] do
					A[y][x]:=MA[(k*(j-1))+y][(k*(i-1))+x];
				od;
			od;
					if Determinant(A)=0 then
					continue; fi;
		
				for m in [j+1..nmr] do
					for x in [1..k] do
						for y in [1..k] do
							B[y][x]:=MA[(k*(m-1))+y][(k*(i-1))+x];
						od;
					od;
					if Determinant(B)=0 then
						continue; fi;
					for q in [i+1..nmr] do
						for x in [1..k] do
							for y in [1..k] do
								C[y][x]:=MA[(k*(j-1))+y][(k*(q-1))+x];
							od;
						od;
						if Determinant(C)=0 then
							continue; fi;
						for x in [1..k] do
							for y in [1..k] do
								D[y][x]:=MA[(k*(m-1))+y][(k*(q-1))+x];
							od;
						od;
						if Determinant(D)=0 then
							continue; fi;

						for g in G do
							for x in [1..k] do
								for y in [1..k] do
									E[y][x]:=IntFFE(g[y][x]);
								od;
							od;

							if B*E=A and D*E=C then
								Append(L,[[(i,nmr+j),(i,nmr+m),(q,nmr+m),(q,nmr+j)]]);
								fi;
					od;
				od;		
			od;
		od;
	od;
return(L);
end;

