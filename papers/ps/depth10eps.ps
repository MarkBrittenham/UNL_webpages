%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: depth10eps.dvi
%%CreationDate: Tue Sep 10 13:05:38 2002
%%Pages: 18
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Helvetica Symbol
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips depth10eps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.09.10:1305
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258431 52099146 1000 600 600 (depth10eps.dvi)
@start
%DVIPSBitmapFont: Fa cmtt8 8 14
/Fa 14 118 df<123E127FEAFF80A5EA7F00123E0909738823>46
D<EB07F0EB1FFCEB7FFE48B5FC4814803907FC1FC0380FE0079038C0FFE0EA1F83485AEA
3E0FD87E1F13F0007C138FEB3F0738783E0338F87C01A212F0EB7800A5EB7C0112F8A239
783E03E0387C3F0790381F8FC0007E13FFD83E0F1380D83F071300381F83FE390FC0F9E0
9038E007F03807FC0F6CB5FC6C14C06C6C138090381FFE00EB07F81C297DA823>64
D<3803FF80000F13E04813F8487F80EB80FFEC3F80381F001FC7FC140F14FF137F0003B5
FC120F5A387FF00F130012FCA25A141F7E6C133F387F81FF90B512FC6C14FE7E000713C7
3901FE01FC1F1D7D9C23>97 D<B47E7FA41207A7EBC1FCEBC7FF01DF13C090B512E015F0
9038FE0FF8EBF8039038F001FCEBE000A249137EA2153EA5157E7F15FC7F14019038F803
F89038FE0FF090B5FC15E001DF138001CF1300380383F81F297FA823>I<ECFF8015C0A4
1407A7EB7F873801FFE74813F7000F13FF5A13E0383F803F387F001F007E130FA2481307
A25AA56C130FA2127E141F007F133F383F807FEBE0FF6CB512FE7E000313F76C13C73800
7F031F297EA823>100 D<EB3FC0EBFFF800037F4813FF481480381FF07F393F801FC0EB
000F007E130715E05AB6FCA415C000F8C8FC7EA2007EEB01C0007FEB03E0383F800713E0
391FF81FC06CB5FC6C14800001EBFE006C6C5AEB1FE01B1D7D9C23>I<B47E7FA41207A7
EBC1FCEBC7FF01DF138090B512C0A29038FE0FE0EBF807EBF00313E0A313C0AD39FFFE1F
FF5CA38020297FA823>104 D<133813FEA5133890C7FCA6EA7FFC487EA3127FEA003EB3
387FFFFEB6FCA36C13FE182A7AA923>I<EA7FFEB5FCA37EEA001FB3AD007FB512C0B612
E0A36C14C01B297CA823>108 D<397E1F01F039FF7FC7FC9038FFEFFE14FF6C80390FE1
FE1FEBC1FC01C07FEB80F8A2EB00F0AE3A7FE3FE3FE026FFF3FF13F0A3267FE3FE13E024
1D819C23>I<38FF81FCEBC7FF01DF138090B512C0A23907FE0FE0EBF807EBF00313E0A3
13C0AD39FFFE1FFF5CA380201D7F9C23>I<397FF00FE039FFF87FF8ECFFFC13FB6CB5FC
C613F8ECC078EC800091C7FC5BA25BA35BAA387FFFFCB57EA36C5B1E1D7E9C23>114
D<137013F8A7007FB51280B612C0A36C1480D800F8C7FCACEC01C0EC03E0A3EBFC07140F
9038FE1FC0EB7FFF158090383FFE00EB0FFCEB07F01B257EA423>116
D<39FF807FC001C013E0A400071303B01407140FEBE03F90B6FC7EA2C613F3EB3FC1201D
7F9C23>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmr6 6 1
/Fb 1 51 df<EA01FC3807FF80381C0FC0383003E0386001F0EB00F812F86C13FCA2147C
1278003013FCC7FC14F8A2EB01F0EB03E014C0EB0780EB0F00131E13385B5B3801C00CEA
0380380600185A5A383FFFF85AB512F0A216217CA01E>50 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmmi8 8 1
/Fc 1 70 df<013FB71280A2D900FEC7127F170F4A1407A20101150318005CA21303A25C
16300107147094C7FC4A136016E0130F15019138C007C091B5FC5BECC0074A6C5AA2133F
A20200EB000CA249151C92C71218017E1538173001FE15705F5B4C5A000115034C5A4914
0F161F00034AB4C7FCB8FC5E312D7DAC34>69 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmbx8 8 9
/Fd 9 58 df<EB0FFC90387FFF8048B512E03903FC0FF03907F003F848486C7E48486C7E
A2003F80A2497F007F1580A400FF15C0B0007F1580A46C6CEBFF00A2001F5CEBE001000F
5C6C6C485A3903FC0FF06CB55A6C6C1380D90FFCC7FC222D7DAB29>48
D<EB01E01303131F13FFB5FCA3133F1200B3AE007FB512F0A41C2C7AAB29>I<EB3FF038
01FFFE0007EBFF80001F14E0D83F8013F0397F003FF8EC1FFC39FF800FFEEBC00715FF80
A3EA7F80EA3F00C7FCA2EC07FEA2EC0FFC15F8EC1FF0EC3FE015C0EC7F80ECFE00495AEB
03F0495A90380FC00FEB1F00133E01FC131FD801F0131E485A48B512FE5A5A5A5AB612FC
A4202C7CAB29>I<EB0FFC90387FFF8048B512E03903F81FF03907C00FF848486C7E01E0
7FEA1FF013F8A56C48485AEA07E0C7485A5D4A5AECFF80013F90C7FC14FCECFFC0903800
1FF0EC0FFC6E7E6E7E16808016C0121FEA7FC0EAFFE0A416805CEA7FC049481300003F5C
391FF01FFC6CB55A6C14E0C61480D91FFCC7FC222D7DAB29>I<15F814011403A2140714
0F141F143F147FA214F7EB01E7EB03C71307EB0F87EB1F07131E133C137813F01201EA03
E013C0EA0780EA0F00121E123E5A5AB712F0A4C7380FF800A7010FB512F0A4242C7EAB29
>I<00181438391FC003F890B5FC15F015E015C01580ECFE005C14E091C7FC90C8FCA5EB
1FF8EB7FFF90B512C09038F01FE09038C00FF090380007F8001E14FC001CEB03FEC7FCA2
15FFA2120C123FEA7F8012FF13C0A215FE13801407D87E0013FCEC0FF86C131F391FC07F
F06CB512C06C14800001EBFC0038003FE0202D7CAB29>I<ECFF80010713F0011F7F9038
7FC07C49C67ED803FC137E484813FF5CEA0FF0EA1FE0A2003F6D5A157C484890C7FCA339
FFC3FF8001CF13E09038DFBFF09038FC03FC496C7E01F07F80491480A216C05BA4127FA4
123F6D1480A2001F491300EA0FF06D485A6C6C485A6CB55AC614E0013F1380D907FCC7FC
222D7DAB29>I<EB07FC90383FFF8090B512E03901F80FF03903E003F848486C7E380F80
0081001F147EA27F7F7F01FC13FE01FF5B14C16CEBE3F8ECFFF06C14C06C5C6C14E06C14
F881000380D80FE37FEA1FC1263F807F1380387F001F007E010713C000FE130148EB007F
153F151F150FA36C1580007E141F007F1500D83FC0137E391FF001FC6CB55A00035CC614
80D91FFCC7FC222D7DAB29>56 D<EB0FFCEB7FFF48B512C03907FC0FF0390FF007F84848
6C7E003F6D7EA2D87FC07F8012FF1680A416C0A45C127FA2003F5B13E06C6C5A000F5B38
03FF7E6C5B26007FF0138090C7FCA3260F80011300EA1FC0D83FE05B14035D140749485A
6C48485A9038C07FE06CB512806C91C7FC000113F838007FC0222D7DAB29>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe msbm10 10 2
/Fe 2 91 df<007FB612E0B712FE6C6F7E2703C01E0313E0000190393C00F3F00238EB70
F8EE783CEE381E83EE3C07161C18801703A617071800EE3C0FEE380E173EEE78FCEEF7F8
92380FFFE0023FB5128004FCC7FC16B8913838F03CED701CED781EED380EED3C0FED1C07
031E7FED0E03030F7FED0701EE81E0ED0380707E030113701778EEE0380300133C707EEE
700EEE780F9338380780EE3C03041C13C093381E01E00003013C90380E00F0007FB539F0
0FFFFEB67F6C8137397DB836>82 D<0007B712FC5AA23B0E1FF003C038903A3F00078078
01FC4A5AD80FF0495B49EB0E01D81F80011E5BED3C0390C738380780001E027890C7FCED
700FEDF00E001C903801E01E4B5A02031338C7EB80780207137091380F00F091380E01E0
021E5BEC1C03023C5BEC3807027890C8FC4A5AECE01E0101131CECC03C01031338903807
80784A5A495BEB0E01011E49EB0180D93C0314039038380780017890C7FCD9700F1407EB
F00E3801E01E4948EC0F0000031338D980785C00071370D900F05C48495CD81E0115F726
1C03C0EB01E7003C49495AD83807EC0F8E007890C7EA3F0E4848EB01FEB812FEA331397D
B83E>90 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmsy8 8 3
/Ff 3 84 df<173017F0160116031607A2160FA2161F161B163B1633167316E3A2ED01C3
16831503EE03F81507150EA2ED1C011538A2157015E0A2EC01C0EC0380A2DA07007F140E
92B5FC141F5C5C0270C7FC4A801301382003C038700780D8780FC8127FEAFE3FD8FFFE16
0449169C49ED3FF86C4816E06C4816C06C48ED1F000007CBFC36337EAF38>65
D<0378172003F81760020118E01A01A26FEE03C01A071A0F0203171F1A3F037E167FF2FF
80A2DA073EED01EFDA063FED03DFF1079FF10F1FDA0E1F151E020C6D023E1300197C19F8
4A6C6C49485A19E0F003C0DA3007EC078070EB0F00181E02604B133E6F6C137C02E05D02
C04A48137E6F6C485AD901804A5A70485A0103010049C7FC91C7EAFE3E49EC7EFC0106EC
7FF8010E6E5A010C5DD8301C6E5AD83C385DD87FF86EC8EA7F0849020C16F8484891C913
E01BC06C48F03E006C4895C7FC000FCEFC4D317FAD54>77 D<ED1FF0913801FFFE0207EB
FF80021F14C0EC3C039138F0007F4948131F4948130F13075C010F1500160E011F91C7FC
80A28080EB0FFC80903807FFC06D13F0010013FC6EB4FC020F13C002037F02007FED3FF8
150FD801C06D7ED807801303001FC71201123E481400A25E12FC6C5D15016C5D6D495A6C
6C495A01F0011EC7FCD83FFE13FC6CB512F06C14C0000349C8FC38007FE02A2F7EAD2B>
83 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmti8 8 45
/Fg 45 128 df<ED3FF8913801FFFE913903F00F8091390FC003C0EC1F00160F143EA214
7E027CEB070093C7FCA214FC5CA5017FB512FEA2903901F0007E167CA213034A13FC5EA3
0107130102C05BA31503010F5C1480A2923807E18016C3131FA2140016C7EE87005B013E
148EED03DEED01FC6F5A017E91C7FC137CA3EA38F812FCA25B12FDEAF1E0EAF3C0EA7F80
001ECAFC2A3D81AE28>12 D<EA0380EA0FE0121FA213F0A213E0EA0760120013E013C012
0113801203EA07001206120E5A5A12F012C00C157B8716>44 D<387FFFC0A2B5FCA26C13
0012057A901A>I<121C127F12FFA412FE12380808788716>I<14031407140F141E143E14
7E14FEEB03FCEB1F7CEB7CFC1360EB00F8A21301A214F0A21303A214E0A21307A214C0A2
130FA21480A2131FA21400A25BA2133EA2137EA2137CA213FCB512F8A2182C79AB24>49
D<EC7F80903801FFE0903807C0F890381E007C49133C49133E49131EEA01E613C701C313
3E120313831387D801CE137E01FC137CD8007813F890C7FCEC01F0EC03E0EC0F80EC3F00
EB0FFCA2EB001E141FEC0F80A215C0A41218127C141F00FC1480A248133F00E01400147E
6C5B387001F8387803F0383C0FC0D80FFFC7FCEA03F81F2D79AB24>51
D<16E01501821503A21507150FA2151FA2153B157B157315E382EC01C114031581EC0701
A2140EA2141C143C143802707F15005C13015C49B5FCA249C7FCA2130E131E131C498016
7E5B13F0485AA21203D80FF014FFD8FFFC011F13F0A22C2F7CAE35>65
D<011FB512FCEEFF80903A00FE000FC0EE03E04AEB01F017F80101140017FC5CA2130317
F84A1301A20107EC03F017E04AEB07C0EE0F80010FEC3F0016FE9138C007F891B512E049
14F89138C0007C4A7F82013F1580A291C7120FA25BA2017E141FA213FEEE3F005B167E00
015D4B5A49495A4B5A0003EC3F80B600FEC7FC15F82E2D7BAC32>I<DA01FE133091390F
FFC07091393F01E0F09138F80079D903E0133D4948EB1FE0D91F80130F49C7FC017E1407
4915C0485A485A5B00071680485AA2485A170048CAFCA25A127EA312FE5AA51638481578
16707E16F0007C5D15014B5A6C5D4BC7FC6C140E6C6C133C6C6C5B6C6C485A3900F80FC0
D97FFFC8FCEB0FF82C2F75AD33>I<011FB512FCEEFF80903A00FE000FC0EE03E04AEB01
F0EE00F80101157C173C4A143E171E0103151FA25CA21307A25CA2130FA24A143FA2131F
173E4A147EA2013F157C17FC91C8FC17F849EC01F0A2017EEC03E0A201FEEC07C0EE0F80
49EC1F00163E00015D5E49495AED07C00003023FC7FCB612FC15E0302D7BAC36>I<011F
B612FEA2903900FE0001EE007E4A143EA20101151E171C5CA21303A25C16E00107130117
0002E05B1503130F15074A485A91B5FC5BECC01F4A6CC7FCA2133FA2DA000E13E0A24914
01030013C0017E1403178001FE14071700495C161E12015E49147CED01FC0003EC0FF8B7
FC5E2F2D7CAC30>I<011FB612F8A2903900FE000716014A13001778130117705CA21303
A25C16E001071301170002E05B1503130F15074A485A91B5FC5BECC01F4A6CC7FCA2133F
A2EC000EA25B92C8FC137EA213FEA25BA21201A25BA21203B512F0A22D2D7CAC2E>I<03
FF1318020FEBC03891393F00F07802F8EB38F8D903F0131CD907C0EB0FF0EB1F8049C712
07137E49EC03E0485A485AA2484815C0485AA2485A178048CAFCA25A127EA312FE5AA292
B512E0A2923801FE006F5A15015EA3007C14035E127E123E001E1407001F5D6C6C130F6C
6C133F6C6C13793A00F803F1C090383FFF80D907FCC8FC2D2F75AD37>I<90261FFFF8EB
FFFEA2D900FEC7EA1FE018804AEC3E005F01015DEE01E04A495AEE0F8001034AC7FC163C
4A5B4B5A0107EB03C04B5A4A48C8FC153E010F137E15FEECC1FF14C790381FCF3F02DE7F
ECFC1F02F87FEB3FE04A6C7E1480EC000749801503017E80A201FE6D7EA2491300820001
157E167F5B831203B539C007FFF8A2372D7BAC37>75 D<D91FFE903803FFF8A2D900FF90
38003F80EF1E00A26F131C49153C6F133814CFA201036D137802C714701487EC83F00107
15F06F5B1401A2010FEBFC0102005C130E157E011E1403037F5B011C133FA2013C148703
1F90C7FC1338ED0FC7017814CF16EE01701307A201F014FE6F5A5B150112015E49130048
7E120FD8FFFE1470A2352D7BAC35>78 D<4AB4FC020F13C091383E03F09138F8007CD903
E07FD907807F011FC77E013E15804914074915C0485AEE03E0485A485AA2485A121F90C8
FC5AA2003E1507127EA348ED0FC0A3EE1F80A217005E163E167E167C16FC4B5A007C5D4B
5A6C4A5A4B5A6C4AC7FC6C6C133E6D13F83903E003F03901F80FC026007FFFC8FCEB0FF0
2B2F75AD37>I<011FB512FCEEFF80903A00FE000FE0EE03F04AEB00F8A20101157CA25C
177E130317FC5CA20107EC01F8A24AEB03F017E0010FEC07C0EE0F804AEB3F00ED01FC91
B512F04991C7FC0280C8FCA3133F91C9FCA35B137EA313FE5BA312015BA21203B512C0A2
2F2D7CAC30>I<91380FF00C91383FFC1C9138F80F3C903903C007BC9039078003FC9039
0F0001F8131E491300A24914F0A313F816E0A216007F7F6D7EEB7FF8ECFF806D13E06D13
F801077F01017FEB001FEC01FF6E7E8181A281121CA35D003C141EA25DA2007E5C5D007F
495A6D485A26F1F01FC7FC38E07FFC38C00FF0262F7BAD28>83 D<000FB712F0A23A1FE0
0FE00701001401001E02C013E0481500141F12380078EC8001A20070013F14C012F04814
00A25CC791C7FC147EA214FEA25CA21301A25CA21303A25CA21307A25CA2130FA25CA213
1FA25CA2133F003FB57EA22C2D74AC33>I<EB07C0EB1FF090387C39C0EBF81FEA01F038
03E00FEA07C0120FD81F801380A2EA3F00141F481400127EA25C00FE133E5AA2EC7E18EC
7C385AA214FCD878011378397C03F870A2393C0F78E0381E1E3D390FF81FC03903E00F00
1D1F799D24>97 D<13F8121FA21201A25BA21203A25BA21207A25BA2120FEBC7C0EB9FF0
EBF878381FF03CEBE03EEBC01EEB801FEA3F00A2123EA2007E133FA2127CA2147F00FC13
7E5AA214FCA214F8130114F0EB03E0EA780714C0383C0F80381E3E00EA0FF8EA03E0182F
78AD21>I<EB01F8EB0FFE90383E0780EBFC03D801F013C03803E0070007130FEA0FC001
801380121F48C8FCA25A127EA312FE5AA5EC0180007CEB03C0EC0780EC0F006C131E001E
137C380F83F03807FFC0C648C7FC1A1F799D21>I<153EEC07FEA2EC007EA2157CA215FC
A215F8A21401A215F0A21403EB07C390381FF3E0EB7C3BEBF81FEA01F03903E00FC0EA07
C0120FEA1F801580EA3F00141F5A007E1400A25C12FE48133EA2EC7E18153848137CA214
FCD878011378397C03F870A2393C0F78E0381E1E3D390FF81FC03903E00F001F2F79AD24
>I<EB03F8EB0FFEEB3E0FEBF8073901F00380EA03E0EA07C0000F1307D81F8013005C38
3F001E5C387F03F8EBFFE049C7FC007EC8FC12FE5AA4127CEC0180EC03C0EC07806CEB0F
00141E6C137C380F83F03803FFC0C648C7FC1A1F799D21>I<EC01F0EC07FCEC0F9EEC1F
1EEC1E3EEC3E7EA3EC7C381500A314FC5CA590387FFFF0A2903801F000A313035CA41307
5CA4130F5CA4131F91C7FCA45B133EA4137E137CA3EA38F812FCA25B12FDEAF1E0EAF3C0
EA7F80001EC8FC1F3D81AE16>I<14F8EB03FE90380F873890381F03F8137EEB7C0113F8
1201EA03F015F0EA07E01403120F01C013E0A21407121F018013C0A2140FA21580141F12
0F143FEC7F006C6C5AEA03C33801FFBF38007E3E1300147EA2147CA214FC00385BEAFC01
5C495A48485A38F01F80D87FFEC7FCEA1FF01D2C7C9D21>I<131FEA03FFA2EA003FA213
3EA2137EA2137CA213FCA25BA21201147E9038F3FF809038F787C03903FE03E013FC13F8
A2EA07F013E0A213C0000F130715C01380A2001F130F15801300141F481406150E003E13
3F143E007E141EEC7E1C007C137CEC3C3812FC157048EB1FE00070EB07801F2F7BAD24>
I<130E131FEB3F80A2EB1F00130E90C7FCA9EA03E0EA0FF0EA1E78EA1C7C123812781270
13FCEAF0F812E012E1EAC1F0120112035B12075BA2120F13831387121F13075BEA3F0E12
3EEA1E1C133C1338EA0FF0EA03C0112E7AAC16>I<EC0380EC07C0140FA3EC070091C7FC
A9EB01F0EB07FCEB0F1E131EEB1C1F13381378EB703FEBF03E13E0A2EBC07E1300147CA2
14FCA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131F003890C7FCEAFC3F13
3E5B485AEAF1F0EA7FC0001FC8FC1A3B82AC16>I<131FEA03FFA2EA003FA2133EA2137E
A2137CA213FCA25BA21201EC01E09038F007F0EC1E380003EB3878EC71F8EBE0E1EBE1C1
3807E381EC00E049130013CEEA0FFC13F0A213FF381F9FC0EB87E0EB03F01301003F1430
1570123EA2007E14F015E0007C13E014E100FC14C0903800F38048EB7F000070131E1D2F
7BAD21>I<137CEA0FFCA21200A213F8A21201A213F0A21203A213E0A21207A213C0A212
0FA21380A2121FA21300A25AA2123EA2127EA2127CA2EAFC30137012F8A213F013E012F0
12F113C012FBEA7F80EA1E000E2F7AAD12>I<3B07801FC007F03B1FE07FF01FFC3B3DF1
E0F8783E3B38F3C078F01E3B78FF007DC01FD870FEEB7F80A2D8F1FC1400D8E1F8137EA2
49137C00C302FC5B0003163E495BA200070101147E177C01C05B17FC000F0103ECF83018
700180EBE00117F0001F010715F0040313E0010001C013E0EFE1C048010F1301EFE38000
3E91398000FF00001C6DC7123C341F7A9D3A>I<3907801FC0391FE07FF0393DF1E0F839
38F3C0783978FF007CEA70FEA2EAF1FCEAE1F8A25B00C314FC00035C5BA2000713015D13
C01403000FECE0C015E1EB800715C1001F14C3020F13800100138391380787005A158E00
3EEB03FC001CEB00F0221F7A9D28>I<EB03F8EB0FFE90383E0F809038FC07C03801F003
D803E013E01207390FC001F01380121FEA3F0014035A127EA2140700FE14E05AA2EC0FC0
A2EC1F80A2007CEB3F00143E5C6C5B381E01F0380F07C06CB4C7FCEA01FC1C1F799D24>
I<90383C01F09038FF07FC3901E79E1E9038C7BC0F000301F81380903887F00702E013C0
38078FC0130F1480A2D8061F130F12001400A249131F1680133EA2017EEB3F00A2017C13
3E157E01FC137C5DEBFE015D486C485AEC0F80D9F3FEC7FCEBF0F8000390C8FCA25BA212
07A25BA2120FA2EAFFFCA2222B7F9D24>I<3807803E391FE0FF80393CF3C1C03938F781
E03878FF07EA70FE13FC12F139E1F8038091C7FC5B12C312035BA21207A25BA2120FA25B
A2121FA290C8FCA25AA2123E121C1B1F7A9D1E>114 D<EB0FC0EB7FF0EBF03C3801E01C
3803C01EEA0780143EA2000F133C1418EBC00013F813FF6C13C06C13E06C13F0EA007F13
0713031301EA780012FCA2130100F813E012E0EB03C038F0078038781F00EA1FFCEA07F0
171F7A9D1D>I<131C133EA2137EA2137CA213FCA25BA21201A2B512E0A23803F000A25B
A21207A25BA2120FA25BA2121FA290C7FCA24813C01301123E130314801307003C130013
0E131E6C5AEA0FF0EA07C0132B7AA918>I<EA03C0D80FF01338D81E78137CD81C7C13FC
003814F812781270EBFC01D8F0F813F012E012E138C1F003000114E0120313E014070007
14C013C0A2EC0FC3000F14871380A2141F158F0007EB3F0E147F01C0131C3903E1E7BC39
01FF83F839007E01E0201F7A9D26>I<3903C001C0390FF003E0391E7807F0EA1C7C1238
007813030070130113FCD8F0F813E012E000E1130038C1F001000114C0120313E0140300
07148013C0A2EC0700120F1380140EA25C12076D5A00035B6D5AC6B45A013FC7FC1C1F7A
9D21>I<D803C01407D80FF09038700F80D81E789038F81FC0381C7C01003814F0007815
0F00701507EBFC03D8F0F801E0138012E000E1150326C1F007130700011600000314C013
E0020F5B0007150E01C01380A2161E000F011F131C01801300163C163816780007491370
9039C07F80F00003EC81E03A01E0E7C3C03A00FFC1FF8090263F007EC7FC2A1F7A9D2F>
I<90383E01F09038FF87F83903C7DE1E380783DC903803F87EEA0E01001E13F0EA1C0300
3C14380038EBE000A2EA300700005BA3130F5CA3011F1318153814001238D87C3F137012
FC15E0EB7F0139F0FF03C03970E78780393FC3FE00381F00F81F1F7C9D21>I<EA03C0D8
0FF01338D81E78137CD81C7C13FC003814F812781270EBFC01D8F0F813F012E012E138C1
F003000114E0120313E01407000714C013C0A2140F000F14801380A2141F150000075B5C
13C03803E1FE3801FFBE38007E3EEB007E147CA2003E5BA2387E01F0A2387C03E0387007
C06C485AD83C3EC7FCEA1FF8EA07E01E2C7A9D23>I<010F13E0EB3F80EBFFC1ECE3C048
EBF3803803E0FF9038C03F00EB801E00075BC7123814785C495A495A495A49C7FC131E5B
5B9038F001803801E003EA03C038078007390F000F00EA1FE0EBF83E383C7FFE486C5A38
701FF838F00FF038E007C01B1F7C9D1D>I<381C01C0387F07F0EAFF0FA400FE13E03838
038014086EAD24>127 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmsy7 7 3
/Fh 3 49 df<B712FEA327037A8F34>0 D<1338A50060130C00F8133E00FC137E00FE13
FE383FBBF83807FFC000011300EA007C48B4FC000713C0383FBBF838FE38FE00FC137E00
F8133E0060130C00001300A517197B9A22>3 D<13E0EA01F0EA03F8A3EA07F0A313E0A2
120F13C0A3EA1F80A21300A25A123EA35AA3127812F8A25A12100D1E7D9F13>48
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmmi7 7 12
/Fi 12 119 df<1238127C12FE12FFA2127F123B1203A31206A3120C1218123812701220
08127A8614>59 D<4B7E1503150782150F151FA2153FA2156F15CF82EC01871403150714
06140E140C02187FA2EC30031460A214C013011480D903007F91B5FC5B90380C0001A25B
13380130805B01E013005B12011203000F4A7ED8FFF890381FFFE0A22B2A7DA932>65
D<4AB4FC021F13E091387E01F8903901F8007ED907E0131FD90F80EB0F8049C7EA07C013
7E49EC03E0485A4915F0484814011207485A4915F8121F90C8FC5A17F0007E1503A4007C
ED07E012FC17C0160F1780161F007C1600163E007E157E003E017C5BD901FE5B3A1F0387
01F09039070387C03A0F86018F80D807C6019FC7FCD803F613FC3900FF03F090393FFFC0
06EB07FDD90001130E6F5A163C6F5AEDFFF85E6E5B5E6F5A033EC7FC2D347DA834>81
D<EA01F0123FA2EA03E0A21207A25BA2120FA25BA2121F139FEB3FC0EBE0E0383FC0F0EB
0078A2123E007E137CA2127CA212FC14F85AA338F001F0A214E0130314C0EB078038700F
00EA781E6C5AEA1FF0EA07C016297CA71D>98 D<130E131F5BA2133E131C90C7FCA7EA03
E0487EEA0C78EA187C1230A212605B12C0A2EA01F0A3485AA2485AA2EBC180EA0F81A238
1F0300A213066C5A131CEA07F06C5A11287DA617>105 D<1407EC0F80141FA21500140E
91C7FCA7EB03E0EB07F8EB0C3C1318EB303E136013C0A248485AA2C7FCA25CA4495AA449
5AA4495AA4495AA21238D87C1FC7FC12FC133E485AEA70F8EA7FE0EA1F80193380A61B>
I<133EEA07FEA2EA007CA213FCA25BA21201A25BA21203EC07809038E01FC0EC38600007
EB61E014C3EBC187EBC307D80FC613C09038CC038001B8C7FC13E0487E13FEEB3F80EB0F
C0486C7E1303003E1460A2127EECC0C0127CECC18012FC903801E30038F800FE0070137C
1B297CA723>I<3907801FC0390FE07FF03918F0E0F83930F1807CEBFB00D860FE133C5B
5B00C1147C5B1201A248485BA34A5AEA07C01660EC03E0A23A0F8007C0C0A2EDC1809138
03C300D81F0013C7EC01FE000EEB00F8231B7D9929>110 D<EB0FE0EB3FF8EBF83C3801
E00E3803C00F3907800780EA0F00121E123E003C14C0127C158048130FA31500485BA214
3E143C5C12785C383C03C0381E0F80D80FFEC7FCEA03F81A1B7C9921>I<9038F007C039
01FC1FF039031E78780006EBE03C90381FC01C000CEB801E14005B0018141F133E120013
7E153E137CA213FC157C5B1578000114F0A2EC01E0EC03C03903FC07809038FE1F00EBE7
FCEBE1F0D807E0C7FCA25BA2120FA25B121FEAFFF8A22025809922>I<EB1F03EB7F8738
01E0CF3803C07FEA0780380F003E5A121E003E137E003C137C127CA24813FC14F8A3EAF0
0114F0A3130314E0EA7007EA780FEA3C3F381FF7C0EA07C7EA0007130F1480A3131F1400
5B3803FFF0A218257C991E>I<3903E001C03907F003E0380C7807EA187C003013031401
1260EBF80000C014C0A2EA01F0A2EC0180EA03E0A2EC0300EA07C0A21406A25CA200035B
6D5A3801F0E06CB45A013FC7FC1B1B7D9921>118 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmr7 7 5
/Fj 5 52 df<140EB3A2B812E0A3C7000EC8FCB3A22B2B7DA333>43
D<EB3F803801FFF03803E0F83807803C48487E001E7F003E1480A2003C1307007C14C0A4
00FC14E0AE007C14C0A36CEB0F80A36CEB1F006C131E6C6C5A3803E0F86CB45A38003F80
1B277EA521>48 D<13381378EA01F8121F12FE12E01200B3AB487EB512F8A215267BA521
>I<13FF000313E0380E03F0381800F848137C48137E00787F12FC6CEB1F80A4127CC7FC
15005C143E147E147C5C495A495A5C495A010EC7FC5B5B903870018013E0EA0180390300
030012065A001FB5FC5A485BB5FCA219267DA521>I<13FF000313E0380F01F8381C007C
0030137E003C133E007E133FA4123CC7123E147E147C5C495AEB07E03801FF8091C7FC38
0001E06D7E147C80143F801580A21238127C12FEA21500485B0078133E00705B6C5B381F
01F03807FFC0C690C7FC19277DA521>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmti10 10 42
/Fk 42 122 df<EE3FFC4BB51280923907E007C092391F8001E0DB3F0013F0037E13034B
1307A24A5A18E04A48EB038094C7FCA314075DA4140F5DA3010FB7FCA25F903A001F8000
7EA217FE023F5C92C7FCA216015F5C147E16035FA214FE4A13075FA30101140F5F4AECC1
C0A2161F1783010316805CA2EF870013074A5CEE0F8EEE079EEE03FC010FEC00F04A91C7
FCA35C131FA2001C90CAFC127E5BEAFE3E133C137CEAF878EA78F0EA3FE0EA0F80344C82
BA2F>12 D<EA03C0EA07F0120F121F13F8A313F0EA07B0EA003013701360A213E013C012
01EA038013005A120E5A5A5A5A5A0D197A8819>44 D<387FFFF8A2B5FCA214F015057994
1E>I<120EEA3F80127F12FFA31300127E123C0909778819>I<15181538157815F0140114
031407EC0FE0141F147FEB03FF90383FEFC0148FEB1C1F13001580A2143FA21500A25CA2
147EA214FEA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA2
91C7FC497EB61280A31D3877B72A>49 D<EC03F8EC0FFE91383C0F809138F007C0903901
E003E0D903C013F09038078001020013F8130E131E90391C6000FCEB3870EC30011370A2
13F013E0EC70030001016013F813C014E0ECC00701C114F0903881800F018314E09039C7
001FC001FEEB3F80D80078140090C7127E5D4A5A4A5AEC07C0EC1F80023EC7FC14FCEB01
F0EB07C0495A011EC8FC137C4914C0484813015B485A4848130348C71380000E1407001E
140F48EC1F00D83FF85B397FFFC07E39783FFFFCEA700FD8F0075BD8E0015B6D13C0021F
C7FC263A79B72A>I<EC03FCEC1FFF91387E07C09138F003E0903903C001F0D9078013F8
49C7FC131E011C14FC133CEB38C0EB78E0EB7060150101F014F813E0A2ECE003D971C013
F090387F8007D91E0013E090C7EA0FC0ED1F80ED3F00157E5D49B45A4913E092C7FC9038
000FC0EC03F014016E7E81A381A5007E130100FE5CA31403485C00E05C14074A5A5D4A5A
007049C7FC0078137E6C13F8381E07F03807FF80D801FCC8FC263A78B72A>I<133C137E
13FF5AA313FE13FCEA00701300B2120EEA3F80127F12FFA31300127E123C102477A319>
58 D<EB0780EB0FC0EB1FE0133FA314C01480EB0E0090C7FCB2EA03C0487E487E121FA4
5B1207EA006013E05BA212015B120390C7FC5A120E5A121812385A5A5A13347AA319>I<
0007B812FE4817FFA26C17FECCFCAE007FB812C0B912E0A26C17C03816779F40>61
D<14FCEB07FF90381F03C090383C01E090387000F049137048481378485A120748C7FC12
0E121E121C003C14F8003814F0007813011270007CEB03E000FE1307EC0FC0EC1F80147F
48EBFF00387001FCC6485AEB0FF0495AEB3F8049C7FCEA01FE485A13F0485A5B380F81C0
1301A2495A130791C7FC131EEA07FCEA01F0C9FCA81207EA1FC0123F127FA35B6CC8FC12
1E1D3C70BB2A>63 D<DB03FE130E92393FFF801E92B5EAE03C913903FE01F0913A0FF000
787CDA3FC0EB3CFC4AC7EA1FF802FE140FEB03FC49481407494815F049481403495A5C49
C813E05B485A5B000317C0485AA2485A1880485A94C7FCA2485AA3127F5BA312FF90CBFC
A41738A217784816707E17F06C5E16015F16036C6C4A5A94C7FC001F150E6D141E000F5D
6D5C6C6C495A6C6CEB03C0D801FEEB0F8027007F807EC8FC6DB45A010F13E0010090C9FC
373D74BA3B>67 D<0107B712FEA3903A000FF000074B1300187C021F153CA25DA2143FA2
5D1838147FA292C8FCEE03804A130718004A91C7FCA201015CA24A131E163E010314FE91
B5FC5EA2903807F800167C4A1378A2130FA24A1370A2011F14F0A24A90C8FCA2133FA25C
A2137FA291CAFCA25BA25B487EB6FCA337397BB836>70 D<0103B5D8F80FB512E0A39026
0007F8C7381FE0004B5DA2020F153F615DA2021F157F96C7FC5DA2023F5D605DA2027F14
016092C7FCA24A1403605CA249B7FC60A202FCC712070103150F605CA20107151F605CA2
010F153F605CA2011F157F95C8FC5CA2013F5D5F5CA2017F14015F91C7FC491403007FD9
FE01B512F8B55BA243397CB83E>72 D<0103B512F8A390390007F8005DA2140FA25DA214
1FA25DA2143FA25DA2147FA292C7FCA25CA25CA21301A25CA21303A25CA21307A25CA213
0FA25CA2131FA25CA2133FA25CA2137FA291C8FC497EB6FCA25C25397CB820>I<92383F
C00E913901FFF01C020713FC91391FC07E3C91393F001F7C027CEB0FF84A130749481303
495A4948EB01F0A2495AA2011F15E091C7FCA34915C0A36E90C7FCA2806D7E14FCECFF80
6D13F015FE6D6D7E6D14E0010080023F7F14079138007FFC150F15031501A21500A2167C
120EA3001E15FC5EA3003E4A5AA24B5AA2007F4A5A4B5A6D49C7FC6D133ED8F9F013FC39
F8FC03F839F07FFFE0D8E01F138026C003FCC8FC2F3D7ABA2F>83
D<0007B812E0A25AD9F800EB001F01C049EB07C0485AD900011403121E001C5C003C1780
1403123800785C00701607140700F01700485CA2140FC792C7FC5DA2141FA25DA2143FA2
5DA2147FA292C9FCA25CA25CA21301A25CA21303A25CA21307A25CA2130FA25CEB3FF000
7FB512F8B6FCA2333971B83B>I<14F8EB07FE90381F871C90383E03FE137CEBF8011201
48486C5A485A120FEBC001001F5CA2EA3F801403007F5C1300A21407485C5AA2140F5D48
ECC1C0A2141F15831680143F1587007C017F1300ECFF076C485B9038038F8E391F0F079E
3907FE03FC3901F000F0222677A42A>97 D<133FEA1FFFA3C67E137EA313FE5BA312015B
A312035BA31207EBE0F8EBE7FE9038EF0F80390FFC07C013F89038F003E013E0D81FC013
F0A21380A2123F1300A214075A127EA2140F12FE4814E0A2141F15C05AEC3F80A215005C
147E5C387801F8007C5B383C03E0383E07C0381E1F80D80FFEC7FCEA01F01C3B77B926>
I<147F903803FFC090380FC1E090381F0070017E13784913383901F801F83803F0031207
13E0120FD81FC013F091C7FC485AA2127F90C8FCA35A5AA45AA3153015381578007C14F0
007EEB01E0003EEB03C0EC0F806CEB3E00380F81F83803FFE0C690C7FC1D2677A426>I<
ED01F815FFA3150316F0A21507A216E0A2150FA216C0A2151FA21680A2153FA202F81300
EB07FE90381F877F90383E03FF017C5BEBF80112013803F00048485B120FEBC001121F5D
EA3F801403127F01005BA214075A485CA2140FA248ECC1C0A2141F15C3ED8380143F1587
007C017F1300ECFF076C485B9038038F8E391F0F079E3907FE03FC3901F000F0253B77B9
2A>I<147F903803FFC090380FC1E090383F00F0017E13785B485A485A485A120F4913F8
001F14F0383F8001EC07E0EC1F80397F81FF00EBFFF891C7FC90C8FC5A5AA55AA2153000
7C14381578007E14F0003EEB01E0EC03C06CEB0F806CEB3E00380781F83803FFE0C690C7
FC1D2677A426>I<ED07C0ED1FF0ED3E38ED7C3CEDF8FC15F9140115F1020313F8EDF0F0
160014075DA4140F5DA4141F5D010FB512C05B16809039003F800092C7FCA45C147EA414
FE5CA413015CA413035CA413075CA4130F5CA3131F5CA391C8FC5B121CEA7E3EA2EAFE3C
137C1378EAF8F01278EA3FC0EA0F80264C82BA19>I<EC07C0EC3FF09138FC38E0903901
F01FF0EB03E0903807C00FEB0F80011F1307D93F0013E05B017E130F13FE4914C0120115
1F1203491480A2153F1207491400A25DA249137EA215FEA25D00031301140314076C6C48
5A0000131FEB787BEB3FF390380FC3F0EB00031407A25DA2140F5D121C007E131F5D00FE
49C7FC147E5C387801F8387C07E0381FFF80D803FEC8FC24367CA426>I<EB03F0EA01FF
A3EA00075CA3130F5CA3131F5CA3133F91C8FCA35B90387E07F0EC1FFCEC783E9038FFE0
1F02C01380EC800F1400485A16C05B49EB1F8012035BA2153F000715005BA25D000F147E
5B15FE5D121FD98001131C15F8163C003F01031338010013F0A216704814E0007E15F016
E0EDE1C000FE903801E38048903800FF000038143C263B7BB92A>I<EB01C0EB07E014F0
130F14E01307EB038090C7FCAB13F0EA03FCEA071EEA0E1F121CA212385B1270A25BEAF0
7E12E013FEC65AA212015B1203A25B12075BA2000F13E013C013C1001F13C01381A2EB83
801303EB0700A2130E6C5AEA07F8EA01E0143879B619>I<150E153F157FA3157E151C15
00ABEC1F80EC7FC0ECF1F0EB01C090380380F813071401130F130E131EEB1C03133C0138
13F0A2EB0007A215E0A2140FA215C0A2141FA21580A2143FA21500A25CA2147EA214FEA2
5CA21301A25CA213035C121C387E07E0A238FE0FC05C49C7FCEAF83EEA787CEA3FF0EA0F
C0204883B619>I<EB03F0EA01FFA3EA00075CA3130F5CA3131F5CA3133F91C8FCA35B01
7EEB0F80ED3FE015F09039FE01C1F09038FC0387EC0707140E0001011C13E0EBF8389138
3003800270C7FC00035BEBF1C0EBF38001FFC8FCEA07FC7FEBFFC0EBE7F8380FE1FCEBC0
7E147F80001F809039801F81C0A21583003F013F138001001303A21507481500007E133E
EC1E0E151E00FE6D5A48EB07F80038EB01E0243B7BB926>I<EB0FC0EA07FFA3EA001F14
80A2133FA21400A25BA2137EA213FEA25BA21201A25BA21203A25BA21207A25BA2120FA2
5BA2121FA25BA2123FA290C7FCA25AA2EA7E0EA212FE131EEAFC1CA2133C133812F81378
EA7870EA7CE0121FEA0F80123B79B915>I<D801E001FEEB07F03C07F803FF801FFC3C0E
3C0F07C0783E3C1E3E3C03E1E01F261C1F78D9F3C013803C383FF001F7800F02E0140000
7801C013FE007018C002805B4A4848EB1F80EAF07FD8E07E5CA200000207143F01FE1700
495CA2030F5C0001177E495C18FE031F5C120349DA8001131C18F8033F153C0007040313
3849020013F0A24B1570000F17E049017E15F019E003FEECE1C0001FEE01E34949903800
FF000007C70038143C3E2679A444>I<D801E013FE3A07F803FF803A0E3C0F07C03A1E3E
3C03E0261C1F787F39383FF00114E0007813C000708114804A485AEAF07FEAE07EA20000
140701FE5C5BA2150F00015D5B151F5E12034990383F8380160316070007027F13004913
7EA2160E000F147C49141E161C5E001FEC3C7849EB1FE00007C7EA0780292679A42F>I<
147F903803FFC090380FC1F090381F00F8017E137C5B4848137E4848133E0007143F5B12
0F485AA2485A157F127F90C7FCA215FF5A4814FEA2140115FC5AEC03F8A2EC07F015E014
0F007C14C0007EEB1F80003EEB3F00147E6C13F8380F83F03803FFC0C648C7FC202677A4
2A>I<9039078007C090391FE03FF090393CF0787C903938F8E03E9038787FC00170497E
ECFF00D9F0FE148013E05CEA01E113C15CA2D80003143FA25CA20107147FA24A1400A201
0F5C5E5C4B5A131F5EEC80035E013F495A6E485A5E6E48C7FC017F133EEC70FC90387E3F
F0EC0F8001FEC9FCA25BA21201A25BA21203A25B1207B512C0A3293580A42A>I<ECF803
903807FE0790381F871F90383E03BF017C13FEEBF80112013803F000484813FC120F5B00
1F130115F8EA3F80A2007F1303010013F0A34813074814E0A3140F4814C0A3141F158014
3FA2007C137FECFF006C5AEB03BF381F0F7F3807FE7EEA01F0C7FC14FE5CA313015CA313
035C130748B512C0A3203577A426>I<3903C003F0390FF01FFC391E783C0F381C7C703A
3C3EE03F8038383FC0EB7F800078150000701300151CD8F07E90C7FCEAE0FE5BA2120012
015BA312035BA312075BA3120F5BA3121F5BA3123F90C9FC120E212679A423>I<14FE90
3807FF8090380F83C090383E00E04913F00178137001F813F00001130313F0A215E00003
EB01C06DC7FC7FEBFFC06C13F814FE6C7F6D13807F010F13C01300143F141F140F123E12
7E00FE1480A348EB1F0012E06C133E00705B6C5B381E03E06CB45AD801FEC7FC1C267AA4
22>I<EB0380EB07C0130FA4131F1480A3133F1400A35B137E007FB5FCA2B6FC3800FC00
A312015BA312035BA312075BA3120F5BA3121FEB801CA2143C003F1338EB0078147014F0
14E0EB01C0EA3E03381F0780380F0F00EA07FCEA01F0183579B31C>I<13F8D803FEEB01
C0D8078FEB03E0390E0F8007121E121C0038140F131F007815C01270013F131F00F01300
00E015805BD8007E133FA201FE14005B5D120149137EA215FE120349EBFC0EA20201131E
161C15F813E0163CD9F003133814070001ECF07091381EF8F03A00F83C78E090393FF03F
C090390FC00F00272679A42D>I<01F0130ED803FC133FD8071EEB7F80EA0E1F121C123C
0038143F49131F0070140FA25BD8F07E140000E08013FEC6485B150E12015B151E000314
1C5BA2153C000714385B5DA35DA24A5A140300035C6D48C7FC0001130E3800F83CEB7FF8
EB0FC0212679A426>I<01F01507D803FC903903801F80D8071E903907C03FC0D80E1F13
0F121C123C0038021F131F49EC800F00701607A249133FD8F07E168000E0ED000313FEC6
4849130718000001147E5B03FE5B0003160E495BA2171E00070101141C01E05B173C1738
A217781770020314F05F0003010713016D486C485A000190391E7C07802800FC3C3E0FC7
FC90393FF81FFE90390FE003F0322679A437>I<903907E007C090391FF81FF89039787C
383C9038F03E703A01E01EE0FE3803C01F018013C0D8070014FC481480000E1570023F13
00001E91C7FC121CA2C75AA2147EA214FEA25CA21301A24A1370A2010314F016E0001C5B
007E1401010714C000FEEC0380010F1307010EEB0F0039781CF81E9038387C3C393FF03F
F03907C00FC027267CA427>I<13F0D803FCEB01C0D8071EEB03E0D80E1F1307121C123C
0038140F4914C01270A249131FD8F07E148012E013FEC648133F160012015B5D0003147E
5BA215FE00075C5BA214015DA314035D14070003130FEBF01F3901F87FE038007FF7EB1F
C7EB000F5DA2141F003F5C48133F92C7FC147E147C007E13FC387001F8EB03E06C485A38
3C1F80D80FFEC8FCEA03F0233679A428>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmmi10 10 47
/Fl 47 121 df<EC3FC0ECFFF8903807E07C90380F801FD93F00EB800C017E130F499038
07C01C4848ECE018485A484801031338000FEDF0305B001F16704848156017E0007F16C0
90C713F1178016F34816004815F716FE5EA2485D5EA4007E1407150F003E91381DF81800
3F14796C02E11338270F8007C013303B07E03F007CF02601FFF8EB3FC026003FC0EB0F80
2E267DA435>11 D<ED07F0ED1FFE9238780F809238E007C0913901C003E09138038001DA
070013F0140E4A13004A14F8143002701301146002E014F05C010114035C17E001031407
91C713C0EE0F8049EC1F000106143E913803FE7C90390E07FFF890390C0E03E091380FFF
F0913803FC78011CC7127C011880A28213381330A2178013701360A301E0143F491500A3
00015D167E5B16FE00035D6D495AA24B5A00074A5AD806E0495A0160495A0170013EC7FC
D80E3813FC390C1E03F0903807FFC0D901FEC8FC001CCAFC1218A312381230A312701260
A312E05AA22D4B7EBA2F>I<EB07F0D91FFC1430D97FFE147090B5146000036E13E0486E
13C0D9F01F1301270F8007E01380261F00011303001CD900F0130048EC7007160648EC30
0E0060EC380CED181C00E01518C8121CED0C3816301670166016E05EA2150D5EA2150F93
C7FCA2150EA3150CA3151CA215181538A45DA45DA44A5AA35D2C377FA42B>I<D803E013
7F3A07F801FFE03A0E7C0781F03A1C3E1E00F826383F3813FC00305B4A137C00705B0060
5BA200E090C712FC485A137EA20000140113FE4914F8A2150312014914F0A21507120349
14E0A2150F12074914C0A2151F120F491480A2153F121F4914000007C7FCC85AA2157EA2
15FEA25DA21401A25DA21403A25DA2EC01C026377EA429>17 D<133F14C0EB07F06D7E80
1301A26D7EA3147FA36E7EA36E7EA36E7EA36E7EA36E7EA36E7EA26E7EA214014A7E5C4A
7E91381E3F80143C14784A6C7E1301EB03E049486C7EEB0F80EB1F00496D7E137E5B4848
6D7E485A485A000F6E7E485A485A48C87E12FE167F4816800070151F293B7CB930>21
D<EB0380D907E01307010FEC0F80161F5CA2011F143FA24A1400A2013F5CA291C7127EA2
4914FEA2017E5CA201FE1301A2495CA200011403A249ECF018A2000314071738EEE03015
0F00071670031F1360153F6D017713E0486C9038E3E1C0903AFF03C1F380903ACFFF00FF
00D9C3FC133ED81FC0C9FCA25BA2123FA290CAFCA25AA2127EA212FEA25AA212702D377E
A432>I<017E1438D83FFE147E16FEA2D801FC14FC12000001140116F85BED03F0120315
074914E0150F000715C0ED1F805BED3F00000F147EA2495B4A5A001F495A5D49485A4A5A
003F49C7FC143EEB00F8495A48485AEB0F80D87E3EC8FC13F8EAFFE0138000F8C9FC2725
7CA429>I<013FB612E090B712F05A120717E0270F807006C7FC391E00600E48140C0038
13E04813C048141CEAC0011200148001035BA213071400A25B1578011E137CA3133E133C
137C157E13FC5B1201157F1203497FA3D801C0131C2C257EA32F>25
D<0140151E01E0153F00015E484816805B120790C9123F000E161F170F5A1707481700A2
003014C014010070010314061260A2170E00E04948130C5A171C92C7FC5FA26C495C4A14
F04A7E6C017F495A4A6C485A3AF801F7E00F3BFE0FF3F83F80267FFFE3B5FC02C191C7FC
6C01815B02005BD80FFCEB7FF0D803F0EB0FC031267FA434>33 D<121C127FEAFF80A5EA
7F00121C0909798817>58 D<121C127FEAFF80A213C0A3127F121C1200A412011380A212
0313005A1206120E5A5A5A12600A19798817>I<EF0380EF0FC0173FEFFF80933803FE00
EE0FF8EE3FE0EEFF80DB03FEC7FCED0FF8ED3FE0EDFF80DA03FEC8FCEC0FF8EC3FE0ECFF
80D903FEC9FCEB0FF8EB3FE0EBFF80D803FECAFCEA0FF8EA3FE0EA7F8000FECBFCA2EA7F
80EA3FE0EA0FF8EA03FEC66C7EEB3FE0EB0FF8EB03FE903800FF80EC3FE0EC0FF8EC03FE
913800FF80ED3FE0ED0FF8ED03FE923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FC0
170FEF0380323279AD41>I<150C151E153EA2153C157CA2157815F8A215F01401A215E0
1403A215C01407A21580140FA215005CA2141E143EA2143C147CA2147814F8A25C1301A2
5C1303A2495AA25C130FA291C7FC5BA2131E133EA2133C137CA2137813F8A25B1201A25B
1203A25B1207A25B120FA290C8FC5AA2121E123EA2123C127CA2127812F8A25A12601F53
7BBD2A>I<126012FCB4FCEA7FC0EA1FF0EA07FCEA01FF38007FC0EB1FF0EB07FCEB01FF
9038007FC0EC1FF0EC07FCEC01FF9138007FC0ED1FF0ED07FCED01FF9238007FC0EE1FF0
EE07FCEE01FF9338007F80EF1FC0A2EF7F80933801FF00EE07FCEE1FF0EE7FC04B48C7FC
ED07FCED1FF0ED7FC04A48C8FCEC07FCEC1FF0EC7FC04948C9FCEB07FCEB1FF0EB7FC048
48CAFCEA07FCEA3FF0EA7FC048CBFC12FC1270323279AD41>I<EC03FC91381FFF80027F
7F903901F807F0903903C001F890390780007C91C7127E010E804980011F1580D93FC013
0F17C01607A24A14E0A2011EC7FC90C8FCA5EC0FF0ECFFFC903803F00E903907C0078F90
381F8001D93E0013CF491300484814FF0003ED7FC05B485A120F48481580A2485AA2007F
160090C8FC167E16FE5A485D15015E1503485D15075E4B5AA2007E4A5A4BC7FC003E147E
003F5C6C6C485A390FC007F03907F01FC06CB5C8FCC613FCEB1FE02B3E7DBB2C>64
D<1760177017F01601A21603A21607160FA24C7EA216331673166316C3A2ED0183A2ED03
03150683150C160115181530A21560A215C014011580DA03007FA202061300140E140C5C
021FB5FC5CA20260C7FC5C83495A8349C8FC1306A25BA25B13385B01F01680487E000716
FFB56C013F13FF5EA2383C7DBB3E>I<0103B77E4916F018FC903B0007F80003FE4BEB00
FFF07F80020FED3FC0181F4B15E0A2141FA25DA2143F19C04B143F1980027F157F190092
C812FE4D5A4A4A5AEF0FF04AEC1FC005FFC7FC49B612FC5F02FCC7B4FCEF3FC00103ED0F
E0717E5C717E1307844A1401A2130F17035CA2131F4D5A5C4D5A133F4D5A4A4A5A4D5A01
7F4BC7FC4C5A91C7EA07FC49EC3FF0B812C094C8FC16F83B397DB83F>I<9339FF8001C0
030F13E0037F9038F80380913A01FF807E07913A07F8000F0FDA1FE0EB079FDA3F809038
03BF0002FFC76CB4FCD901FC80495A4948157E495A495A4948153E017F163C49C9FC5B12
01484816385B1207485A1830121F4993C7FCA2485AA3127F5BA312FF90CCFCA41703A25F
1706A26C160E170C171C5F6C7E5F001F5E6D4A5A6C6C4A5A16076C6C020EC8FC6C6C143C
6C6C5C6CB4495A90393FE00FC0010FB5C9FC010313FC9038007FC03A3D7CBA3B>I<0103
B7FC4916E018F8903B0007F80007FE4BEB00FFF03F80020FED1FC0180F4B15E0F007F002
1F1503A24B15F81801143F19FC5DA2147FA292C8FCA25C18035CA2130119F84A1507A213
0319F04A150FA2010717E0181F4A16C0A2010FEE3F80A24AED7F00187E011F16FE4D5A4A
5D4D5A013F4B5A4D5A4A4A5A057FC7FC017F15FEEE03FC91C7EA0FF049EC7FC0B8C8FC16
FC16C03E397DB845>I<0103B812F05BA290260007F8C7123F4B1407F003E0020F150118
005DA2141FA25D19C0143FA24B1330A2027F1470190092C7126017E05C16014A495A160F
49B6FCA25F9138FC000F01031407A24A6DC8FCA201075C18034A130660010F160693C7FC
4A150E180C011F161C18184A1538A2013F5E18F04A4A5AA2017F15074D5A91C8123F4991
3803FF80B9FCA295C7FC3C397DB83D>I<0103B812E05BA290260007F8C7123F4B140FF0
03C0140F18015DA2141FA25D1980143FA25D1760027F14E095C7FC92C75AA24A1301A24A
495A16070101141F91B6FC94C8FCA2903903FC001F824A130EA21307A24A130CA2010F14
1CA24A90C9FCA2131FA25CA2133FA25CA2137FA291CBFC497EB612C0A33B397DB835>I<
DCFF8013E0030F13F0037F9038FC01C0913A01FF803E03913A07FC000F07DA0FE0EB038F
DA3FC0903801DF804AC812FFEB01FED903F8157F4948ED3F00495A495A494881017F161E
49C9FC5B12014848161C5B1207485A1818121F4993C7FCA2485AA3127F5BA312FF90CCFC
93387FFFFE93B5FCA29338007FC0715A177F95C7FCA27E5F5F7F123F16016C7E5F6C6C14
036D14071207D803FCEC1EF86C6C143C26007F80EBF07890393FF007E0010FB5EA803001
0349C9FC9038003FE03B3D7DBA41>I<0103B5D8F803B512F8495DA290260007F8C73807
F8004B5DA2020F150F615DA2021F151F615DA2023F153F615DA2027F157F96C7FC92C8FC
A24A5D605CA249B7FC60A202FCC7120101031503605CA201071507605CA2010F150F605C
A2011F151F605CA2013F153F605CA2017F157F95C8FC91C8FC496C4A7EB690B6FCA34539
7DB845>I<0107B512FCA216F890390007F8005DA2140FA25DA2141FA25DA2143FA25DA2
147FA292C7FCA25CA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2
133FA25CA2137FA291C8FC497EB6FCA326397DB824>I<0103B500F8903807FFFC5BA290
260007F8C813804BEDFC0019F0020F4B5AF003804B4AC7FC180E021F1538604B5CEF0380
023F4AC8FC170E4B133C1770027F5C4C5ADB0007C9FC160E4A5B167E4A13FE4B7E01015B
92380E7F80ECFC1CED383F010301E07FECFDC04A486C7EECFF00D907FC6D7E5C4A130783
130F707E5C1601011F81A24A6D7EA2013F6F7EA24A143F84137F717E91C8123F496C81B6
0107B512C0A26146397DB847>75 D<0103B6FC5B5E90260007FCC8FC5D5D140FA25DA214
1FA25DA2143FA25DA2147FA292C9FCA25CA25CA21301A25CA21303A25CA2130718404A15
C0A2010F150118804A1403A2011F16005F4A1406170E013F151E171C4A143C177C017F5D
160391C7120F49EC7FF0B8FCA25F32397DB839>I<902603FFF893383FFF80496081D900
079438FF80000206DC01BFC7FCA2020E4C5A1A7E020C1606190CDA1C7E16FE4F5A021816
30A20238166162023016C1F00181DA703F158395380303F002601506A202E0ED0C076202
C01518183001016D6C140F06605B028015C0A20103923801801FDD03005B140092380FC0
0649173F4D91C8FC01065DA2010E4B5B4D137E130C6F6C5A011C17FEDCE1805B011802E3
C7FCA2013802E6130104EC5C1330ED03F8017016034C5C01F05CD807FC4C7EB500E0D9C0
07B512F01680150151397CB851>I<902603FFF891381FFFF8496D5CA2D9000703011300
6FEC007C02061678DA0EFF157081020C6D1460A2DA1C3F15E0705CEC181F82023815016F
6C5C1430150702706D1303030392C7FC02607FA2DAE0015C701306ECC0008201016E130E
EF800C5C163F0103EDC01C041F131891C713E0160F49EDF03818300106140717F8010E02
031370EFFC60130CEE01FE011C16E004005B011815FF177F1338600130153FA20170151F
95C8FC01F081EA07FCB512E01706A245397DB843>I<0103B7FC4916E018F8903B0007F8
0007FC4BEB00FE187F020FED3F80F01FC05DA2021F16E0A25DA2143FF03FC05DA2027FED
7F80A292C8130018FE4A4A5A604AEC07F04D5A0101ED3FC04CB4C7FC91B612FC17E0D903
FCCAFCA25CA21307A25CA2130FA25CA2131FA25CA2133FA25CA2137FA291CBFC497EB6FC
A33B397DB835>80 D<4BB4FC031F13F09238FE01FC913903F0007EDA07C0EB1F80DA1F80
EB0FC0023EC7EA07E002FCEC03F0495A4948EC01F8495A4948EC00FC495A013F16FE49C9
FC13FE187F485A12035B12075B120F4916FF121FA2485AA34848ED01FEA448C9EA03FCA3
EF07F8A218F0170F18E0171F18C0EF3F807EEF7F0017FEDA07C05B6C90391FF001F89039
80383803001F496C485A9139E00C0FE0260FC0C0EB1F80D807E1D90E3FC7FC0280137ED8
03F1EB07F8D801F95C3A007FC00FC0903A3FE07F0003903807FFFE0100018F5BDA000F13
06170E171E705A177CEEC1F816FF5FA25F5F6F5B6F48C7FCED00F8384B7CBA42>I<0103
B612F849EDFF8018E0903B0007F8001FF84BEB03FCEF00FE020F157FA24BEC3F80A2021F
16C0A25DA2143FF07F805DA2027FEDFF006092C7485A4D5A4A4A5A4D5A4AEC1F80057FC7
FC0101EC07F891B612E094C8FC9139FC000FC00103EC03F0707E4A6D7E831307177E5C17
7F010F5D5F5CA2011F1401A25CA2133F16034A4A1360A2017F17E019C091C71401496C01
011480B61503933900FE0700EF7E0ECAEA1FFCEF07F03B3B7DB83F>I<92391FE00380DB
FFFC130002036D5A91390FE01F8F91393F0007DF027EEB01FE02F81300495A4948147E17
7C4948143C495AA2011F153891C8FCA3491530A28094C7FC80806D7E14FEECFFE06D13FE
6DEBFFC06D14F06D806D80021F7F02037FEC003F03037F1500167F163F161FA3120C160F
A2001C151F94C7FCA3003C153EA25E003E5D127E007F4A5A6D495A6DEB0FC0D8F9F0495A
D8F0FE01FEC8FC39E03FFFF8010F13E0D8C00190C9FC313D7CBA33>I<0003B812FEA25A
903AF8003FC00101C0913880007E4848163C90C7007F141C121E001C92C7FCA2485CA200
305C007017180060130112E0485CA21403C716005DA21407A25DA2140FA25DA2141FA25D
A2143FA25DA2147FA292C9FCA25CA25CA21301A25CA21303A25CEB0FFC003FB6FC5AA237
397EB831>I<49B500F890387FFFF095B5FC1AE0D90003018090380FFC004BC713E00201
ED07804EC7FC6E6C140E606F5C705B606F6C485A4D5A031F91C8FCEEE0065F6F6C5A5F03
075B705A16F96FB45A94C9FC6F5AA36F7EA34B7FED037F9238063FC0150E4B6C7E1538ED
700F03E07F15C04A486C7EEC0300020613034A805C4A6D7E14704A1300494880495A49C8
6C7E130E011E153F017E4B7ED803FF4B7E007F01E0011FEBFFC0B5FC6144397EB845>88
D<147E903803FF8090390FC1C38090391F00EFC0017E137F49133F485A4848EB1F801207
5B000F143F48481400A2485A5D007F147E90C7FCA215FE485C5AA214015D48150CA21403
EDF01C16181407007C1538007E010F1330003E131F027B13706C01E113E03A0F83C0F9C0
3A03FF007F80D800FCEB1F0026267DA42C>97 D<133FEA1FFFA3C67E137EA313FE5BA312
015BA312035BA31207EBE0FCEBE3FF9038E707C0390FFE03E09038F801F001F013F8EBE0
00485A15FC5BA2123F90C7FCA214015A127EA2140312FE4814F8A2140715F05AEC0FE0A2
15C0EC1F80143F00781400007C137E5C383C01F86C485A380F07C06CB4C7FCEA01FC1E3B
7CB924>I<EC3FC0903801FFF0903807E03C90380F800E90383F0007017E131F49137F48
4813FF485A485A120F4913FE001F143848481300A2127F90C8FCA35A5AA45AA315031507
007E1406150E003E143C003F14706C14E0390F8007C03907C03F003801FFF838003FC020
267DA424>I<163FED1FFFA3ED007F167EA216FEA216FCA21501A216F8A21503A216F0A2
1507A2027E13E0903803FF8790380FC1CF90381F00EF017EEB7FC049133F485A4848131F
000715805B000F143F485A1600485A5D127F90C7127EA215FE5A485CA21401A248ECF80C
A21403161CEDF0181407007C1538007E010F1330003E131F027B13706C01E113E03A0F83
C0F9C03A03FF007F80D800FCEB1F00283B7DB92B>I<EC07E0EC1FF891387C1C38903901
F80EFC903803F007903807E003EB0FC090381F8001D93F0013F85B017E130313FE16F048
5A150712034914E0A2150F12074914C0A2151FA2491480A2153FA2160000035C6D5B0001
5B4A5A3900F8077E90387C1EFEEB1FF8903807E0FC90C7FC1401A25DA21403001E5C123F
387F80075D00FF495A49485A4849C7FC007C137E383C01F8381FFFE0000390C8FC26367F
A428>103 D<14E0EB03F8A21307A314F0EB01C090C7FCAB13F8EA03FEEA070F000E1380
121C121812381230EA701F1260133F00E0130012C05BEA007EA213FE5B1201A25B12035B
A20007131813E01438000F133013C01470EB806014E014C01381EB838038078700EA03FE
EA00F815397EB71D>105 D<D803E0137F3A07F801FFE03A0E3C0781F03A1C3E1E00F826
383F387F00305B4A137C00705B00605BA200E090C712FC485A137EA20000140101FE5C5B
A2150300015D5B15075E120349010F133016C0031F13700007ED80605B17E0EE00C0000F
15014915801603EE0700001FEC0F0E49EB07FC0007C7EA01F02C267EA432>110
D<90390F8003F090391FE00FFC903939F03C1F903A70F8700F80903AE0FDE007C09038C0
FF80030013E00001491303018015F05CEA038113015CA2D800031407A25CA20107140FA2
4A14E0A2010F141F17C05CEE3F80131FEE7F004A137E16FE013F5C6E485A4B5A6E485A90
397F700F80DA383FC7FC90387E1FFCEC07E001FEC9FCA25BA21201A25BA21203A25B1207
B512C0A32C3583A42A>112 D<02FC13C0903803FF0190380F838390383F01C790397E00
EF8049137F485A4848133F000715005B485A001F5C157E485AA2007F14FE90C75AA34813
01485CA31403485CA314075D140F127C141F007E495A003E137F381F01EF380F839F3903
FF1F80EA00FC1300143F92C7FCA35C147EA314FE5C130190387FFFF0A322357DA425>I<
13F8D803FE1438D8070F147C000E6D13FC121C1218003814011230D8701F5C12601503EA
E03F00C001005B5BD8007E1307A201FE5C5B150F1201495CA2151F120349EC80C0A2153F
1681EE0180A2ED7F0303FF130012014A5B3A00F8079F0E90397C0E0F1C90393FFC07F890
3907F001F02A267EA430>117 D<01F8EB03C0D803FEEB07E0D8070F130F000E018013F0
121C12180038140700301403D8701F130112601500D8E03F14E000C090C7FC5BEA007E16
C013FE5B1501000115805B150316001203495B1506150E150C151C151815385D00015C6D
485A6C6C485AD97E0FC7FCEB1FFEEB07F024267EA428>I<01F816F0D803FE9138E001F8
D8070F903801F003000ED9800314FC121C12180038020713010030EDE000D8701F167C12
60030F143CD8E03F163800C001005B5BD8007E131F183001FE5C5B033F14700001176049
91C7FCA218E000034A14C049137E17011880170318005F03FE1306170E000101015C01F8
01BF5B3B00FC039F8070903A7E0F0FC0E0903A1FFC03FFC0902703F0007FC7FC36267EA4
3B>I<903907E001F090391FF807FC9039783E0E0F9039E01F1C1FD801C09038383F803A
03800FF07F0100EBE0FF5A000E4A1300000C157E021F133C001C4AC7FC1218A2C7123FA2
92C8FCA25CA2147EA214FEA24A130CA20101141C001E1518003F5BD87F81143801835C00
FF1560010714E03AFE0E7C01C0D87C1C495A2778383E0FC7FC391FF00FFC3907C003F029
267EA42F>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmsy10 10 17
/Fm 17 121 df<007FB81280B912C0A26C17803204799641>0 D<121C127FEAFF80A5EA
7F00121C0909799917>I<0060150600F8150F6C151F007E153F6C157E6C6C14FC6C6CEB
01F86C6CEB03F06C6CEB07E06C6CEB0FC06C6CEB1F80017EEB3F006D137E6D6C5A90380F
C1F8903807E3F0903803F7E06DB45A6D5B6EC7FCA24A7E497F903803F7E0903807E3F090
380FC1F890381F80FC90383F007E017E7F49EB1F804848EB0FC04848EB07E04848EB03F0
4848EB01F84848EB00FC48C8127E007E153F48151F48150F00601506282874A841>I<02
0FB6128091B712C01303010F1680D91FF8C9FCEB7F8001FECAFCEA01F8485A485A485A5B
48CBFCA2123EA25AA2127812F8A25AA87EA21278127CA27EA27EA26C7E7F6C7E6C7E6C7E
EA00FEEB7F80EB1FF86DB71280010316C01300020F158091CAFCAE001FB812804817C0A2
6C1780324479B441>18 D<EF0180EF07C0171FEF7F80933801FF00EE07FCEE1FF0EE7FC0
4B48C7FCED07FCED1FF0ED7FC04A48C8FCEC07FCEC1FF0EC7FC04948C9FCEB07FCEB1FF0
EB7FC04848CAFCEA07FCEA3FF0EA7FC048CBFC5AEA7F80EA3FE0EA0FF8EA03FEC66C7EEB
3FE0EB0FF8EB03FE903800FF80EC3FE0EC0FF8EC03FE913800FF80ED3FE0ED0FF8ED03FE
923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FC0170FEF038094C7FCAE007FB81280
B912C0A26C1780324479B441>20 D<126012F812FEEA7F80EA3FE0EA0FF8EA03FEC66C7E
EB3FE0EB0FF8EB03FE903800FF80EC3FE0EC0FF8EC03FE913800FF80ED3FE0ED0FF8ED03
FE923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FC0171FEF7F80933801FF00EE07FC
EE1FF0EE7FC04B48C7FCED07FCED1FF0ED7FC04A48C8FCEC07FCEC1FF0EC7FC04948C9FC
EB07FCEB1FF0EB7FC04848CAFCEA07FCEA1FF0EA7FC048CBFC12FC1270CCFCAE007FB812
80B912C0A26C1780324479B441>I<EE0180EE03C01607A2EE0F80A2EE1F00A2163EA25E
A25EA24B5AA24B5AA24B5A150F5E4BC7FCA2153EA25DA25DA24A5AA24A5AA24A5AA24A5A
A24AC8FCA2143EA25CA25CA2495AA2495AA2495AA2495AA249C9FCA2133EA25B13FC5B48
5AA2485AA2485AA2485AA248CAFCA2123EA25AA25AA25A12602A4E75BB00>54
D<156015F0A21401EB07F190383FFFE0EB7C1FEBF00748486C5AD803C07F4848487ED80F
007FA248497E001E14BC153C003E143E141FA248EB1E1F143EA2143CA2147C00FC158014
7814F8A214F0A21301A214E01303A214C0A21307A21480A2130FA214005B007C1500131E
A2D87E3E5BA2D83E3C133E137CA21378001F5C13F8000F14784913F800075C0003495AEB
E0033901F007802603FC1FC7FCEBFFFEEBC7F0D807C0C8FCA25BA26CC9FC21477CBF2A>
59 D<0203B512F0027F14FF49B712E0010F16F890273FC3F00713FED978039038007FFF
2601E007020F1380D803C0030313C0D80780030013E0000F177FD81F00EE3FF048EF1FF8
003E4A140F5A0078EF07FC00C0010F1503C7FCA24B1401A3141F5DA3023F16F8A292C8FC
F003F0A25C027EED07E0A219C04A150F1980F01F00495A183E6049481578604D5A49484A
5A4D5A050EC7FC4948143C5FEE01E04948EB07C0043FC8FC91380001FC49EB3FF049B512
8048B500FCC9FC4814E04801FCCAFC3E397FB840>68 D<0307B612FE033FEDFF804AB812
C0140791260F807EC7FC91263C00FEEC3F004A161E4A491418010194C7FC495A01071301
A2D90FC05B148014000118130390C75BA34B5AA3150F5EA34B5AA293B512FC4B5C604B14
C0037ECAFCA25DA25D1401A24A5AA25D14075D140F5D141F92CBFC5C0006133E003E137E
007E137CB413FC6D5AEBC1F0EBF1E06CB45A6C90CCFC6C5AEA07F0423C7EB83C>70
D<0060161800F0163CB3B26C167CA2007C16F8A26CED01F0003F15036C6CEC07E06C6CEC
0FC0D807F0EC3F80D803FE903801FF003A00FFC00FFC6DB55A011F14E0010391C7FC9038
007FF82E347CB137>91 D<EC7FF80103B5FC011F14E0017F14F89039FFC00FFC3A03FE00
01FFD807F09038003F80D80FC0EC0FC04848EC07E048C8EA03F0003E150148ED00F8A248
167CA248163CB3B2006016182E347CB137>I<EC01F8140FEC3F80ECFC00495A495A495A
A2130F5CB3A7131F5C133F49C7FC13FEEA03F8EA7FE048C8FCEA7FE0EA03F8EA00FE137F
6D7E131F80130FB3A7801307A26D7E6D7E6D7EEC3F80EC0FF814011D537ABD2A>102
D<12FCEAFFC0EA07F0EA01FCEA007E7F80131F80130FB3A7801307806D7E6D7EEB007EEC
1FF0EC07F8EC1FF0EC7E00495A495A495A5C130F5CB3A7131F5C133F91C7FC137E485AEA
07F0EAFFC000FCC8FC1D537ABD2A>I<126012F0B3B3B3B3A91260045377BD17>106
D<126012F07EA21278127CA2123C123EA2121E121FA27E7FA212077FA212037FA212017F
A212007FA21378137CA2133C133EA2131E131FA27F80A2130780A26D7EA2130180A21300
80A21478147CA2143C143EA2141E141FA2801580A2140715C0A2140315E0A2140115F0A2
140015F8A21578157CA2153C153EA2151E150C1F537BBD2A>110
D<137E3801FFC03807C1E0380F0070001E1338003E131C48130C141E147E5AA3143C1400
A3127CA37E121E7E6C7E6C7EEA00F013FCEA03FF380F8780381F01E0003E13F0EB00F848
137CA200FC133E5A141FA6127C143F6C133EA26C137CEA0F80000713F83801E1F03800FF
C0EB3F00130FEB03C0EB01E0EB00F01478147C143EA3141FA3123C127EA3143E12781230
0038137C6C13786C13F0380783E03803FF8038007E00184C7ABA25>120
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn cmr8 8 67
/Fn 67 124 df<9138FF807E01079038E1FF80903A1F807FC3C0D93E00EB87E049EBFF07
4913FE485A00039138FC018049017CC7FCAAB712FCA22703E0007CC7FCB3A6486C13FE3A
7FFF0FFFF0A22B2F7FAE29>11 D<14FF010713E090381F80F090383E003849137C4913FC
485A1203491378153092C7FCA7157CB612FCA23803E000157CB3A5486C13FE3A7FFF0FFF
E0A2232F7FAE27>I<13031307130E131C1338137013F0EA01E013C01203EA0780A2EA0F
00A2121EA35AA45AA512F8A25AAB7EA21278A57EA47EA37EA2EA0780A2EA03C0120113E0
EA00F013701338131C130E1307130310437AB11B>40 D<12C07E12707E7E7E120FEA0780
120313C0EA01E0A2EA00F0A21378A3133CA4131EA5131FA2130FAB131FA2131EA5133CA4
1378A313F0A2EA01E0A2EA03C013801207EA0F00120E5A5A5A5A5A10437CB11B>I<123C
127EB4FCA21380A2127F123D1201A312031300A25A1206120E5A5A5A126009157A8714>
44 D<B512C0A412047F9018>I<123C127E12FFA4127E123C08087A8714>I<15C0140114
031580A214071500A25C140EA2141E141CA2143C143814781470A214F05CA213015CA213
035C130791C7FCA25B130EA2131E131CA2133C1338A21378137013F05BA212015BA21203
5BA2120790C8FC5A120EA2121E121CA2123C1238A212781270A212F05AA21A437CB123>
I<EB3FC0EBFFF03803E07C48487E48487E497E001EEB0780A2003E14C0A248EB03E0A500
FC14F0B0007C14E0A3007E1307003E14C0A36CEB0F806C14006D5A3807C03E3803F0FC38
00FFF0EB3FC01C2D7DAB23>I<130C133C137CEA03FC12FFEAFC7C1200B3B113FE387FFF
FEA2172C7AAB23>I<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A0060EB
07E012F000FC14F07E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F00147E147C
5C495A495A495A495A011EC7FC5B5B4913305B485A4848136048C7FC000E14E0001FB5FC
5A4814C0B6FCA21C2C7DAB23>I<EB3FC03801FFF03807C0FC380E007E487FEC1F80003F
14C0A2EB800F1300A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00FC
143FEC1F8015C0140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C00070131F
6C1480001EEB3F00380780FC3801FFF038007FC01C2D7DAB23>I<140EA2141E143EA214
7E14FEA2EB01BE1303143E1306130E130C131813381330136013E013C0EA018012031300
1206120E120C5A123812305A12E0B612FCA2C7EA3E00A9147F90381FFFFCA21E2D7EAC23
>I<000CEB0180380FC01F90B512005C5C14F014C0D80C7EC7FC90C8FCA8EB1FC0EB7FF8
380DE07C380F801F01001380000E130F000CEB07C0C713E0A2140315F0A4127812FCA448
EB07E012E0006014C00070130F6C14806CEB1F006C133E380780F83801FFE038007F801C
2D7DAB23>I<EB03F8EB0FFE90383E0780EBF8013901F007C03803E00FEA07C0EA0F80A2
391F00078091C7FC123EA2127EA2127CEB0FC038FC3FF0EBF07C38FDC01EB4487E010013
80EC07C04814E0A214034814F0A4127CA3127EA2003E14E01407121E001F14C06CEB0F80
3907801F003803C03E6C6C5A38007FF0EB1FC01C2D7DAB23>I<1230123C003FB512F8A2
15F05A15E039700001C000601480140348EB0700140E140CC7121C5C143014705C495AA2
495AA249C7FCA25B130E131EA2133EA3133C137CA413FCA913781D2E7CAC23>I<EB1FC0
EBFFF03803E07C3807801E48487E001EEB0780A248EB03C0A4123E1407003F1480381FC0
0F01E01300EBF81E6C6C5A3807FFF86C13E0C6FCEB3FF8EBFFFC3803C7FFD807831380D8
1F0013C0001E133F48EB1FE0007C13070078EB03F012F84813011400A46C14E000781301
007C14C0003C13036CEB0780390F800F003807E03C3801FFF038003FC01C2D7DAB23>I<
EB3F80EBFFF03803E0783807C03E48487E48487E003E14801407007E14C0127C00FC14E0
1403A315F0A5007C1307127EA2003E130F7E6C131F3807803B3803E0F33800FFC390383F
03E013001407A215C0A2140F001E1480003F14005C143E143C003E5B001C5B380E03E038
07FF80D801FEC7FC1C2D7DAB23>I<123C127E12FFA4127E123C1200AD123C127E12FFA4
127E123C081D7A9C14>I<4A7E4A7EA34A7EA24A7EA3EC1BF81419A2EC30FCA2EC70FEEC
607EA24A7EA349486C7EA2010380EC000FA201066D7EA3496D7EA2011FB57EA290381800
01496D7EA349147EA201E0147F4980A20001ED1F801203000716C0D80FF0EC3FE0D8FFFC
0103B5FCA2302F7EAE35>65 D<B612FCEDFF803A03F8000FC00001EC03F06F7E6F7E8216
7E167FA6167E16FE5E4B5A4B5AED0FE0ED7F8090B6C7FC16E09039F80003F0ED01FC6F7E
167F821780161F17C0A61780163F17005E16FEED03FC0003EC0FF0B712C04BC7FC2A2D7D
AC32>I<DA1FF013C09138FFFE01903903F00F8390390F8001E3013FC71277017C143F48
48141F4848140F48481407A248481403121F491401123F90C8FC481500A300FE1600AB12
7F17C0A27E7F001F15016D1580120F6C6C1403EE07006C6C14066C6C140ED8007C5C013F
147890390F8001E0903903F00FC0902600FFFEC7FCEC1FF02A2F7CAD33>I<B612F815FF
3A03F8001FE00001EC03F0ED00F8167E82EE1F80160F17C0EE07E0A2EE03F0A217F81601
A317FCAA17F8A3EE03F0A217E0160717C0160FEE1F80EE3F00167E5EED03F00003EC1FE0
B7128003F8C7FC2E2D7DAC36>I<B712FEA23903F800010001EC003E828282A282A31780
16011518A293C7FCA31538157815F890B5FCA2EBF800157815381518A21760A392C712C0
A4160117801603A21607160F163F0003913801FF00B8FCA22B2D7EAC30>I<DA1FF013C0
9138FFFE01903903F00F8390390F8001E3013FC71277017C143F4848141F4848140F4848
1407A248481403121F491401123F90C8FC481500A300FE1600A992381FFFFEA2007F9138
001FE0EE0FC0A27E7F121F7F120F6C7EA26C7E6C6C141FEA007C013F143FD90F8013F390
3903F007C10100B51200DA1FF813002F2F7CAD37>71 D<B539F03FFFFCA2D803FCC71300
6C48147EB290B612FEA201F8C7127EB3486C14FFB5D8F03F13FCA22E2D7DAC35>I<B512
F0A23803FC006C5AB3B3A3487EB512F0A2142D7EAC19>I<90387FFFF0A201001300147E
B3AD123812FEA314FE5C1278387001F86C485A381E07E03807FF80D801FCC7FC1C2E7DAC
24>I<B500F0EB7FFEA2D803FCC7EA1FF06C48EC0FC01700161E16385E5E4B5A4B5A4BC7
FC150E5D5D15F0EC01C04A5A4A7E4A7E141F4A7EEC73F8ECE1FCEBF9C09038FF80FE9038
FE007F497F49806F7E6F7E1507826F7E6F7EA26F7E167F821780EE1FC017E0486CEC3FF0
B5D8F001B5FCA2302D7DAC37>I<B512F8A2D803FCC8FC6C5AB3A7160CA41618A41638A2
167816F81501ED07F00003141FB7FCA2262D7EAC2C>I<D8FFF8923807FFC06D5D0003EF
F00000015F01BE151BA2019F1533A3D98F801463A2D987C014C3A2D983E0EB0183A3D981
F0EB0303A2D980F81306A3027C130CA26E1318A36E1330A291380F8060A2913807C0C0A3
913803E180A2913801F300A3EC00FEA2157C487ED80FF04B7EB5D93801B512C0A23A2D7D
AC41>I<D8FFF8903803FFFC7F00019138003FC06DEC0F006D1406EBBF80A2EB9FC0EB8F
E0138780EB83F8138180EB80FE147E147FEC3F80EC1FC0140F15E0EC07F0140315F8EC01
FC140015FE157FED3F86151F16C6ED0FE6150716F6ED03FE1501A21500167E163EA2486C
141ED80FF0140EB5FC16062E2D7DAC35>I<EC3FF0903801FFFE903907E01F8090391F80
07E090393E0001F001FCEB00FC4848147E4848804848EC1F8049140F000F16C04848EC07
E0A248C8EA03F0A24816F8A2007E1501A200FE16FCAA007FED03F8A36C16F06D1407001F
16E0A26C6CEC0FC06D141F000716806C6CEC3F006C6C147E6C6C5C017E495A90391F8007
E0903907E01F80902601FFFEC7FC9038003FF02E2F7CAD37>I<B612FCEDFF803A03F800
0FE00001EC03F0ED00F882167E167F821780A617005E167E5E5EED03F0ED0FE090B61280
03FCC7FC01F8C9FCB2487EB512F0A2292D7EAC30>I<B612C015FC3903F8007F0001EC0F
C06F7E6F7E6F7E82150082A55E15015E4B5A4B5A4B5A037FC7FC90B512FC15F09038F800
FC153E6F7E150F826F7EA582A5170316F815031707486C903801FC0EB539F000FE1CEE3F
F8C9EA07E0302E7DAC34>82 D<90383F80303901FFF0703807C07C390F000EF0001E1307
4813034813011400127000F01470A315307EA26C1400127E127FEA3FE013FE381FFFE06C
13FC6C13FF00011480D8003F13E013039038003FF0EC07F81401140015FC157C12C0153C
A37EA215787E6C14706C14F06CEB01E039F78003C039E3F00F0038E07FFE38C00FF01E2F
7CAD27>I<007FB712F8A29039000FC003007C150000701638A200601618A200E0161CA2
48160CA5C71500B3A94A7E011FB512E0A22E2D7EAC33>I<B539F003FFFCA2D803FCC7EA
3FC06C48EC0F001606B3AB160E0000150C7F161C017C1418017E14386D5C6D146090390F
8001E0903907E00380902601F80FC7FC9038007FFCEC0FF02E2E7DAC35>I<B53C801FFF
F001FFF8A22707FC000190C7EA3FC0D803F06D48EC1F00047E140EA26C6C027F140CA26D
171C0000DBDF801318A26D1738017E9026018FC01330A2017F17706D90260307E01360A2
028016E0011F90260603F05BA202C01501010F90260C01F85BA202E01503010790261800
FC90C7FCA202F05D010349EB7E06A202F8150E010149EB3F0CA202FC151C010049EB1F98
A202FE15B8DA7F80EB0FF0A2023F5D92C71207A26E5D021E1403A2020E5D020C1401452E
7FAC48>87 D<3B7FFFE003FFF8A2000390C713806C48EC7E000000157C017F14786D1470
6E5B6D6C5B6D6C485A15036D6C48C7FC903803F80601015BECFC1C6D6C5AEC7F305DEC3F
E06E5A140F816E7E81140DEC1DFCEC38FEEC307F14609138E03F8049486C7EEC800FD903
007F496D7E010E6D7E130C011C6D7E496D7E49147E167F01F0EC3F80000316C0D80FF8EC
7FE0D8FFFE0103B5FCA2302D7EAC35>I<003FB612C0A29038F0001F0180EB3F80003EC7
EA7F00123C003814FE4A5A5A4A5A4A5A12604A5A4A5AA2C7485A4AC7FCA214FE495AA249
5A5C1307495AA2495A495A166049C7FC13FEA2485A484814E0A2485A484814C01501485A
48481303150748C7121F00FE14FFB7FCA2232D7CAC2B>90 D<EAFFE0A3EAE000B3B3B3A7
EAFFE0A30B4379B114>I<EAFFE0A31200B3B3B3A712FFA30B437FB114>93
D<13FF000713C0380F01F0381C00F8003F137C80A2143F001E7FC7FCA4EB07FF137F3801
FE1FEA07F0EA1FC0EA3F80EA7F00127E00FE14065AA3143F7E007E137F007FEBEF8C391F
83C7FC390FFF03F83901FC01E01F207D9E23>97 D<EA07C012FFA2120F1207AC14FE9038
C7FF809038CF03E09038DC01F09038F8007C49137E49133E497F1680A2150F16C0A9ED1F
80A216005D6D133E6D5B01B05B9038BC01F090380E07E0390607FF80260001FCC7FC222F
7EAD27>I<EB1FE0EB7FFC3801F01E3803E0073907C01F80EA0F80EA1F005A003EEB0F00
007E90C7FCA2127C12FCA9127EA215C07E6C130101801380380FC0033907E007003801F0
3E38007FF8EB1FC01A207E9E1F>I<15F8141FA214011400ACEB0FE0EB7FF83801F81E38
03E0073807C003380F8001EA1F00481300123E127EA25AA9127C127EA2003E13017EEB80
03000F13073903E00EFC3A01F03CFFC038007FF090391FC0F800222F7EAD27>I<EB1F80
EBFFF03803E0783807C03E380F801E381F001FEC0F80123E007E130715C0127C12FCA3B6
FCA200FCC8FCA5127EA2003E14C0123F6C1301390F80038001C013003803E00F3801F03C
38007FF8EB1FC01A207E9E1F>I<EB03F0EB0FFCEB3E1EEB7C3F13F8EA01F0A23803E00C
1400AAB512E0A23803E000B3A6487E387FFF80A2182F7FAE16>I<013F13F89038FFC3FE
3903E1FF1E3807807C000F140C391F003E00A2003E7FA76C133EA26C6C5A00071378380F
E1F0380CFFC0D81C3FC7FC90C8FCA3121E121F380FFFF814FF6C14C04814F0391E0007F8
48130048147C12F848143CA46C147C007C14F86CEB01F06CEB03E03907E01F803901FFFE
0038003FF01F2D7E9D23>I<EA07C012FFA2120F1207AC14FE9038C3FF809038C703E090
38DE01F013F8496C7EA25BA25BB2486C487E3AFFFE1FFFC0A2222E7EAD27>I<EA0780EA
0FC0EA1FE0A4EA0FC0EA0780C7FCA8EA07C012FFA2120F1207B3A5EA0FE0EAFFFCA20E2E
7EAD14>I<EA07C012FFA2120F1207ADEC1FFEA2EC0FF0EC07C05D020EC7FC5C5C5C5CEB
C3C013C7EBCFE0EBDFF013F9EBF0F8497EEBC07E143E80816E7E14076E7E816E7E486C48
7E3AFFFE07FF80A2212E7EAD25>107 D<EA07C012FFA2120F1207B3B3A3EA0FE0EAFFFE
A20F2E7EAD14>I<2607C07FEB07F03BFFC3FFC03FFC903AC783F0783F3C0FCE01F8E01F
803B07DC00F9C00F01F8D9FF8013C04990387F000749137EA249137CB2486C01FEEB0FE0
3CFFFE0FFFE0FFFEA2371E7E9D3C>I<3807C0FE39FFC3FF809038C703E0390FDE01F0EA
07F8496C7EA25BA25BB2486C487E3AFFFE1FFFC0A2221E7E9D27>I<EB1FE0EB7FF83801
F03E3803C00F3907800780390F0003C04814E0003EEB01F0A248EB00F8A300FC14FCA900
7C14F8A26CEB01F0A26CEB03E0A2390F8007C03907C00F803901F03E0038007FF8EB1FE0
1E207E9E23>I<3807C0FE39FFC7FF809038CF03E0390FDC01F03907F800FC49137E4913
3E49133FED1F80A3ED0FC0A8151F1680A2ED3F00A26D137E6D137C5D9038FC01F09038CE
07E09038C7FF80D9C1FCC7FC01C0C8FCA9487EEAFFFEA2222B7E9D27>I<90380FE01890
387FF8383801F81C3903E00E783807C007390F8003F8001F1301EA3F00A2007E1300A212
FE5AA8127EA36C13017EEB8003380FC0073803E00E3801F03C38007FF0EB1FC090C7FCA9
4A7E91381FFFC0A2222B7E9D25>I<380781F838FF87FEEB8E3FEA0F9CEA07B813B0EBF0
1EEBE000A45BB0487EB5FCA2181E7E9D1C>I<3801FE183807FFB8381E01F8EA3C004813
78481338A21418A27E7EB41300EA7FF06CB4FC6C13C06C13F0000113F838001FFC130138
C0007E143EA26C131EA27EA26C133CA26C137838FF01F038E3FFC000C0130017207E9E1C
>I<1360A413E0A312011203A21207121FB512F0A23803E000AF1418A714383801F03014
703800F860EB3FE0EB0F80152A7FA81B>I<D807C013F800FF131FA2000F130100071300
B21401A314033803E007EC0EFC3A01F81CFFC038007FF890391FE0F800221F7E9D27>I<
3AFFFC01FFC0A23A0FE0007E000007147C15380003143015706C6C1360A26C6C5BA39038
7C0180A26D48C7FCA2EB3F07EB1F06A2EB0F8CA214DCEB07D8A2EB03F0A36D5AA26D5A22
1E7F9C25>I<3BFFFC3FFE07FFA23B0FE003F001F801C09038E000F00007010114E08126
03E00314C0A2913807F8012701F006781380A29039F80E7C030000D90C3C1300A290397C
181E06A2151F6D486C5AA2168C90391F600798A216D890390FC003F0A36D486C5AA36DC7
5A301E7F9C33>I<3AFFFC01FFC0A23A0FE0007E000007147C1538000314306D13700001
1460A26C6C5BA2EBFC01017C5BEB7E03013E90C7FCA2EB1F06A2148EEB0F8CA2EB07D8A2
EB03F0A36D5AA26D5AA2495AA2130391C8FC1278EAFC06A25B131CEA7838EA7070EA3FE0
EA0F80222B7F9C25>121 D<B712C0A22202809223>123 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fo cmcsc8 8 33
/Fo 33 117 df<123C127EB4FCA21380A2127F123D1201A312031300A25A1206120E5A5A
5A12600915798716>44 D<B512E0A413047E901A>I<123C127E12FFA4127E123C080879
8716>I<EB0FE0EB7FFC3801F83F3903C0078039078003C0390F0001E04814F0001E1300
003E14F8A348147CA400FC147EAF007C147CA3007E14FCA2003E14F8A2001E14F0001F13
01390F8003E0000714C03903E00F803901F83F0038007FFCEB0FE01F2D7CAB27>48
D<130E131E137EEA01FEEAFFBEEAFE3E1200B3B1137F007FB5FCA2182C78AB27>I<EB3F
C03801FFF83807C07E390E003F8048EB0FC04814E0481307006014F000F0130300FC14F8
7E1401A3007C1303C7FCA215F0140715E0140F15C0EC1F80EC3F00147E147C5C495AEB03
C0495A49C7FC131E5B4913185BEA01C04848133048C7FC000E1470001FB512F05A4814E0
B6FCA21D2C7BAB27>I<EB1FF03801FFFE3907E03F80390E000FC048EB07E0EC03F0003F
14F8A2EB800113001403120CC7FC15F0140715E0EC0FC0EC1F80EC3F0014FCEB7FF014FE
9038003F80EC0FC0EC07E0EC03F0EC01F815FCA2EC00FEA21238127C12FEA3EC01FC12F8
006014F80070EB03F06CEB07E0001EEB0FC03907C03F803901FFFE0038003FF01F2D7CAB
27>I<000C14C0380FC00F90B5128015005C14F814E0D80C7FC7FC90C8FCA8EB1FE0EB7F
F8380DE03E380F801F390E000F80000CEB07C0EC03E0C7FC15F0140115F8A4127812FCA3
15F048130312E0006014E00070EB07C06C130F6CEB1F806CEB3E00380780FC3801FFF038
007F801D2D7BAB27>53 D<14FF010713C090381F00E0017C13704913F83801E0011203EA
07C0EA0F80001FEB00F090C8FC5A123EA2127EA2387C07F038FC1FFEEB781F9038E007C0
39FDC003E039FF8001F0010013F814004814FC157C157E5AA3127CA3127E123E157C15FC
6C14F86C1301018013F03907C003E03903E007C03900F81F00EB7FFCEB0FF01F2D7CAB27
>I<EB0FF0EB7FFE3901F01F8039078007C0390F0003E0000EEB01F0001E13004814F815
78A3123E003F14F86D13F0381FE0019038F003E0390FFC07C03907FF0F806CEBBE006C13
F8EA007FEB1FFEEB7FFFD801E313C0D807C013E0390F003FF0001EEB0FF848EB07FC007C
13010078EB00FE00F8147E48143EA2151EA36C141C0078143C007C14386C14786C14F039
0F8003C03903F00F803900FFFE00EB1FF01F2D7CAB27>56 D<EC01C0A24A7EA34A7EA24A
7E140DA2EC18FCA24A7E157EA24A7EA202C07F151F010180EC800FA249486C7EA2498001
061303A2496D7EA2011C80011FB5FCA20130C7127EA20170147F016080A2496E7EA20001
8249140F1203707E486C4A7ED81FE04A7ED8FFF891B51280A2312F7CAE39>65
D<B612FEEDFFE03A03F80007F80001EC00FC163F707EEE07C0707E83707E160083177EA3
83A31880AA1800A25F177EA25FA24C5A5F4C5A4C5A4C5A043FC7FC16FE0003EC07F8B712
E04BC8FC312D7CAC3A>68 D<B81280A2D803F8C7127F0001150FEE07C016031601A21600
A317E01760150CA21700A3151C153C157C90B512FCA29038F8007C153C151C150CA21718
A392C71230A41770176017E0A216011603160F0003ED7FC0B8FCA22D2D7CAC34>I<B512
F8A2D803FCC8FC6C5AB3A71603A41606A3160EA2161EA2163E167EED01FC0003140FB7FC
A2282D7CAC30>76 D<D8FFF8923803FFE06D5D0003EFF80000015F01BE150DA2019F1519
A2D98F801431A3D987C01461A2D983E014C1A2D981F0EB0181A3D980F8EB0301A2027C13
06A2027E130C143EA26E1318A291380F8030A3913807C060A2913803E0C0A2913801F180
A3913800FB00A2157EA2486C133CD80FF04B7EB592B512E015183B2D7BAC45>I<D8FFF8
91387FFF807FD801FE913807F800EE01E06D6E5AEBBF80EB9FC0EB8FE0A2EB87F0EB83F8
EB81FCA2EB80FE147F6E7E141F816E7E6E7E6E7EA26E7E6E7E157FA2ED3F80ED1FC0ED0F
E0A2ED07F0ED03F8ED01FC150016FE167F163F161FA2160F1607486C1403EA0FF0B51401
1600312D7CAC39>I<EC1FFC91B57E903903F007E090390FC001F8013FC7127E017C141F
496E7E48486E7E48486E7E00078248486E7E491400001F82003F8290C9127EA248167F00
7E82A200FE1780A9007E1700007F5EA36C167E6D15FE001F5E6D1401000F5E6C6C4A5A6C
6C4A5AA2C66CEC0F80017E023FC7FC6D147E90390FC001F8903907F80FF00100B51280DA
1FFCC8FC312F7BAD3B>I<14E0A2497EA3497EA3EB067CA2EB0E3E130CA2497EA201387F
EB300FA2496C7EA3496C7E90B5FC4880EB8001A248C77EA248800006147C120E001F147E
48147F3AFFC003FFE0A223237DA22A>97 D<B512FCECFF80391F8007C0000FEB03F0EC01
F8140015FCA515F81401EC03F0EC0FE090B5128015009038800FE0EC03F0EC01F8EC00FC
157C157EA5157C15FCEC01F81403001FEB07E0B612C0ECFE001F227CA128>I<903803FC
0390381FFF0790387E03CF9038F800EFD803E0137F4848133F4848131F001F140F90C7FC
481407123E127E15035AA21500A71503127EA2123E003F14076C14066D130E000F140C6C
6C131C6C6C1338D800F813F090387E03C090381FFF80903803FC0020247CA229>I<B512
FCECFF80391F800FC0000FEB03F0EC00F8157C81A281A2ED0F80A316C0A81680A3ED1F00
A2151E153E5D5D4A5A001FEB0FE0B6128002FCC7FC22227CA12B>I<B612F0A2381F8003
000F13001570153015381518A314181500A214381478EBFFF8A2EB807814381418A3EC00
06A3150CA3151C153C157C001FEB01F8B6FCA21F227CA126>I<B612F0A2381F8003000F
13001570153015381518A4EC1800A314381478EBFFF8A2EB807814381418A391C7FCA848
7EEAFFFEA21D227CA125>I<3AFFF80FFF80A23A1FC001FC006C486C5AAC90B5FCA2EB80
00AE486C487E3AFFF80FFF80A221227CA12A>104 D<EAFFF8A2EA1FC0EA0F80B3AAEA1F
C0EAFFF8A20D227CA115>I<EAFFFCA2EA1FC06C5AB31560A415E0A2EC01C0A21407001F
131FB6FCA21B227CA123>108 D<B46CEB01FF6D5B001F15F8000F15F0D80DE01306A3D8
0CF0130CA201781318A36D1330A26D1360A36D13C0A39038078180A2903803C300A3EB01
E6A2EB00FCA3001E1378003FEC01F8D8FFC0EB0FFF143028227BA133>I<3AFF8001FF80
13C0000F9038007E006D133C6D1318120DEA0CF87F137E133E133FEB1F80130FEB07C014
E0EB03F0130114F8EB00FC147C143E143FEC1F98140FEC07D815F814031401A21400001E
1478003F1438EAFFC0151821227CA12A>I<EB07FCEB1FFF90387C07C03901F001F04848
6C7E4848137C48487F48C77EA2003EEC0F80A2007E15C0007C1407A200FC15E0A8007C15
C0007E140FA2003E1580003F141F6C15006D5B000F143E6C6C5B6C6C5B6C6C485A39007C
07C090383FFF80D907FCC7FC23247CA22C>I<B512F814FF391F801F80000FEB07C0EC03
E0EC01F0A215F8A515F0A2EC03E0EC07C0EC1F8090B5120014F80180C7FCAC487EEAFFF8
A21D227CA126>I<B512F014FE391F801F80000FEB07C06E7E81140181A45D14035D4A5A
EC1F80D9FFFEC7FC14F8EB803E806E7E6E7EA481A3166015F0A2261FC00313E03AFFF801
F9C0913800FF80C8EA3F0023237CA129>114 D<3801FC0C3807FF1C381E03FCEA380048
137C143C48131CA2140CA27E14007E127CEA7FC0EA3FFC381FFF80000713E0000113F038
003FF8EB01FCEB007C143E141EA200C0130EA46C131C7E143800FC1378B413F038E3FFC0
00C0130017247CA220>I<007FB61280A2397C01F00F0070140300601401A200E015C000
C01400A400001500B3A2497E90387FFFC0A222227DA129>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fp cmr10 10 78
/Fp 78 123 df<1506150FA24B7EA24B7EA24B7EA2EDDFF0A29138018FF8A291380307FC
A291380603FEA291380E01FF140CDA1C007F141802386D7E143002706D7E146002E06D7E
5C01016E7E5C01036E7E91C7FC496E7E1306010E6E7E130C011C6E7F131801386F7E1330
01706F7E136001E06F7E5B170F484882170748C97F17030006831701488383481880001F
B9FC4818C0A24818E0A2BA12F0A23C3C7CBB45>1 D<B812FEA3D87FE0C7121F16016C6C
EC007F6C6C151FA26C6C816C6C81A26C6C816C7F7E6E15806D6C14016D7EA26D7E6D6C91
C7FCA26D7E6D7EA26D7F6D7FA26E7E143FA26E5A6E5A6EC9FC140E5C5C14300270EC0180
5C495A495A49C81203010E16005B5B495D5B48485D48485D90C95A485E000E4B5A48ED1F
FE003FB7FC5AB8FCA231397BB83C>6 D<DA0FF813FC91397FFF07FF903B01F807DF83C0
903A07E001FF0F903B1F8007FE1FE090393F000FFC137E16F85B9338F007804848010790
C7FC1503ACB812F8A32801F80003F0C7FCB3AB486C497E267FFFE0B512F0A3333B7FBA30
>11 D<EC0FF8EC7FFE903901F80780903907E001C090391F8000E090383F0007017E497E
A25BA2485A6F5AED018092C8FCA9ED03F0B7FCA33901F8000F1503B3AA486C497E267FFF
E0B512C0A32A3B7FBA2E>I<DA0FF0EB1FF0DA7FFEEBFFFC903B01F80F83F00F903C07E0
01CFC00380903C1F8000FF0001C090273F0007FE130F017E4948497EA2495CA248485C03
076E5A03030203C7FC95C8FCA9F007E0BAFCA33C01F80003F0001F1807B3AA486C496C49
7E267FFFE0B500C1B51280A3413B7FBA45>14 D<001C131C007F137F39FF80FF80A26D13
C0A3007F137F001C131C00001300A40001130101801380A20003130301001300485B0006
1306000E130E485B485B485B006013601A197DB92A>34 D<121C127FEAFF80A213C0A312
7F121C1200A412011380A2120313005A1206120E5A5A5A12600A1979B917>39
D<146014E0EB01C0EB0380EB0700130E131E5B5BA25B485AA2485AA212075B120F90C7FC
A25A121EA2123EA35AA65AB2127CA67EA3121EA2121F7EA27F12077F1203A26C7EA26C7E
1378A27F7F130E7FEB0380EB01C0EB00E01460135278BD20>I<12C07E12707E7E7E120F
6C7E6C7EA26C7E6C7EA21378A2137C133C133E131EA2131F7FA21480A3EB07C0A6EB03E0
B2EB07C0A6EB0F80A31400A25B131EA2133E133C137C1378A25BA2485A485AA2485A48C7
FC120E5A5A5A5A5A13527CBD20>I<15301578B3A6007FB812F8B912FCA26C17F8C80078
C8FCB3A6153036367BAF41>43 D<121C127FEAFF80A213C0A3127F121C1200A412011380
A2120313005A1206120E5A5A5A12600A19798817>I<B512FCA516057F941C>I<121C127F
EAFF80A5EA7F00121C0909798817>I<150C151E153EA2153C157CA2157815F8A215F014
01A215E01403A215C01407A21580140FA215005CA2141E143EA2143C147CA2147814F8A2
5C1301A25C1303A2495AA25C130FA291C7FC5BA2131E133EA2133C137CA2137813F8A25B
1201A25B1203A25B1207A25B120FA290C8FC5AA2121E123EA2123C127CA2127812F8A25A
12601F537BBD2A>I<EB03F8EB1FFF90387E0FC09038F803E03901E000F0484813780007
147C48487FA248C77EA2481580A3007EEC0FC0A600FE15E0B3007E15C0A4007F141F6C15
80A36C15006D5B000F143EA26C6C5B6C6C5B6C6C485A6C6C485A90387E0FC0D91FFFC7FC
EB03F8233A7DB72A>I<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB5
12F0A31C3879B72A>I<EB0FF0EB7FFE48B57E3903E03FE0390F000FF0000E6D7E486D7E
486D7E123000706D7E126012FCB4EC7F807FA56CC7FC121CC8FCEDFF00A34A5A5D14035D
4A5A5D140F4A5A4A5A92C7FC147C5C495A495A495A495A91C8FC011EEB01805B5B491303
48481400485A485A000EC75A000FB6FC5A5A485CB6FCA321387CB72A>I<EB07F8EB3FFF
4913C03901F80FF03903C007F848486C7E380E0001000F80381FE0006D7FA56C5A6C5AC8
5A1401A25D4A5AA24A5A5DEC0F80027EC7FCEB1FFCECFF809038000FE06E7EEC01FC816E
7EED7F80A216C0A2153F16E0A2121EEA7F80487EA416C049137F007F1580007EC7FC0070
ECFF006C495A121E390F8003F83907F00FF00001B512C06C6C90C7FCEB0FF8233A7DB72A
>I<1538A2157815F8A2140114031407A2140F141F141B14331473146314C313011483EB
030313071306130C131C131813301370136013C01201EA038013005A120E120C5A123812
305A12E0B712F8A3C73803F800AB4A7E0103B512F8A325397EB82A>I<0006140CD80780
133C9038F003F890B5FC5D5D158092C7FC14FC38067FE090C9FCABEB07F8EB3FFE903878
0F803907E007E090388003F0496C7E12066E7EC87EA28181A21680A4123E127F487EA490
C71300485C12E000605C12700030495A00385C6C1303001E495A6C6C485A3907E03F8000
01B5C7FC38007FFCEB1FE0213A7CB72A>I<EC3FC0903801FFF0010713FC90380FE03E90
383F800790387E001F49EB3F804848137F485AA2485A000FEC3F0049131E001F91C7FCA2
485AA3127F90C9FCEB01FC903807FF8039FF1E07E090383801F0496C7E01607F01E0137E
497FA249148016C0151FA290C713E0A57EA56C7E16C0A2121FED3F807F000F15006C6C5B
15FE6C6C5B6C6C485A3900FE07F090383FFFC06D90C7FCEB03FC233A7DB72A>I<123012
38123E003FB612E0A316C05A168016000070C712060060140E5D151800E01438485C5D5D
C712014A5A92C7FC5C140E140C141C5CA25CA214F0495AA21303A25C1307A2130FA3495A
A3133FA5137FA96DC8FC131E233B7BB82A>I<EB03F8EB1FFF017F13C09038FC07F03901
E001F848486C7E4848137C90C77E48141E000E141F001E80A3121FA27F5D01E0131E6C6C
133E01FC133C6D5B6C6C6C5AECC1E06CEBF3C06C01FFC7FC6C5BEB3FFF6D13C081017F13
F801F07F3903E07FFE3907801FFF48486C1380481303003E6D13C0003CEB007F007C143F
0078EC0FE000F814075A1503A21501A36C15C012781503007C15806CEC07006C5C6C6C13
1ED807E0137C3903F803F0C6B55A013F1380D907FCC7FC233A7DB72A>I<EB03F8EB1FFF
017F13C09038FC07E03903F803F048486C7E48486C7E49137E121F48487FA2007F158090
C7FCA248EC1FC0A616E0A56C143FA27F123F001F147FA26C6C13FF3907E001DF0003149F
3801F0033900FC0F1FD93FFC13C0EB07F090C7FC153F1680A316005D000F147E487E486C
5BA24A5A4A5A49485A6C48485A001C495A260F807FC7FC3807FFFC000113F038003FC023
3A7DB72A>I<121C127FEAFF80A5EA7F00121CC7FCB2121C127FEAFF80A5EA7F00121C09
2479A317>I<121C127FEAFF80A5EA7F00121CC7FCB2121C127F5A1380A4127F121D1201
A412031300A25A1206A2120E5A121812385A1260093479A317>I<007FB812F8B912FCA2
6C17F8CCFCAE007FB812F8B912FCA26C17F836167B9F41>61 D<1538A3157CA315FEA34A
7EA34A6C7EA202077FEC063FA2020E7FEC0C1FA2021C7FEC180FA202387FEC3007A20270
7FEC6003A202C07F1501A2D901807F81A249C77F167FA20106810107B6FCA24981010CC7
121FA2496E7EA3496E7EA3496E7EA213E0707E1201486C81D80FFC02071380B56C90B512
FEA3373C7DBB3E>65 D<B712E016FC16FF0001903980007FC06C90C7EA1FE0707E707E70
7EA2707EA283A75F16035F4C5A4C5A4C5A4C5AEEFF8091B500FCC7FCA291C7EA7F80EE1F
E0EE07F0707E707E83707EA21880177F18C0A7188017FFA24C13005F16034C5AEE1FF848
6DEB7FF0B812C094C7FC16F832397DB83B>I<913A01FF800180020FEBE003027F13F890
3A01FF807E07903A03FC000F0FD90FF0EB039F4948EB01DFD93F80EB00FF49C8127F01FE
153F12014848151F4848150FA248481507A2485A1703123F5B007F1601A35B00FF93C7FC
AD127F6DED0180A3123F7F001F160318006C7E5F6C7E17066C6C150E6C6C5D0000161801
7F15386D6C5CD91FE05C6D6CEB03C0D903FCEB0F80902701FF803FC7FC9039007FFFFC02
0F13F002011380313D7BBA3C>I<B712C016F816FE000190398001FF806C90C7EA3FE0EE
0FF0EE03F8707E707E177FA2EF3F8018C0171F18E0170F18F0A3EF07F8A418FCAC18F8A4
EF0FF0A218E0A2171F18C0EF3F80A2EF7F0017FE4C5A4C5AEE0FF0EE3FE0486DEBFF80B8
C7FC16F816C036397DB83F>I<B812FCA30001903880000F6C90C71201EE007E173E171E
170EA31706A317078316C0A394C7FCA31501A21503150F91B5FCA3EC000F15031501A215
00A21860A318E093C712C0A41701A3EF0380A21707A2170F173F177F486D903807FF00B9
FCA333397DB839>I<B812F8A30001903880001F6C90C71201EE00FC177C173C171CA217
0CA4170E1706A2ED0180A21700A41503A21507151F91B5FCA3EC001F15071503A21501A6
92C8FCAD4813C0B612C0A32F397DB836>I<DBFF8013C0020FEBF001023F13FC9139FF80
3F03903A03FC000787D90FF0EB03CF4948EB00EF4948147F4948143F49C8121F485A4848
150F48481507A248481503A2485A1701123F5B007F1600A448481600AB93B6FCA26C7E93
38007FE0EF3FC0A2123F7F121FA26C7EA26C7EA26C7E6C7E6C6C157F6D7E6D6C14FF6D6C
14EFD90FF8EB03C7D903FEEB0783903A00FFC03F0191393FFFFC00020F01F01300020013
80383D7CBA41>I<B648B512FEA30001902680000313006C90C76C5AB3A491B6FCA391C7
1201B3A6486D497EB648B512FEA337397DB83E>I<B612C0A3C6EBC0006D5AB3B3AD497E
B612C0A31A397EB81E>I<B649B5FCA3000101809038007FF06C90C8EA3F80053EC7FC17
3C17385F5F4C5A4C5A4CC8FC160E5E5E5E5E4B5AED0780030EC9FC5D153E157E15FF5C4A
7F4A6C7E140E4A6C7E4A6C7E14704A6C7E4A6C7E14804A6C7E6F7EA26F7F707EA2707E70
7EA2707EA2707E707EA2707E707F8484486D497FB6011FEBFF80A339397DB841>75
D<B612E0A3000101C0C8FC6C90C9FCB3AD1718A517381730A31770A317F0A21601160316
0FEE1FE0486D13FFB8FCA32D397DB834>I<B5933807FFF86E5DA20001F0FC002600DFC0
ED1BF8A2D9CFE01533A3D9C7F01563A3D9C3F815C3A2D9C1FCEC0183A3D9C0FEEC0303A2
027F1406A36E6C130CA36E6C1318A26E6C1330A36E6C1360A26E6C13C0A3913901FC0180
A3913900FE0300A2ED7F06A3ED3F8CA2ED1FD8A3ED0FF0A3486C6D5A487ED80FFC6D4849
7EB500C00203B512F8A2ED018045397DB84C>I<B5913807FFFE8080C69238007FE06EEC
1F80D9DFF0EC0F001706EBCFF8EBC7FCA2EBC3FEEBC1FFA201C07F6E7EA26E7E6E7E8114
0F6E7E8114036E7E168080ED7FC016E0153FED1FF0ED0FF8A2ED07FCED03FEA2ED01FF6F
1386A2EE7FC6EE3FE6A2EE1FF6EE0FFEA216071603A216011600A2177E486C153E487ED8
0FFC151EB500C0140EA2170637397DB83E>I<EC03FF021F13E09138FE01FC903901F800
7ED907E0EB1F8049486D7ED93F80EB07F049C76C7E01FE6E7E48486E7E49157E0003167F
4848ED3F80A24848ED1FC0A2001F17E049150F003F17F0A3007F17F8491507A300FF17FC
AC007F17F86D150FA3003F17F0A26C6CED1FE0A36C6CED3FC0000717806D157F00031700
6C6C15FEA26C6C4A5A017F4A5A6D6C495A6D6C495AD907E0EB1F80D903F8017FC7FC9039
00FE01FC91381FFFE0020390C8FC363D7BBA41>I<B712C016F816FE000190398001FF80
6C90C7EA3FC0EE0FE0EE07F0EE03F817FC17FE1601A217FFA717FEA2EE03FCA2EE07F817
F0EE0FE0EE3FC0923801FF0091B512FC16F091C9FCB3A5487FB6FCA330397DB839>I<B6
12FEEDFFE016F8000190388007FE6C90C76C7EEE3FC0707E707E707EA2707EA283A65FA2
4C5AA24C5A4C5AEE3F8004FFC8FCED07FC91B512E05E9138000FF0ED03F8ED00FE82707E
707EA2161F83A583A6F00180A217F8160F1803486D01071400B66D6C5A04011306933800
FE0ECAEA3FFCEF07F0393B7DB83D>82 D<D90FF813C090383FFE0190B512813903F807E3
3907E000F74848137F4848133F48C7121F003E140F007E1407A2007C140312FC1501A36C
1400A37E6D14006C7E7F13F86CB47E6C13F8ECFF806C14E06C14F86C14FEC680013F1480
010714C0EB007F020713E0EC007FED3FF0151F150FED07F8A200C01403A21501A37EA216
F07E15036C15E06C14076C15C06C140F6DEB1F80D8FBF0EB3F00D8F0FE13FE39E03FFFF8
010F13E0D8C00190C7FC253D7CBA2E>I<003FB812E0A3D9C003EB001F273E0001FE1303
48EE01F00078160000701770A300601730A400E01738481718A4C71600B3B0913807FF80
011FB612E0A335397DB83C>I<B6903807FFFEA3000101809038007FE06C90C8EA1F80EF
0F001706B3B2170E6D150C80171C133F17186D6C14385F6D6C14F06D6C5C6D6C495A6D6C
EB07806D6C49C7FC91387F807E91381FFFF8020713E09138007F80373B7DB83E>I<B500
FC91387FFF80A30003018091380FFC006C90C8EA07E0715A6C705A6E1403017F93C7FCA2
80013F1506A26E140E011F150C80010F5DA28001075DA26E147001031560A26D6C5CA280
6D4A5AA2ED8003027F91C8FCA291383FC006A215E0021F5BA2EDF01C020F1318A26E6C5A
A215FC02035BA2EDFEE002015BA26E6C5AA36FC9FCA3153EA2151CA3393B7EB83E>I<B5
D8FC07B5D8F001B5FCA30007902780001FFEC7EA1FF86C48C7D80FF8EC07E000010307ED
03C01B807F6C6F6C1500A26E5F017F6E6C1406A280013F4A6C5CA280011F4A6D5BEE067F
A26D6C010E6D5BEE0C3FA26D6C011C6D5BEE181FA26D6C6F5BEE300FA26D6C6F485AEE60
07A26D6C4CC7FC9338C003FCA203805D913B7F818001FE06A203C1150EDA3FC3C7EAFF0C
A203E3151CDA1FE6EC7F98A215F6DA0FFCEC3FF0A302075E4B141FA202035E4B140FA202
015E4B1407A2020093C8FC4B80503B7EB855>I<EAFFF8A4EAF000B3B3B3B3A3EAFFF8A4
0D5378BD17>91 D<3901800180000313033907000700000E130E485B0018131800381338
003013300070137000601360A200E013E0485BA400CE13CE39FF80FF806D13C0A3007F13
7FA2393F803F80390E000E001A1974B92A>I<EAFFF8A4EA0078B3B3B3B3A3EAFFF8A40D
537FBD17>I<EA01801203EA0700120E5A12181238123012701260A212E05AA412CEEAFF
8013C0A3127FA2EA3F80EA0E000A197AB917>96 D<EB1FE0EBFFFC3803E03F3907000F80
390F8007E0486C6C7E13E06E7EA26E7E6C5A6C5AC8FCA4147FEB07FFEB3FE0EBFE00EA03
F8EA0FF0EA1FC0123F485A90C7FC160C12FEA31401A26C13036CEB077C903980063E1838
3FC01E3A0FE0781FF03A03FFF00FE03A007F8007C026277DA52A>I<EA03F012FFA3120F
1203B0EC1FE0EC7FF89038F1E03E9039F3801F809039F7000FC001FEEB07E049EB03F049
EB01F85BED00FCA216FEA2167E167FAA167E16FEA216FC15016D14F8ED03F07F01EEEB07
E001C6EB0FC09039C7801F00903881E07E903800FFF8C7EA1FC0283B7EB92E>I<EB03FC
90381FFF8090387E03E03901F80070484813F83907E001FC380FC003A2EA1F80123F9038
0001F848EB00F01500A2127E12FEAA127E127FA26C14067F001F140E6D130C000F141C6C
6C13386C6C13706C6C13E039007C07C090381FFF00EB07F81F277DA525>I<ED0FC0EC03
FFA3EC003F150FB0EB03F8EB1FFF90387E078F9038F801EF3903F0007F4848133F484813
1FA24848130F123F90C7FC5AA2127E12FEAA127E127FA27EA26C6C131FA26C6C133F6C6C
137F6C6CEBEFF03A01F801CFFF39007C078F90381FFE0FD907F813C0283B7DB92E>I<EB
07F8EB1FFF90387C0FC03901F803E03903F001F0D807E013F8380FC0004848137CA248C7
127E153E5A153F127E12FEA3B7FCA248C8FCA5127EA2127FA26C14037F001F14076C6C13
060007140E6D131CD801F013386C6C137090387E03E090381FFF80903803FC0020277EA5
25>I<147E903803FF8090380FC1E0EB1F8790383F0FF0137EA213FCA23901F803C091C7
FCADB512FCA3D801F8C7FCB3AB487E387FFFF8A31C3B7FBA19>I<ED03F090390FF00FF8
90393FFC3C3C9039F81F707C3901F00FE03903E007C03A07C003E010000FECF000A24848
6C7EA86C6C485AA200075C6C6C485A6D485A6D48C7FC38073FFC38060FF0000EC9FCA412
0FA213C06CB512C015F86C14FE6CECFF804815C03A0F80007FE048C7EA0FF0003E140348
140116F8481400A56C1401007C15F06CEC03E0003F1407D80F80EB0F80D807E0EB3F0039
01FC01FC39007FFFF0010790C7FC26387EA52A>I<EA03F012FFA3120F1203B0EC0FF0EC
3FFCECF03F9039F1C01F809039F3800FC0EBF70013FE496D7EA25BA35BB3A3486C497EB5
00C1B51280A3293A7EB92E>I<EA0380EA0FE0487EA56C5AEA0380C8FCAAEA03F012FFA3
12071203B3AA487EB512C0A312387EB717>I<EB01C0EB07F0EB0FF8A5EB07F0EB01C090
C7FCAAEB01F813FFA313071301B3B3A2123C127E00FF13F01303A214E038FE07C0127C38
3C0F00EA0FFEEA03F8154984B719>I<EA03F012FFA3120F1203B1913801FFFCA3913800
7FC01600157C15705D4A5A4A5A4AC7FC141E1438147814FC13F1EBF3FEEBF73F01FE7FEB
F81F496C7E8114076E7E6E7E811400157E157F811680ED1FC0486CEB3FF0B500C0B5FCA3
283A7EB92C>I<EA03F012FFA3120F1203B3B3AD487EB512C0A3123A7EB917>I<2703F00F
F0EB1FE000FFD93FFCEB7FF8913AF03F01E07E903BF1C01F83803F3D0FF3800FC7001F80
2603F70013CE01FE14DC49D907F8EB0FC0A2495CA3495CB3A3486C496CEB1FE0B500C1B5
0083B5FCA340257EA445>I<3903F00FF000FFEB3FFCECF03F9039F1C01F803A0FF3800F
C03803F70013FE496D7EA25BA35BB3A3486C497EB500C1B51280A329257EA42E>I<EB03
FE90380FFF8090383E03E09038F800F84848137C48487F48487F4848EB0F80001F15C090
C712074815E0A2007EEC03F0A400FE15F8A9007E15F0A2007F14076C15E0A26C6CEB0FC0
000F15806D131F6C6CEB3F006C6C137EC66C13F890387E03F090381FFFC0D903FEC7FC25
277EA52A>I<3903F01FE000FFEB7FF89038F1E07E9039F3801F803A0FF7000FC0D803FE
EB07E049EB03F04914F849130116FC150016FEA3167FAA16FEA3ED01FCA26DEB03F816F0
6D13076DEB0FE001F614C09039F7803F009038F1E07E9038F0FFF8EC1FC091C8FCAB487E
B512C0A328357EA42E>I<D903F813C090381FFE0190387E07819038FC01C33903F000E3
000714774848133749133F001F141F485A150F48C7FCA312FEAA127FA37E6D131F121F6D
133F120F6C6C137F6C6C13EF3901F801CF39007E078F90381FFE0FEB07F890C7FCABED1F
E00203B5FCA328357DA42C>I<3807E01F00FFEB7FC09038E1E3E09038E387F0380FE707
EA03E613EE9038EC03E09038FC0080491300A45BB3A2487EB512F0A31C257EA421>I<EB
FF03000313E7380F80FF381E003F487F487F00707F12F0A2807EA27EB490C7FCEA7FE013
FF6C13E06C13F86C7F00037FC67F01071380EB007F141F00C0EB0FC01407A26C1303A37E
15806C13077EEC0F00B4131E38F3C07C38E1FFF038C03F801A277DA521>I<1318A51338
A31378A313F8120112031207001FB5FCB6FCA2D801F8C7FCB215C0A93800FC011580EB7C
03017E13006D5AEB0FFEEB01F81A347FB220>I<D803F0EB07E000FFEB01FFA3000FEB00
1F00031407B3A4150FA3151F12016D133F0000EC77F86D9038E7FF8090383F03C790381F
FF87903A03FC07E00029267EA42E>I<B538803FFEA33A0FF8000FF06C48EB07E00003EC
03C06D148000011500A26C6C1306A26D130E017E130CA26D5BA2EC8038011F1330A26D6C
5AA214E001075BA2903803F180A3D901FBC7FCA214FF6D5AA2147CA31438A227257EA32C
>I<B53A1FFFE03FFEA3260FF8009038000FF86C48017EEB03E018C00003023EEB0180A2
6C6C013FEB0300A36C6CEC8006156FA2017E9038EFC00C15C7A2D93F016D5A15830281EB
F038D91F831430150102C3EBF87090260FC6001360A2D907E66D5A02EC137CA2D903FCEB
7F804A133FA2010192C7FC4A7FA20100141E4A130E0260130C37257EA33C>I<B538807F
FFA33A03FE003FF00001EC1F80000092C7FC017E131C6D13186D6C5AECC070010F5B6D6C
5AECF180EB03FB6DB4C8FC6D5AA2147F804A7E8114CF903801C7E090380383F090380703
F8EB0601496C7E011C137E49137F01787F496D7E486C80000FEC3FF0D8FFFE90B51280A3
29247FA32C>I<B538803FFEA33A0FF8000FF06C48EB07C00003EC03806C7E16007F0000
1406A2017E5BA2137F6D5BA26D6C5AA2ECC070010F1360A26D6C5AA214F101035BA2D901
FBC7FCA214FF6D5AA2147CA31438A21430A214701460A25CA2EA7C0100FE5B130391C8FC
1306EAFC0EEA701C6C5AEA1FF0EA0FC027357EA32C>I<003FB512FCA2EB8003D83E0013
F8003CEB07F00038EB0FE012300070EB1FC0EC3F800060137F150014FE495AA2C6485A49
5AA2495A495A495AA290387F000613FEA2485A485A0007140E5B4848130C4848131CA248
48133C48C7127C48EB03FC90B5FCA21F247EA325>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fq cmcsc10 10 37
/Fq 37 122 df<EB03FE90381FFFC090383E03E09038F800F84848137C48487F48487F49
7F000F1580001F15C090C71207A24815E0A3007EEC03F0A500FE15F8B2007E15F0A4007F
14076C15E0A46C15C06D130F000F15806C6CEB1F00A26C6C133E6C6C5B6C6C5B90383E03
E06DB45AD903FEC7FC253A7CB72E>48 D<EB01C013031307131F13FFB5FCA2131F1200B3
B3A8EB7FF0B612F8A31D3877B72E>I<EB0FF8EB3FFF90B512C03903E01FF039078007FC
390E0001FE486D7E5A0030EC7F800070EC3FC0126012FCB4EC1FE07FA56CC7FC121CC8FC
ED3FC0A3ED7F8016005D5D4A5A4A5A4A5A5D4A5A4A5A4AC7FC147E14F8495A495A495A49
5A91C71260131E13384914E04914C0485A485A48C7120148B6FC5A5A481580B7FCA32338
7BB72E>I<EB07F890383FFF8090B512E03903F00FF039078003FC48486C7E001E130081
EA3FC06DEB7F80A56C5A6C5AC8EAFF00A34A5A5D4A5A5D4A5A4A5A027FC7FCEB3FF814FF
9038000FE06E7EEC03FC6E7E6E7E1680157F16C0A2153F16E0A2121EEA7F80487EA4ED7F
C05B007F1580007EC712FF007015006C495A001E495A6C6C485A3907F00FF00001B512C0
6C6C90C7FCEB0FF8233A7BB72E>I<151C153CA2157C15FCA214011403A21407140F141D
141914311471146114C11301EB038114011307130E130C131813381330136013E0EA01C0
1380EA03005A12065A121C5A123012705AB712FEA3C73801FC00AB4A7E49B512FCA32739
7DB82E>I<00061406D80780131E9038F801FC90B5FC5D5D15C05D4AC7FC38067FF090C9
FCABEB03FC90381FFF8090387C07E09038E001F03907C000F8497F90C7127E0006147FC8
EA3F80A216C0151FA216E0A4123E127F487EA490C713C048143F126016800070147F6C15
0015FE6C5C000F495A39078007F03903F01FE06CB512806C6C48C7FCEB0FF0233A7BB72E
>I<B712F816FF17C00001903980001FF06C90C7EA07FC707E707E701380177F18C0173F
18E0A618C0A2177F1880EFFF004C5A4C5AEE0FF8EE3FE091B6128094C7FC91C7EA3FE0EE
07F8EE01FE707EEF7F80EF3FC018E0171F18F0170F18F8A718F0171F18E0173FEF7FC0EF
FF804C1300EE07FE486DEB1FFCB812F017C04CC7FC35397CB840>66
D<DB7FC01330912607FFF81370023F13FE913AFFC01F80F0903A03FE0003E1D907F8EB00
F3D91FE0147B4948143F4948141F49C8120F4848150748481503A24848150148481500A2
485A1870123F5B1830127FA349160012FFAB127F7F1830A2123FA27F001F177018606C7E
18E06C6C16C06C6C150118806C6C15036C6CED07006D6C5C6D6C141E6D6C5CD907F85CD9
03FEEB01E0903A00FFC00FC0023FB5C7FC020713FC9138007FE0343D7ABA41>I<B712F8
16FF17C00001903980003FF06C90C7EA07FCEE01FEEE007F717E717E717E717E84170371
7EA284170084A21980187FA319C0AB1980A4F0FF00A3601701601703604D5A4D5A171F4D
5A4D5ADC01FEC7FCEE07FC486DEB3FF0B85A94C8FC16F83A397CB845>I<B6D8C07FB512
E0A3C601C0C7387FE0006D486E5AB3A491B7FCA30280C7123FB3A6496C4A7EB6D8C07FB5
12E0A33B397CB844>72 D<B612C0A3C6EBC0006D5AB3B3AD497EB612C0A31A397CB822>
I<B5933801FFFE6E5DA2000119002600DFC0ED06FEA2D9CFE0150CA3D9C7F01518A2D9C3
F81530A3D9C1FC1560A2D9C0FE15C0A3027FEC0180A26E6CEB0300A36E6C1306A26E6C5B
A26E6C5BA36E6C5BA26E6C5BA36E6C5BA292387F0180A3DB3F83C7FCA2ED1FC6A3ED0FEC
A2ED07F8A3486C6D5A487ED80FFC6D48497EB500C092B512FEA26F5A47397BB852>77
D<B7FC16F016FE000190398001FF806C90C7EA3FE0EE0FF0707E707E707EA2838284A695
C7FC5E5F5F1603EE07F04C5AEE3F80DB01FEC8FC91B512F816E091380003FCED00FEEE7F
80707E707E707EA2160783A583A61930A28316031970486D6D6C1360B66D14E094387F81
C094383FC380CA380FFF00EF01FC3C3B7CB842>82 D<D907F81330D93FFF137090B512E0
3A03F807F0F03907E000794848133F4848130F90C71207003E1403007E1401A2007C1400
12FC1670A36C1530A37E6D14006C7E7F13F86CB47E6C13FCECFFC06C14F06C14FC000114
FF6C1580013F14C0010714E0EB003F020313F0EC007FED1FF8150F1507ED03FCA200C014
01A21500A37EA216F87E15016C15F06C14036C15E06CEC07C001C0130FD8F9F0EB1F80D8
F0FFEB7E0039E03FFFFC010F13F048C61380263D7ABA33>I<003FB812FCA3D9C001EB80
0390C790C7FC007C173E0078171E0070170EA300601706A400E01707481703A4C81500B3
B0020313C0010FB612F0A338397CB841>I<B6D8C001B512E0A3C601C0C7380FFC006D48
EC03F0715A715AB3B21701013F5E801703131F6E4AC7FC130F6E140E01075D6D6C143C6D
6C5C6D6C5C91397F8003E091391FE01F800207B5C8FC020113FC9138003FE03B3B7CB844
>I<1407A24A7EA34A7EA3EC37E0A2EC77F01463A2ECC1F8A201017F1480A2903803007E
A301067FA2010E80010C131FA2496D7EA2013FB57EA29038300007496D7EA3496D7EA200
018149130012036D801207D81FE0903801FF80D8FFF8010F13F8A22D2C7DAB33>97
D<B612F015FE3A07F8003F806C48EB0FC0ED07E0ED03F016F8150116FCA516F8A2ED03F0
1507ED0FE0ED3F80913801FF0090B512F815FF9039F0001FC0ED07E0ED03F0ED01F816FC
150016FEA616FC1501A2ED03F8ED07F0ED0FE0486CEB3FC0B7120015F8272B7CAA30>I<
91383FC006903901FFF80E90390FE03E1E90381F0007017EEB03BE01F8EB01FE48481300
4848147E0007153E485A001F151E5B003F150E90C8FC5A1606A212FE1600AA007F1506A3
7E6D140E001F150C7F000F151C6C6C1418000315386C6C14706C6C14E0017EEB01C0011F
EB078090390FE03E00903801FFF89038003FC0272D7BAB31>I<B612F015FE3907F8007F
6C48EB0FC0ED03E06F7E6F7E167C167E82A2EE1F80A217C0160FA317E0AA17C0A3EE1F80
A217005E163E5E16FC4B5A4B5AED0FC0486CEB7F80B600FEC7FC15F02B2B7CAA34>I<B7
12E0A23907F8000F6C481303ED00F01670A21630A41618A215C01600A31401A2140790B5
FCA2EBF0071401A21400A21606A21500A2160CA4161CA2163C167C16F8486C1307B7FCA2
272B7CAA2E>I<B712C0A23907F8001F6C481303ED01E01500A21660A41630A215C01600
A31401A2140790B5FCA2EBF0071401A21400A492C7FCAB487EB512E0A2242B7CAA2C>I<
91383FE003903901FFF807903907E01E0F90391F00078F017EEB01DF496DB4FC48488048
4880484880485A001F815B003F8190C8FC5A82A212FE93C7FCA892383FFFF8A2007F0200
1380EE3F00A27E7F121F7F120F6C7E6C7E6C6C5C6C7E017E5C011FEB01CF903907E00F87
903901FFFE039026003FF0C7FC2D2D7BAB35>I<B539C07FFFE0A23B07F80003FC006C48
6D5AB190B6FCA29038F00001B2486C497EB539C07FFFE0A22B2B7CAA33>I<B512C0A238
07F8006C5AB3B3487EB512C0A2122B7CAA19>I<B500C0EBFFF8A2D807F8C7EA7FC06C48
1500167C167816E04B5A4B5A4BC7FC150E5D5D15F0EC01C04A5A4AC8FC5C4A7E4A7E4A7E
EBF1E79038F387F09038F703F89038FE01FC13FC496C7E49137F6F7EA26F7E6F7E150782
6F7E6F7EA26F7E82EE7F80486CECFFC0B5D8C00313FCA22E2B7CAA35>107
D<B512E0A2D807F8C8FC6C5AB3A61660A416C0A31501A21503A21507ED1F80486C13FFB7
FCA2232B7CAA2B>I<D8FFF0ED3FFC6D157F0007178000031700017C15DFA26DEC019FA3
6DEC031FA26D6C1306A36D6C130CA26D6C1318A26D6C1330A36D6C1360A2027C13C0A391
383E0180A291381F0300A3EC0F86A2EC07CCA3EC03F8A2486C6C5AA2D81FE0ED3F803CFF
FC00E007FFFCA2362B7CAA3E>I<D8FFF0903807FFE07F0007020013006C6C143C7F017F
14187F806D7E130F806D7E6D7EA26D7E6D7E147E147FEC3F80141F15C0EC0FE0EC07F014
0315F8EC01FC140015FE157FED3F98151F16D8ED0FF81507A215031501A2486C13001678
D81FE01438EAFFFC16182B2B7CAA33>I<EC7FC0903803FFF890380FC07E90393F001F80
017CEB07C04848EB03F048486D7E4913004848147C000F157E484880A248C8EA1F80A248
16C0A2007E150FA200FE16E0AA007FED1FC0A36C16806D143F001F1600A26C6C147E6C6C
5CA26C6C495A6C6C495AD8007CEB07C0013FEB1F8090260FC07EC7FC903803FFF8903800
7FC02B2D7BAB35>I<B612E015FC3907F800FE6C48EB1F80ED0FC0ED07E016F01503A216
F8A516F0A2150716E0ED0FC0ED1F80EDFE0090B55A15E001F0C8FCB1487EB512C0A2252B
7CAA2E>I<EC7FC0903803FFF890380FC07E90393F001F80017CEB07C04848EB03F04848
6D7E4913004848147C000F157E484880A2003F168090C8121F4816C0A2007E150FA200FE
16E0AA007E16C0007F151FA26C1680A26C6CEC3F00141F3A0FC03FC07E0007903870E07C
9039E0E060FC3A03F0C071F8D801F8EB3BF0D8007CEB3FC090393FE01F8090260FF07EC7
FC902603FFFC13609038007FDEEC001E6F13E016011683EEFFC0A28117806F13006F5AED
00782B387BAB35>I<B67E15F03907F800FE6C48133FED0FC06F7EA26F7E82A65E4B5AA2
4B5A033FC7FC15FE90B512F05D9038F001F8EC007E816F7EA26F7EA582A4171816F01507
1738486C903803F830B5D8C00113709238007FE0C9EA1F802D2C7CAA32>I<017F136039
01FFE0E0380780F9380E001F48130748130312780070130100F01300A315607EA26C1400
7E127F13C0EA3FFEEBFFE06C13F8000713FE6C7FC61480010F13C01300EC0FE01407EC03
F01401A212C01400A37E15E06C1301A26CEB03C06CEB0780B4EB0F0038F3E01E38E0FFF8
38C01FE01C2D7BAB26>I<007FB712C0A23A7E003FC00F007890381F8003007015011600
126000E016E0A2481660A5C71500B3A8EC7FE0011FB57EA22B2B7DAA31>I<B539C007FF
E0A2D807F8C713006C48143CA21618B3A916386C6C1430A2000015706D5C017C5C6D1301
6D495A90260F800FC7FC903803E03C903800FFF8EC3FC02B2C7CAA33>I<B56CEB1FFEA2
D80FFCC7EA0FF00003ED07C01780000116006C6C1406017F140E160C6D6C5B6D6C133816
306D6C5B6D6C13E05E6D6C485A903801FC0393C7FC903800FE06EC7F0E150CEC3F9CEC1F
F85D140F6E5AAF4A7E49B57EA22F2B7EAA33>121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fr cmbx10 10 38
/Fr 38 120 df<EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F800D0D798C1B
>46 D<141E143E14FE1307133FB5FCA313CFEA000FB3B3A6007FB61280A4213779B630>
49 D<EB0FFC90387FFFC048B512F0000714FC390FF03FFF261F800F1380263F000313C0
5AD9C00113E0486C6C13F07FA2ED7FF8A46C5A6C5A000FC7FCC8FCEDFFF0A216E05C16C0
4A138016004A5A5D4A5A4A5A4A5AEC7F8092C7FC14FEEB01F849481378495A495A495A01
3EC712F84914F05B4848130148B6FCA25A5A5A5A4815E0B7FCA425377BB630>I<EB03FF
011F13F0017F13FC3901FC07FF2603F003138048486C13C0496C13E0EA0FF001FC14F012
1F7FA56C4814E0A23803F001C714C04A138016004A5A4A5AEC3FF090380FFFC092C7FC15
F090380007FE913801FF806E13C016E0ED7FF016F816FC153FA216FEEA1FC0487E487E48
7EA416FCA249EB7FF8127F01C0EBFFF06C4814E06C6C4813C0260FFC0713806CB6120000
0114FC6C6C13F0010790C7FC27387CB630>I<ED07C0150FA2151F153F157F15FFA25C5C
5C5CA2141E5C147C5C5C495A495A1307495A5C131E5B137C5B5B485A485A1207485A90C7
FC121E5A127C5AB81280A4C70001EBC000AA0103B61280A429377DB630>I<001C15C0D8
1F80130701F8137F90B61280A216005D5D15F05D15804AC7FC14F090C9FCA8EB07FE9038
3FFFE090B512F89038FC07FC9038E003FFD98001138090C713C0120EC813E0157F16F0A2
16F8A21206EA3F80EA7FE012FF7FA44914F0A26C4813FF90C713E0007C15C06C5B6C4913
80D9C0071300390FF01FFE6CB512F8000114E06C6C1380D90FF8C7FC25387BB630>I<EC
0FF8ECFFFE0103EBFF8090390FF80FC090393FE003E090397FC001F09038FF000F48EC1F
F84848133F485A120F5B121FA2003FEC1FF0ED0FE04990C7FC127FA21408EC7FF039FFF1
FFFC01F313FFD9F78013809039FF007FC049EB3FE04914F0ED1FF85B16FCA34914FEA512
7FA5123F16FCA26C7E16F8000F143F6C6C14F0ED7FE06C6C14C03A01FF81FF806C90B512
00013F13FC010F13F00101138027387CB630>I<123C123EEA3FE090B71280A41700485D
5E5E5EA25E007CC7EA0FC000784A5A4BC7FC00F8147E48147C15FC4A5A4A5AC7485A5D14
0F4A5A143F92C8FC5C147E14FE1301A2495AA31307A2130F5CA2131FA5133FA96D5A6D5A
6D5A293A7BB830>I<EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F80C7FCAB
EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F800D2579A41B>58
D<DB3FFCEB01C00203B5EAC003021FECF00791B6EAFC0F01039039FC00FF3F4901C0EB1F
FFD91FFEC77E49481403D97FF080494880485B48177F4849153F4890C9FC181F485A180F
123F5B1807127FA24993C7FC12FFAD127F7FF003C0123FA27F001F1707A26C6C1780180F
6C6D16006C6D5D6C173E6C6D157ED97FF85D6D6C4A5A6DB44A5A010701C0EB0FE06D01FC
EBFF80010090B548C7FC021F14F8020314E09126003FFEC8FC3A3B7BB945>67
D<B600FC0103B512C0A426007FF8C8381FE00019804EC7FC18FEEF01F84D5A4D5A4D5AEF
3F80057EC8FC5F4C5A4C5AEE0FE0EE1F804CC9FC167E5EED03F84B7E4B7E4B7E4B7F5D02
F9B57EDAFBF77FDAFFE37F15C103807F4A487F4A6D7E4A133F707E707F8482707F707F84
82717E717E8483717F717F858385B600FC017FEBFFE0A443397DB84B>75
D<B7FCA426007FF8C9FCB3ACEF0780A5170F1800A35FA25FA25F5F5E5EEE0FFE167FB8FC
A431397DB839>I<B8FC17F017FEEFFF8028007FF8000F13C0040113E07013F0EF7FF8EF
3FFCA2EF1FFEA218FFA818FEA2EF3FFCA2EF7FF8EFFFF04C13E0040F13C091B7120017FC
17E002F8C9FCB3A4B612FCA438397DB841>80 D<EDFFF8020FEBFF80027F14F0903A01FF
E03FFC010790380007FFD91FFC010113C049486D7FD97FE0EC3FF049486E7E488348496E
7E4890C86C7EA248486F1380A2001F18C04981003F18E0A3007F18F04981A300FF18F8AC
007F18F0A36D5D003F18E0A36C6C4B13C0A2000FDA1FC014806C6C90267FF0071300EDFF
F86C903A81F07C0FFE6C903AC3C01E1FFC6CDA800F5BD97FE3ECBFF0D93FF36DB45AD91F
FF5D010701C091C7FC01019038F01FFC6D6CB500F01308020F6E131C0200EBF9FC922600
01FE133C9438FF80FC18FF8219F8A28319F0A27113E0A27113C0711380711300EF01FC3E
4A7BB948>I<D907FF130E013FEBE01E90B5EAF83E0003ECFE7E3A07FC01FFFE390FF000
1F4848130F48481303491301007F140090C8FC167E5A163EA27F161E7F7F6D91C7FC13FC
387FFFE014FEECFFF06C14FE6F7E6C816C15F06C816C81C681133F010F801301D9000F14
80EC007F030F13C01503818100F0157FA3163FA27E17807E167F6C16007E6D14FE01E049
5A01F813039039FF801FF800FC90B512E0D8F83F5CD8F00749C7FC39E0007FF02A3B7BB9
35>83 D<003FB91280A4D9F800EBF003D87FC09238007FC049161F007EC7150FA2007C17
07A200781703A400F818E0481701A4C892C7FCB3AE010FB7FCA43B387DB742>I<EAFFFC
A5EAF800B3B3B3B3EAFFFCA50E5376BD1B>91 D<EAFFFCA5EA007CB3B3B3B3EAFFFCA50E
537EBD1B>93 D<EB3FFE0003B512E0000F14F8391FF00FFE003FEB03FF6D6C7F6E7FA26F
7EA26C5A6C5AEA0380C8FCA2EC3FFF010FB5FC137F3901FFF87F00071380380FFE00EA3F
F85B485A12FF5BA415FF6D5A127F263FF00713F83B1FFC1FBFFFC0390FFFFE1F0003EBF8
0F39003FE0032A257DA42E>97 D<903801FFC0010F13FC017F13FFD9FF8013802603FE00
13C048485AEA0FF8121F13F0123F6E13804848EB7F00151C92C7FC12FFA9127FA27F123F
ED01E06C7E15036C6CEB07C06C6C14806C6C131FC69038C07E006DB45A010F13F0010113
8023257DA42A>99 D<EE7F80ED7FFFA4150381AF903801FF81010F13F1013F13FD9038FF
C07F0003EB001FD807FC1307000F8048487F5B123FA2485AA312FFAA127FA27F123FA26C
6C5B000F5C6C6C5B6C6C4913C02701FF80FD13FE39007FFFF9011F13E1010313012F3A7D
B935>I<903803FF80011F13F0017F13FC3901FF83FE3A03FE007F804848133F484814C0
001FEC1FE05B003FEC0FF0A2485A16F8150712FFA290B6FCA301E0C8FCA4127FA36C7E16
78121F6C6C14F86D14F000071403D801FFEB0FE06C9038C07FC06DB51200010F13FC0101
13E025257DA42C>I<EC1FF0903801FFFC010713FF90391FF87F8090383FE0FFD9FFC113
C0A2481381A24813016E1380A2ED3E0092C7FCA8B6FCA4000390C8FCB3ABB512FEA4223A
7DB91D>I<161FD907FEEBFFC090387FFFE348B6EAEFE02607FE07138F260FF801131F48
486C138F003F15CF4990387FC7C0EEC000007F81A6003F5DA26D13FF001F5D6C6C4890C7
FC3907FE07FE48B512F86D13E0261E07FEC8FC90CAFCA2123E123F7F6C7E90B512F8EDFF
8016E06C15F86C816C815A001F81393FC0000F48C8138048157F5A163FA36C157F6C1600
6D5C6C6C495AD81FF0EB07FCD807FEEB3FF00001B612C06C6C91C7FC010713F02B377DA5
30>I<13FFB5FCA412077EAFED7FC0913803FFF8020F13FE91381F03FFDA3C0113801478
4A7E4A14C05CA25CA291C7FCB3A3B5D8FC3F13FFA4303A7DB935>I<EA01F0EA07FC487E
A2487EA56C5AA26C5AEA01F0C8FCA913FF127FA412077EB3A9B512F8A4153B7DBA1B>I<
13FFB5FCA412077EAF92380FFFE0A4923803FC0016F0ED0FE0ED1F804BC7FC157E5DEC03
F8EC07E04A5A141FEC7FE04A7E8181A2ECCFFEEC0FFF496C7F806E7F6E7F82157F6F7E6F
7E82150F82B5D8F83F13F8A42D3A7EB932>107 D<13FFB5FCA412077EB3B3ACB512FCA4
163A7DB91B>I<01FED97FE0EB0FFC00FF902601FFFC90383FFF80020701FF90B512E0DA
1F81903983F03FF0DA3C00903887801F000749DACF007F00034914DE6D48D97FFC6D7E4A
5CA24A5CA291C75BB3A3B5D8FC1FB50083B512F0A44C257DA451>I<01FEEB7FC000FF90
3803FFF8020F13FE91381F03FFDA3C011380000713780003497E6D4814C05CA25CA291C7
FCB3A3B5D8FC3F13FFA430257DA435>I<903801FFC0010F13F8017F13FFD9FF807F3A03
FE003FE048486D7E48486D7E48486D7EA2003F81491303007F81A300FF1680A9007F1600
A3003F5D6D1307001F5DA26C6C495A6C6C495A6C6C495A6C6C6CB45A6C6CB5C7FC011F13
FC010113C029257DA430>I<9039FF01FF80B5000F13F0023F13FC9138FE07FFDAF00113
800007496C13C06C0180EB7FE091C713F0EE3FF8A2EE1FFCA3EE0FFEAA17FC161FA217F8
163F17F06E137F6E14E06EEBFFC0DAF00313809139FC07FE0091383FFFF8020F13E00203
90C7FC91C9FCACB512FCA42F357EA435>I<49B4EB0780010FEBE00F013FEBF81F9039FF
C07C3F0003EB803E3A07FE000F7F4848EB07FF121F497F123F497F127FA25B12FFAA6C7E
A36C7E5D6C7E000F5C6C6C5B6C6C133F6CEBC0FD39007FFFF1011F13C10101130190C7FC
AC037F13FEA42F357DA432>I<9038FE03F000FFEB0FFEEC3FFF91387C7F809138F8FFC0
00075B6C6C5A5CA29138807F80ED3F00150C92C7FC91C8FCB3A2B512FEA422257EA427>
I<90383FF0383903FFFEF8000F13FF381FC00F383F0003007E1301007C130012FC15787E
7E6D130013FCEBFFE06C13FCECFF806C14C06C14F06C14F81203C614FC131F9038007FFE
140700F0130114007E157E7E157C6C14FC6C14F8EB80019038F007F090B512C000F81400
38E01FF81F257DA426>I<130FA55BA45BA25B5BA25A1207001FEBFFE0B6FCA3000390C7
FCB21578A815F86CEB80F014816CEBC3E090383FFFC06D1380903803FE001D357EB425>
I<01FFEC3FC0B5EB3FFFA4000714016C80B3A35DA25DA26C5C6E4813E06CD9C03E13FF90
387FFFFC011F13F00103138030257DA435>I<B500F1B538803FFFA43D07FE000FF80003
E06C6C010715C082028015076C6E6C148015076C01C0ED0F00826E485C017FED801E5D90
273FF01E7F5B17C0DAF83E147C011F90393C3FE078037C14F8903B0FFC781FF0F0A29139
FEF00FF10107EDF9E002FF14FB6D496CB45AA24B7E6D5EA26D496C90C7FCA292C7FC6E5C
A2023E147C023C143C40257EA445>119 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop 62 556 a Fr(Knots)31 b(with)h(unique)f(minimal)d(gen)m(us)k
(Seifert)f(surface)i(and)f(depth)g(of)g(knots)1112 897
y Fq(Mark)e(Brittenham)1081 1063 y Fp(Univ)n(ersit)n(y)d(of)g(Nebrask)
-5 b(a)199 1289 y Fo(Abstra)o(ct.)38 b Fn(W)-6 b(e)31
b(describ)r(e)g(a)f(pro)r(cedure)h(for)f(creating)h(in\014nite)g
(families)c(of)j(knots)i(ha)n(ving)199 1372 y(unique)h(minimal)d(gen)n
(us)j(Seifert)f(surface)h(whic)n(h)g(cannot)h(b)r(e)f(the)g(sole)g
(compact)g(leaf)f(of)g(a)199 1455 y(depth)25 b(one)g(foliation.)1453
1833 y Fm(x)p Fq(0)1212 1933 y(Intr)n(oduction)100 2084
y Fp(Th)n(urston)j([Th1])h(has)g(sho)n(wn)g(that)g(ev)n(ery)f(compact)h
(leaf)g Fl(F)42 b Fp(of)29 b(a)g(taut)h(foliation)f Fm(F)37
b Fp(of)29 b(a)0 2184 y(3-manifold)h Fl(M)40 b Fp(has)30
b(least)h(gen)n(us)f(among)g(all)h(surfaces)f(represen)n(ting)f(the)j
(homology)d(class)0 2283 y(of)j(the)h(surface,)f(that)g(is,)h(it)g
(realizes)e(the)h(Th)n(urston)f(norm)h(of)g(that)g(surface.)50
b(Con)n(v)n(ersely)-7 b(,)0 2383 y(Gabai)33 b([Ga1])g(has)g(sho)n(wn)g
(that)h(ev)n(ery)f(Th)n(urston)g(norm)g(minimizing)h(surface)f(is)g
(the)i(sole)0 2482 y(compact)29 b(leaf)h(of)f(a)h Fk(\014nite)h(depth)f
Fp(foliation)g(of)f Fl(M)9 b Fp(.)43 b(A)30 b(foliation)f
Fm(F)38 b Fp(has)29 b(\014nite)h(depth)g(if)g(the)0 2582
y(lea)n(v)n(es)i(of)i Fm(F)42 b Fp(can)33 b(b)r(e)h(partitioned)f(in)n
(to)h(\014nitely)g(man)n(y)f(classes)g Fm(D)2186 2594
y Fj(0)2223 2582 y Fp(,)i Fm(D)2345 2594 y Fj(1)2383
2582 y Fp(,)g Fl(:)14 b(:)g(:)48 b Fp(,)p Fm(D)2673 2594
y Fi(n)2718 2582 y Fp(,)35 b(where)0 2682 y Fm(D)64 2694
y Fj(0)128 2682 y Fp(consists)25 b(of)h(the)h(compact)f(lea)n(v)n(es)f
(of)h Fm(F)8 b Fp(,)27 b(and)f(eac)n(h)f(leaf)i(in)f
Fm(D)2104 2694 y Fi(i)2158 2682 y Fp(limits)h(only)f(on)g(lea)n(v)n(es)
f(in)0 2781 y Fm(D)64 2793 y Fj(0)120 2781 y Fm([)19
b(\001)14 b(\001)g(\001)k([)h(D)447 2793 y Fi(i)p Fh(\000)p
Fj(1)559 2781 y Fp(.)37 b(The)28 b(smallest)f Fl(n)h
Fp(for)f(whic)n(h)g(this)h(is)g(true)f(is)h(called)f(the)h(depth)g(of)g
Fm(F)8 b Fp(.)100 2883 y(These)23 b(results)g(ha)n(v)n(e)f(b)r(een)i
(successfully)f(emplo)n(y)n(ed,)h(largely)d(b)n(y)j(Gabai,)g(to)f
(compute)g(the)0 2982 y(genera)28 b(of)h(man)n(y)f(classes)g(of)h
(knots,)h(suc)n(h)e(as)h(arb)r(orescen)n(t)e(knots)i([Ga2])f(and)h(the)
h(knots)f(in)0 3082 y(the)h(standard)f(knot)g(tables)g([Ga3],)h(b)n(y)f
(constructing)g(\014nite)h(depth)h(foliations)d(of)i(the)g(knot)0
3181 y(exteriors,)g(with)i(a)e(candidate)h(Seifert)g(surface)f(as)g
(sole)g(compact)h(leaf.)47 b(F)-7 b(or)30 b(eac)n(h)g(of)h(these)0
3281 y(constructions,)i(the)g(foliations)f(built)i(ha)n(v)n(e)d(depth)j
(one.)52 b(The)33 b(smallest)f(depth)h(of)g(a)f(\014nite)0
3381 y(depth)27 b(foliation)g(for)f(a)g(knot)h(\(with)g(a)f(Seifert)h
(surface)f(as)g(sole)g(compact)g(leaf)6 b(\))28 b(is)e(called)g(the)0
3480 y Fk(depth)j Fp(of)e(the)h(knot;)g(all)f(of)h(these)f(knots)g
(therefore)g(ha)n(v)n(e)g(depth)h(\(at)f(most\))h(one.)100
3581 y(Can)n(t)n(w)n(ell)38 b(and)g(Conlon)g([CC1])h(ga)n(v)n(e)e(the)i
(\014rst)g(examples)f(of)h(knots)f(with)i(arbitrarily)0
3681 y(high)27 b(depth,)g(b)n(y)g(emplo)n(ying)e(an)i(iterated)f
(Whitehead)h(doubling)g(construction.)36 b(The)26 b(large)0
3781 y(n)n(um)n(b)r(er)33 b(of)h(non-parallel)e(incompressible)g(tori)i
(in)f(suc)n(h)h(a)f(knot)g(complemen)n(t)h(forces)e(the)0
3880 y(depth)k(of)g(the)g(knot)g(to)g(b)r(e)g(corresp)r(ondingly)d
(high.)62 b(They)35 b(then)i(ask)n(ed)d(whether)i(or)f(not)0
3980 y(ev)n(ery)26 b(h)n(yp)r(erb)r(olic)h(knot,)h(b)n(y)f(con)n
(trast,)g(m)n(ust)g(ha)n(v)n(e)g(depth)h(one.)100 4081
y(Koba)n(y)n(ashi)c([Ko])i(sho)n(w)n(ed)f(that)i(the)g(answ)n(er)f(to)g
(this)h(question)g(w)n(as)e(`No',)i(b)n(y)g(exhibiting)0
4181 y(a)h(h)n(yp)r(erb)r(olic)f(knot,)h(ha)n(ving)f(a)h(unique)g
(mininal)g(gen)n(us)f(Seifert)i(surface,)e(whic)n(h)h(cannot)f(b)r(e)0
4280 y(the)32 b(leaf)f(of)h(a)f(depth)h(one)f(foliation.)48
b(It)31 b(is,)i(ho)n(w)n(ev)n(er,)d(the)i(leaf)f(of)h(a)f(depth)h(t)n
(w)n(o)e(foliation,)0 4380 y(and)d(so)g(Koba)n(y)n(ashi's)e(knot)j(has)
f(depth)h(t)n(w)n(o.)100 4481 y(In)d(this)g(pap)r(er)f(w)n(e)g(sho)n(w)
g(that)h(Koba)n(y)n(ashi's)d(example)i(is)h(not)g(alone;)g(w)n(e)f
(construct)g(large)0 4581 y(n)n(um)n(b)r(ers)31 b(of)g(knots)g(with)h
(unique)g(minimal)g(gen)n(us)e(Seifert)i(surface)e(whic)n(h)i(cannot)f
(b)r(e)g(the)0 4680 y(compact)38 b(leaf)g(of)g(a)g(depth)h(one)f
(foliation)g(of)g(the)h(knot)f(exterior.)68 b(Our)37
b(approac)n(h)g(is)h(to)p 0 4772 499 4 v 100 4860 a Fg(Key)24
b(wor)l(ds)k(and)e(phr)l(ases.)38 b Fn(knot,)24 b(Seifert)g(surface,)f
(depth)i(one.)2305 5031 y(T)n(yp)r(eset)f(b)n(y)g Ff(A)2715
5045 y(M)2791 5031 y(S)p Fn(-T)2897 5045 y(E)2936 5031
y(X)1477 5131 y(1)p eop
%%Page: 2 2
2 1 bop 0 42 a Fn(2)1187 b(Mark)24 b(Brittenham)0 241
y Fp(fo)r(cus)f(on)g(knots)g(with)g(free)g(Seifert)h(surfaces)e(of)h
(gen)n(us)f(one,)i(that)f(is,)h(Seifert)g(surfaces)e(whose)0
340 y(complemen)n(ts)k(are)g(handleb)r(o)r(dies)h(of)g(gen)n(us)f(t)n
(w)n(o.)35 b(By)27 b(fo)r(cusing)f(on)h(surfaces)f(of)g(gen)n(us)g
(one,)0 440 y(w)n(e)34 b(can)h(emplo)n(y)f(a)g(necessary)g(condition)g
(for)g(the)i(surface)e(to)g(b)r(e)h(a)g(leaf)g(of)f(a)h(depth)g(one)0
540 y(foliation,)42 b(due)d(to)g(Can)n(t)n(w)n(ell)f(and)h(Conlon)g
([CC2];)44 b(b)n(y)39 b(using)g(free)g(Seifert)g(surfaces,)i(w)n(e)0
639 y(can)32 b(c)n(hec)n(k)f(algebraically)f(that)i(their)h(condition)e
(is)i(not)f(satis\014ed,)h(using)f(Beiri-Neumann)0 739
y(Streb)r(el)26 b(in)n(v)-5 b(arian)n(ts)25 b([BNS])h(and)f(a)h
(computational)f(to)r(ol)g(due)h(to)g(Bro)n(wn)f([Bro].)35
b(Finally)-7 b(,)26 b(w)n(e)0 839 y(can)21 b(use)h(some)f(standard)f
(cut)j(and)e(paste)g(tec)n(hniques,)i(and)e(the)h(algebra)e(of)i
(normal)f(forms)g(in)0 938 y(a)j(free)f(group,)h(to)g(sho)n(w)f(that)h
(man)n(y)f(of)h(the)g(examples)g(w)n(e)f(construct)h(ha)n(v)n(e)e
(unique)j(minimal)0 1038 y(gen)n(us)i(Seifert)h(surface.)1453
1243 y Fm(x)p Fq(1)1115 1342 y(The)j(constr)n(uction)100
1493 y Fp(Our)25 b(examples)g(are)f(based)i(on)f(the)h(construction)f
(of)h(knots)f(with)h(gen)n(us)f(one)g(free)h(Seifert)0
1593 y(surfaces,)g(giv)n(en)g(in)h([Br1].)36 b(The)26
b(basic)h(idea)f(is)h(to)f(start)h(with)g(a)f(`base')g(knot)h
Fl(K)32 b Fp(with)c(gen)n(us)0 1692 y(one)g(free)g(Seifert)h(surface)e
Fl(F)12 b Fp(,)29 b(and)f(then)h(c)n(ho)r(ose)e(a)h(simple)h(lo)r(op)f
Fl(\015)33 b Fp(lying)28 b(on)g(the)h(b)r(oundary)0 1792
y(of)g(\()p Fl(S)184 1762 y Fj(3)221 1792 y Fm(n)p Fp(in)n(t)p
Fl(N)9 b Fp(\()p Fl(F)j Fp(\)\))29 b(=)f Fl(X)7 b Fp(\()p
Fl(F)12 b Fp(\),)29 b(whic)n(h)f(b)r(ounds)h(a)f(disk)h(in)g
Fl(N)9 b Fp(\()p Fl(F)j Fp(\);)29 b(see)g(Figure)f(1.)39
b(W)-7 b(e)29 b(c)n(ho)r(ose)0 1892 y(curv)n(es)h Fl(\015)35
b Fp(lying)c(on)g(the)g(four-punctured)g(sphere)f(sho)n(wn)g(there;)j
(suc)n(h)e(curv)n(es)f(will)h(alw)n(a)n(ys)0 1991 y(b)r(ound)k(disks)f
(in)g Fl(N)9 b Fp(\()p Fl(F)j Fp(\).)58 b(Because)33
b Fl(\015)39 b Fp(is)c(unknotted)g(in)f Fl(N)9 b Fp(\()p
Fl(F)j Fp(\),)37 b(hence)d(in)h Fl(S)2533 1961 y Fj(3)2570
1991 y Fp(,)h(1)p Fl(=n)d Fp(Dehn)0 2091 y(surgery)i(on)h
Fl(\015)42 b Fp(will)37 b(yield)f Fl(S)943 2061 y Fj(3)1017
2091 y Fp(bac)n(k)g(again.)63 b(The)36 b(knot)h Fl(K)6
b Fp(,)38 b(and)f(the)g(Seifert)g(surface)f Fl(F)12 b
Fp(,)0 2190 y(are)38 b(carried)f(under)h(the)h(surgery)e(to)i(a)f(new)h
(knot)f(and)h(Seifert)g(surface)e Fl(K)2526 2202 y Fi(n)2610
2190 y Fp(and)h Fl(F)2835 2202 y Fi(n)2920 2190 y Fp(in)0
2290 y Fl(\015)5 b Fp(\(1)p Fl(=n)p Fp(\))22 b(=)h Fl(S)412
2260 y Fj(3)449 2290 y Fp(.)37 b(By)27 b([Br1,)g(pp.)37
b(63-64],)25 b(the)j(surfaces)f Fl(F)1774 2302 y Fi(n)1847
2290 y Fp(are)g(all)g(free.)594 3482 y @beginspecial
76 @llx 34 @lly 548 @urx 318 @ury 2160 @rwi @setspecial
%%BeginDocument: d_fig1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig1.eps)
%%CreationDate: (9/10/2002) (10:09 AM)
%%BoundingBox: 76 34 548 318
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%+ Symbol
%%DocumentNeededFonts: Helvetica
%%+ Symbol
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 18 16 594 778
%AI3_DocumentPreview: Header
%%PageOrigin:18 16
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
%%IncludeFont: Symbol
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/space
/exclam
/universal
/numbersign
/existential
/percent
/ampersand
/suchthat
/parenleft
/parenright
/asteriskmath
/plus
/comma
/minus
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/congruent
/Alpha
/Beta
/Chi
/Delta
/Epsilon
/Phi
/Gamma
/Eta
/Iota
/theta1
/Kappa
/Lambda
/Mu
/Nu
/Omicron
/Pi
/Theta
/Rho
/Sigma
/Tau
/Upsilon
/sigma1
/Omega
/Xi
/Psi
/Zeta
/bracketleft
/therefore
/bracketright
/perpendicular
/underscore
/radicalex
/alpha
/beta
/chi
/delta
/epsilon
/phi
/gamma
/eta
/iota
/phi1
/kappa
/lambda
/mu
/nu
/omicron
/pi
/theta
/rho
/sigma
/tau
/upsilon
/omega1
/omega
/xi
/psi
/zeta
/braceleft
/bar
/braceright
/similar
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Euro
/Upsilon1
/minute
/lessequal
/fraction
/infinity
/florin
/club
/diamond
/heart
/spade
/arrowboth
/arrowleft
/arrowup
/arrowright
/arrowdown
/degree
/plusminus
/second
/greaterequal
/multiply
/proportional
/partialdiff
/bullet
/divide
/notequal
/equivalence
/approxequal
/ellipsis
/arrowvertex
/arrowhorizex
/carriagereturn
/aleph
/Ifraktur
/Rfraktur
/weierstrass
/circlemultiply
/circleplus
/emptyset
/intersection
/union
/propersuperset
/reflexsuperset
/notsubset
/propersubset
/reflexsubset
/element
/notelement
/angle
/gradient
/registerserif
/copyrightserif
/trademarkserif
/product
/radical
/dotmath
/logicalnot
/logicaland
/logicalor
/arrowdblboth
/arrowdblleft
/arrowdblup
/arrowdblright
/arrowdbldown
/lozenge
/angleleft
/registersans
/copyrightsans
/trademarksans
/summation
/parenlefttp
/parenleftex
/parenleftbt
/bracketlefttp
/bracketleftex
/bracketleftbt
/bracelefttp
/braceleftmid
/braceleftbt
/braceex
/.notdef
/angleright
/integral
/integraltp
/integralex
/integralbt
/parenrighttp
/parenrightex
/parenrightbt
/bracketrighttp
/bracketrightex
/bracketrightbt
/bracerighttp
/bracerightmid
/bracerightbt
/.notdef
/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 R
0 0 0 1 K
0 i
0 J 0 j 3 w 4 M []0 d
%AI3_Note:
0 D
177 173 m
S
0 O
0 0 0 0.43 k
1 w
204.001 73.999 m
195.0005 82.999 186.0005 92 168 92 c
132 92 114 110 114 182 c
114 254 168 272 240 272 c
275.999 272 293.999 227.0029 311.998 182.0039 C
312 182 L
330 227 348 272 384 272 c
456 272 510 254 510 182 c
510 110 492 92 456 92 c
438 92 429 83 420 74 C
419.9971 74.0029 L
428.998 65.002 437.998 56 456 56 c
483 56 546 83 546 146 c
546 218 546 137 546 209 c
546 272 465 308 384 308 c
348 308 276 308 240 308 c
150 308 78 263 78 200 c
78 128 78 218 78 146 c
78 83 132 56 168 56 c
186 56 195 65 204 74 C
204.001 73.999 L
f
0 0 0 0.29 k
345.2227 114.5371 m
355.6641 100.8125 368.0693 92 384 92 c
401.998 92 410.998 83.002 419.9971 74.0029 C
420 74 L
411 65 402 56 384 56 c
348 56 276 56 240 56 c
222.0005 56 213.0005 64.999 204.001 73.999 C
204 74 L
213 83 222 92 240 92 c
276 92 294 137 312 182 C
311.998 182.0039 L
322.0332 156.916 332.0684 131.8271 345.2227 114.5371 c
F
0 R
0 0 0 1 K
3 w
177 173 m
S
213.7549 83 m
220.3374 88.166 228.2515 92 240 92 c
271.1709 92 288.8477 125.7373 304.7129 164 c
S
194.2466 65 m
201.252 70.4971 206.7495 77.5029 213.7549 83 c
S
157.418 293.7813 m
109.7417 275.7246 78 241.8301 78 200 c
78 128 78 218 78 146 c
78 83 132 56 168 56 c
179.749 56 187.6636 59.834 194.2466 65 c
S
1 w
171.5962 298.542 m
166.7324 297.1064 162.0015 295.5166 157.418 293.7813 c
N
0 R
0 0 0 1 K
3 w
292.5 308 m
272.4434 308 253.6382 308 240 308 c
215.502 308 192.3379 304.666 171.5962 298.542 c
S
1 w
308.5 308 m
303.1279 308 297.7705 308 292.5 308 c
N
0 R
0 0 0 1 K
3 w
449.6396 299.8916 m
428.9102 305.2334 406.4551 308 384 308 c
365.2217 308 336.6494 308 308.5 308 c
S
1 w
464.5049 295.5166 m
459.6699 297.127 454.7061 298.5859 449.6396 299.8916 c
N
0 R
0 0 0 1 K
3 w
429.7529 65.001 m
436.3359 59.835 444.251 56 456 56 c
483 56 546 83 546 146 c
546 218 546 137 546 209 c
546 250.2666 511.2461 279.9482 464.5049 295.5166 c
S
1 w
410.998 82.4004 m
417.6494 77 423.001 70.2998 429.7529 65.001 c
N
0 R
0 0 0 1 K
3 w
344.0869 116.0586 m
354.7627 101.4668 367.4883 92 384 92 c
396.1992 92 404.2646 87.8662 410.998 82.4004 c
S
1 w
332.6318 134.8223 m
336.2148 127.9795 340.001 121.6436 344.0869 116.0586 c
N
0 R
0 0 0 1 K
3 w
319.2832 164.0088 m
323.5283 153.7695 327.9033 143.8545 332.6318 134.8223 c
S
300.8975 209.0059 m
307.2109 194.4688 313.1104 178.8965 319.2832 164.0088 c
S
293.3984 225.2031 m
295.9854 220.0225 298.4717 214.5908 300.8975 209.0059 c
S
1 w
280.8896 246.584 m
285.375 240.248 289.5 233.0098 293.3984 225.2031 c
N
0 R
0 0 0 1 K
3 w
179.8638 265.8799 m
197.5225 270.3066 217.9146 272 240 272 c
257.0186 272 270.0146 261.9434 280.8896 246.584 c
S
1 w
164.2256 260.9316 m
169.1538 262.8662 174.377 264.5049 179.8638 265.8799 c
N
0 R
0 0 0 1 K
3 w
194.9976 82.4004 m
188.2646 87.8662 180.1992 92 168 92 c
132 92 114 110 114 182 c
114 225.0527 133.3071 248.7979 164.2256 260.9316 c
S
1 w
213.7529 65.001 m
207.0005 70.2998 201.6489 77 194.9976 82.4004 c
N
0 R
0 0 0 1 K
3 w
319 56 m
289.7383 56 259.5566 56 240 56 c
228.2505 56 220.3359 59.835 213.7529 65.001 c
S
1 w
334.5 56 m
329.4063 56 324.2178 56 319 56 c
N
0 R
0 0 0 1 K
3 w
411 65.6025 m
404.2666 60.1348 396.2012 56 384 56 c
371.0439 56 353.4258 56 334.5 56 c
S
429.7529 83 m
423.002 77.7012 417.6504 71.002 411 65.6025 c
S
457.0938 261.9434 m
489.5723 250.1387 510 226.2832 510 182 c
510 110 492 92 456 92 c
444.251 92 436.3359 88.166 429.7529 83 c
S
1 w
442.7217 266.2275 m
447.7344 265.0215 452.5332 263.6016 457.0938 261.9434 c
N
0 R
0 0 0 1 K
3 w
323.1006 209.001 m
338.04 243.4004 355.2998 272 384 272 c
405.498 272 425.3916 270.3955 442.7217 266.2275 c
S
1 w
304.7129 164 m
310.8867 178.8887 316.7861 194.4629 323.1006 209.001 c
N
0 R
0 0 0 1 K
4 w
185.5508 260.9883 m
184.8438 257.1289 183.4282 254.6055 181.3799 254.1484 c
176.5288 253.0664 169.9629 263.9863 166.7163 278.54 c
163.4688 293.0938 164.7681 305.7695 169.6201 306.8525 c
170.6362 307.0791 171.7275 306.7793 172.8481 306.0293 c
S
1 w
185.5728 275.0703 m
186.2554 269.583 186.2266 264.6758 185.5508 260.9883 c
N
0 R
0 0 0 1 K
4 w [2 4 ]0 d
180.1992 295.3037 m
181.7993 291.6094 183.2197 287.2295 184.2837 282.4609 c
184.8501 279.9229 185.2778 277.4424 185.5728 275.0703 c
S
1 w []0 d
172.8481 306.0293 m
175.3232 304.373 177.9399 300.5205 180.1992 295.3037 c
N
436.7979 275.4609 m
436.1172 269.1865 436.3896 263.7539 437.5127 260.1602 c
N
0 R
0 0 0 1 K
4 w [2 4 ]0 d
441.2432 294.1885 m
440.0762 291.1035 439.04 287.6484 438.2168 283.9609 c
437.5615 281.0244 437.0908 278.1641 436.7979 275.4609 c
S
1 w []0 d
448.999 307.0439 m
446.3213 304.8613 443.5303 300.2344 441.2432 294.1885 c
N
0 R
0 0 0 1 K
4 w
437.5127 260.1602 m
438.3047 257.626 439.5186 256.0059 441.1201 255.6484 c
445.9717 254.5664 452.5371 265.4863 455.7842 280.04 c
459.0313 294.5938 457.7324 307.2695 452.8799 308.3525 c
451.667 308.623 450.3477 308.1436 448.999 307.0439 c
S
1 w
231.8848 85.6865 m
232.6001 90.1514 233.7134 93.9346 235.0859 96.624 c
N
0 R
0 0 0 1 K
2 w [2 4 ]0 d
231.9463 61.9355 m
231.3408 65.5664 231 69.6641 231 74 c
231 78.1865 231.3179 82.1504 231.8848 85.6865 c
S
1 w []0 d
235.2192 51.1201 m
233.8242 53.749 232.687 57.4932 231.9463 61.9355 c
N
0 R
0 0 0 1 K
2 w
235.0859 96.624 m
236.4985 99.3916 238.1865 101 240 101 c
244.9707 101 249 88.9121 249 74 c
249 59.0879 244.9707 47 240 47 c
238.2432 47 236.6045 48.5098 235.2192 51.1201 c
S
1 w
392.168 62.6514 m
391.3691 57.4844 390.042 53.2031 388.3945 50.4316 c
N
0 R
0 0 0 1 K
2 w [2 4 ]0 d
392.1162 85.6865 m
392.6826 82.1504 393 78.1865 393 74 c
393 69.9463 392.7021 66.1016 392.168 62.6514 c
S
1 w []0 d
389.1699 96.1055 m
390.4258 93.458 391.4453 89.8721 392.1162 85.6865 c
N
0 R
0 0 0 1 K
2 w
388.3945 50.4316 m
387.0947 48.2461 385.5957 47 384 47 c
379.0293 47 375 59.0879 375 74 c
375 88.9121 379.0293 101 384 101 c
385.9238 101 387.707 99.1895 389.1699 96.1055 c
S
388.5049 266.6191 m
387.1797 264.3174 385.6416 263 384 263 c
379.0293 263 375 275.0879 375 290 c
375 304.9121 379.0293 317 384 317 c
385.5703 317 387.0469 315.7939 388.332 313.6729 c
S
1 w
392.293 279.4902 m
391.5283 274.0654 390.1895 269.5469 388.5049 266.6191 c
N
0 R
0 0 0 1 K
2 w [2 4 ]0 d
391.9512 302.6582 m
392.6211 298.8828 393 294.5742 393 290 c
393 286.2725 392.748 282.7207 392.293 279.4902 c
S
1 w []0 d
388.332 313.6729 m
389.8662 311.1396 391.1279 307.3027 391.9512 302.6582 c
N
0 R
0 0 0 1 K
2 w
235.814 313.9082 m
237.0645 315.8828 238.4888 317 240 317 c
244.9707 317 249 304.9121 249 290 c
249 275.0879 244.9707 263 240 263 c
238.187 263 236.499 264.6084 235.0864 267.375 c
S
1 w
232.002 302.3916 m
232.8491 307.3027 234.1836 311.334 235.814 313.9082 c
N
0 R
0 0 0 1 K
2 w [2 4 ]0 d
231.834 278.6328 m
231.2988 282.0879 231 285.9395 231 290 c
231 294.4668 231.3618 298.6807 232.002 302.3916 c
S
1 w []0 d
235.0864 267.375 m
233.6807 270.1279 232.5474 274.0283 231.834 278.6328 c
N
0 R
0 0 0 1 K
2 w
240 263 m
258 263 285 218 285 182 c
285 146 258 101 240 101 c
S
384 263 m
366 263 339 218 339 182 c
339 146 366 101 384 101 c
S
384 317 m
366 317 258 317 240 317 c
S
384 47 m
366 47 258 47 240 47 c
S
0 To
1 0 0 1 178 233.5 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Symbol 24 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(a) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 441 231.5 0 Tp
TP
0 Tr
(b) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 341.5 80 0 Tp
TP
0 Tr
(g) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
3 w
287 183.5 m
287 207.5 285 314.5 311.5 315.5 c
S
[4 6 ]0 d
287.0098 141 m
286.6045 159.7109 287 175.9551 287 183.5 c
S
1 w []0 d
288.4023 111.4355 m
287.6279 121.3828 287.2158 131.5088 287.0098 141 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
296.2432 66.2842 m
292.0752 78.167 289.7168 94.5439 288.4023 111.4355 c
S
1 w []0 d
304.3857 51.8896 m
301.1025 55.0752 298.4258 60.0635 296.2432 66.2842 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
313.5 48 m
310.0361 47.9434 307.0166 49.3379 304.3857 51.8896 c
S
[]0 d
337 184 m
337 152.5 345.6357 48.5264 313.5 48 c
S
[4 6 ]0 d
336.2051 222.5332 m
336.8838 206.7881 337 192.7295 337 184 c
S
1 w []0 d
334.6182 248.0557 m
335.3428 239.4346 335.8506 230.7539 336.2051 222.5332 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
325.6299 299.6904 m
330.2275 286.792 332.9785 267.5752 334.6182 248.0557 c
S
1 w []0 d
318.4775 312.4795 m
321.2559 309.7598 323.6191 305.3291 325.6299 299.6904 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
311.5 315.5 m
314.0762 315.5977 316.3936 314.5195 318.4775 312.4795 c
S
0 To
1 0 0 1 520 43 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w []0 d
/_Helvetica 36 Tf
(K) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 91 208 0 Tp
TP
0 Tr
(F) Tx 1 0 Tk
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1343 3582 a(Figure)g(1)100 3735 y(In)h(an)n(ticipation)g
(of)g(the)h(next)g(sections,)f(to)g(get)g(the)h(additional)f(prop)r
(erties)g(on)g Fl(K)2782 3747 y Fi(n)2855 3735 y Fp(and)0
3834 y Fl(F)53 3846 y Fi(n)126 3834 y Fp(w)n(e)f(desire,)g(w)n(e)h
(will)g(also)e(imp)r(ose)i(three)f(additional)g(conditions)g(on)g
Fl(\015)33 b Fp(\(and)27 b Fl(K)6 b Fp(\).)100 3935 y(First,)31
b(1)p Fl(=p)f Fp(and)h(1)p Fl(=q)i Fp(surgeries)c(along)h(the)i(curv)n
(es)d Fl(\013)j Fp(and)f Fl(\014)k Fp(lab)r(elled)c(in)h(Figure)e(1)h
(will)0 4035 y(simply)i(add)g(full)h(t)n(wists)f(to)g
Fl(K)6 b Fp(,)34 b(disjoin)n(t)g(from)e(the)i(region)e(of)h
Fl(@)5 b(X)i Fp(\()p Fl(F)12 b Fp(\))33 b(where)f(w)n(e)h(will)g(b)r(e)
0 4134 y(c)n(ho)r(osing)f Fl(\015)5 b Fp(,)34 b(and)g(so)e(will)i(not)f
(m)n(uc)n(h)g(a\013ect)h(the)f(construction.)54 b(W)-7
b(e)33 b(can,)i(in)e(fact,)i(think)0 4234 y(of)k(ourselv)n(es)e(as)h
(carrying)f(out)i(a)f(family)p 1158 4247 227 4 v 39 w(of)h
(constructions,)h(one)f(for)f(eac)n(h)g(initial)h(knot)0
4334 y Fl(K)6 b Fp(\(1)p Fl(=p;)14 b Fp(1)p Fl(=q)s Fp(\))36
b(=)j Fl(K)639 4346 y Fi(p;q)729 4334 y Fp(.)65 b(F)-7
b(or)36 b(notational)g(con)n(v)n(enience,)i(w)n(e)f(will)g(routinely)f
(suppress)g(the)0 4433 y(fact)29 b(that)g Fl(K)417 4445
y Fi(n)491 4433 y Fp(really)f(also)g(dep)r(ends)h(on)g
Fl(p)g Fp(and)g Fl(q)s Fp(,)g(that)h(is,)f(that)g(the)h(base)e(knot)h
Fl(K)34 b Fp(w)n(e)29 b(are)0 4533 y(w)n(orking)23 b(with)i(really)e
(dep)r(ends)i(on)g(these)f(t)n(w)n(o)g(parameters.)34
b(W)-7 b(e)25 b(need)g(to)f(k)n(eep)g(these)h(extra)0
4633 y(parameters)33 b(in)h(mind,)j(ho)n(w)n(ev)n(er,)d(b)r(ecause)g
(large)f(n)n(um)n(b)r(ers)h(of)h(t)n(wists)f(\(where)g(here)g(large)0
4732 y(essen)n(tially)f(means)h Fl(p;)14 b(q)36 b Fm(\025)e
Fp(2\))g(will,)i(w)n(e)d(shall)h(see,)h(insure)f(that)g(the)h
(resulting)e(knots)h Fl(K)2944 4744 y Fi(n)0 4832 y Fp(ha)n(v)n(e)g
(unique)h(minimal)g(gen)n(us)f(Seifert)h(surfaces.)58
b(W)-7 b(e)35 b(assume)f(the)h(t)n(wists)g(are)f(added)h(so)0
4932 y(that)26 b(they)f(add)g(to,)h(rather)e(than)h(cancel)g(out,)h
(the)f(half-t)n(wists)g(already)f(presen)n(t)g(in)i Fl(K)6
b Fp(.)36 b(Our)0 5031 y(\014rst)27 b(condition,)g(therefore,)g(is)g
(that)g(our)g(construction)f(of)i(the)f(knots)g Fl(K)2347
5043 y Fi(n)2419 5031 y Fp(is)g(actually)g(built)p eop
%%Page: 3 3
3 2 bop 750 42 a Fn(Unique)24 b(minimal)c(gen)n(us)25
b(Seifert)e(surfaces)h(and)g(depth)693 b(3)0 241 y Fp(up)r(on)28
b(the)g(base)f(knots)g Fl(K)833 253 y Fi(p;q)923 241
y Fp(.)100 352 y(Ultimately)h(w)n(e)f(will)h(v)n(erify)e(nearly)h(all)g
(of)h(the)g(prop)r(erties)e(w)n(e)i(need)f(to)h(establish)f(ab)r(out)0
452 y Fl(K)71 464 y Fi(n)151 452 y Fp(and)36 b Fl(F)374
464 y Fi(n)455 452 y Fp(b)n(y)f(making)g(computations)g(in)h
Fl(\031)1556 464 y Fj(1)1594 452 y Fp(\()p Fl(X)7 b Fp(\()p
Fl(F)1787 464 y Fi(n)1832 452 y Fp(\)\))36 b(=)g Fl(F)12
b Fp(\()p Fl(a;)i(b)p Fp(\),)37 b(the)f(free)g(group)e(on)0
551 y(t)n(w)n(o)f(letters)h Fl(a)g Fp(and)g Fl(b)p Fp(.)55
b(This)34 b(task)f(will)i(b)r(e)f(m)n(uc)n(h)g(easier)e(using)i(a)f
(picture)h(of)g Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\))34 b(as)f(a)0
651 y(standard)25 b(handleb)r(o)r(dy)-7 b(,)26 b(with)g
Fl(K)6 b Fp(,)26 b Fl(\013)p Fp(,)g Fl(\014)t Fp(,)h(and)e
Fl(\015)31 b Fp(dra)n(wn)24 b(on)i(its)g(b)r(oundary)e(\(where\\)p
Fl(K)6 b Fp(")24 b(here)0 750 y(really)g(means)h(a)g(curv)n(e,)g
(isotopic)g(to)g Fl(K)6 b Fp(,)25 b(on)g Fl(@)5 b(X)i
Fp(\()p Fl(F)12 b Fp(\))25 b(whic)n(h)h(cob)r(ounds)e(an)i(ann)n(ulus)e
(with)i Fl(K)0 850 y Fp(in)31 b Fl(N)9 b Fp(\()p Fl(F)j
Fp(\)\).)48 b(By)31 b(c)n(ho)r(osing)e(the)j(\\ob)n(vious")c(\(v)n
(ertical\))j(compressing)e(disks)i(as)f(the)h(cores)f(of)0
950 y(our)d(1-handles)f(in)i Fl(X)7 b Fp(\()p Fl(F)12
b Fp(\))27 b(to)h(serv)n(e)e(as)h(the)h(standard)e(\(horizon)n(tal\))h
(cores)f(of)h(the)h(1-handles)0 1049 y(for)33 b(our)g(handleb)r(o)r(dy)
-7 b(,)36 b(w)n(e)d(obtain)h(Figure)f(2)g(\(see)h([Br1]\).)55
b(W)-7 b(e)34 b(ha)n(v)n(e)e(dra)n(wn)h(the)h(curv)n(e)f
Fl(\015)0 1149 y Fp(c)n(hosen)25 b(in)i(Figure)e(1,)h(but)h(a)f(v)n
(ery)f(large)g(class)g(of)h(curv)n(es)f(lying)h(in)g(the)h(4-punctured)
e(sphere)0 1249 y(complemen)n(tary)34 b(to)i Fl(\013)g
Fp(and)g Fl(\014)k Fp(will)c(w)n(ork)e(for)h(our)g(purp)r(oses.)60
b(In)36 b(some)f(sense,)i(the)f(b)r(est)0 1348 y(approac)n(h)24
b(in)j(fact)f(is)g(to)g(\014nd)h(the)f(necessary)f(curv)n(e)g
Fl(\015)31 b Fp(in)26 b(this)h(standard)e(picture,)h(and)g(then)0
1448 y(determine)i(whic)n(h)f(curv)n(e)g(on)g Fl(@)5
b(X)i Fp(\()p Fl(F)12 b Fp(\))23 b Fm(\022)f Fl(S)1382
1418 y Fj(3)1447 1448 y Fp(it)28 b(came)f(from.)-6 2421
y @beginspecial 61 @llx 473 @lly 1238 @urx 808 @ury 3600
@rwi @setspecial
%%BeginDocument: d_fig2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig2.eps)
%%CreationDate: (9/10/2002) (10:28 AM)
%%BoundingBox: 61 473 1238 808
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: Helvetica
%%+ Symbol
%%DocumentNeededFonts: Helvetica
%%+ Symbol
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 18 16 594 778
%AI3_DocumentPreview: Header
%%PageOrigin:18 16
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
 end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_cmykcolor eq
	{
 end
	} if
} def
/setcmykcolor
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
%%IncludeFont: Symbol
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/space
/exclam
/universal
/numbersign
/existential
/percent
/ampersand
/suchthat
/parenleft
/parenright
/asteriskmath
/plus
/comma
/minus
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/congruent
/Alpha
/Beta
/Chi
/Delta
/Epsilon
/Phi
/Gamma
/Eta
/Iota
/theta1
/Kappa
/Lambda
/Mu
/Nu
/Omicron
/Pi
/Theta
/Rho
/Sigma
/Tau
/Upsilon
/sigma1
/Omega
/Xi
/Psi
/Zeta
/bracketleft
/therefore
/bracketright
/perpendicular
/underscore
/radicalex
/alpha
/beta
/chi
/delta
/epsilon
/phi
/gamma
/eta
/iota
/phi1
/kappa
/lambda
/mu
/nu
/omicron
/pi
/theta
/rho
/sigma
/tau
/upsilon
/omega1
/omega
/xi
/psi
/zeta
/braceleft
/bar
/braceright
/similar
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Euro
/Upsilon1
/minute
/lessequal
/fraction
/infinity
/florin
/club
/diamond
/heart
/spade
/arrowboth
/arrowleft
/arrowup
/arrowright
/arrowdown
/degree
/plusminus
/second
/greaterequal
/multiply
/proportional
/partialdiff
/bullet
/divide
/notequal
/equivalence
/approxequal
/ellipsis
/arrowvertex
/arrowhorizex
/carriagereturn
/aleph
/Ifraktur
/Rfraktur
/weierstrass
/circlemultiply
/circleplus
/emptyset
/intersection
/union
/propersuperset
/reflexsuperset
/notsubset
/propersubset
/reflexsubset
/element
/notelement
/angle
/gradient
/registerserif
/copyrightserif
/trademarkserif
/product
/radical
/dotmath
/logicalnot
/logicaland
/logicalor
/arrowdblboth
/arrowdblleft
/arrowdblup
/arrowdblright
/arrowdbldown
/lozenge
/angleleft
/registersans
/copyrightsans
/trademarksans
/summation
/parenlefttp
/parenleftex
/parenleftbt
/bracketlefttp
/bracketleftex
/bracketleftbt
/bracelefttp
/braceleftmid
/braceleftbt
/braceex
/.notdef
/angleright
/integral
/integraltp
/integralex
/integralbt
/parenrighttp
/parenrightex
/parenrightbt
/bracketrighttp
/bracketrightex
/bracketrightbt
/bracerighttp
/bracerightmid
/bracerightbt
/.notdef
/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 O
0 0 0 0.15 k
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
234.0898 698.9326 m
252.0898 698.9326 279.25 656.9414 279.25 620.9414 c
279.25 584.9414 252.7559 538.4326 234.7559 538.4326 C
232.0898 538.2666 L
169.0894 538.2666 L
163.5825 538.3447 L
162.9829 538.4023 162.374 538.4326 161.7559 538.4326 c
125.7559 538.4326 111.4224 549.2666 111.4224 621.2656 c
111.4224 664.3184 143.8374 680.2988 174.7559 692.4326 C
177.2559 692.4326 L
194.6045 696.7813 211.4492 698.8809 233.0879 698.9395 C
234.0898 698.9326 L
f
0 R
0 0 0 1 K
3 w
172.4941 612.0088 m
S
172.4941 612.0088 m
S
4 w [4 6 ]0 d
266.4443 549.5923 m
280.1494 560.752 290.5161 579.6372 300.207 603.0088 c
S
1 w []0 d
250.3159 540.7251 m
256.2017 542.5913 261.5371 545.5967 266.4443 549.5923 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
235.4941 538.5088 m
240.8076 538.5088 245.729 539.271 250.3159 540.7251 c
S
[]0 d
209.249 522.0088 m
215.8315 527.1748 223.7456 538.5088 235.4941 538.5088 c
S
189.7407 504.0088 m
196.7461 509.5059 202.2437 516.5117 209.249 522.0088 c
S
163.5 487.5 m
175.249 487.5 183.1577 498.8428 189.7407 504.0088 c
S
1 w
167.0903 737.5508 m
162.2266 736.1152 157.4956 734.5254 152.9121 732.79 c
N
0 R
0 0 0 1 K
4 w
288.4941 753.5088 m
268.4375 753.5088 248.6382 753 235 753 c
210.502 753 185.7417 752.624 165 746.5 C
164 746.5 L
116.3237 728.4434 63.4941 680.1729 63.4941 638.3428 c
63.4941 566.3428 63.4941 656.3428 63.4941 584.3428 c
63.4941 521.3428 127.5 487.5 163.5 487.5 c
S
304.4941 753.5088 m
299.1221 753.5088 293.7646 753.5088 288.4941 753.5088 c
S
1 w
459.999 734.5254 m
455.1641 736.1357 450.2002 737.5947 445.1338 738.9004 c
N
0 R
0 0 0 1 K
4 w
451.4941 487.0088 m
478.4941 487.0088 548.8281 521.3418 548.8281 584.3418 c
548.8281 656.3418 548.8281 575.3418 548.8281 647.3418 c
548.8281 688.6084 497.2412 732.9316 450.5 748.5 C
449 749 L
428.2705 754.3418 401.4551 752.5 379 752.5 c
360.2217 752.5 332.6436 753.5088 304.4941 753.5088 c
S
[4 6 ]0 d
425.2471 504.0098 m
431.8301 498.8438 439.7451 487.0088 451.4941 487.0088 c
S
1 w []0 d
406.4922 521.4092 m
413.1436 516.0088 418.4951 509.3086 425.2471 504.0098 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
379.4941 537.5088 m
391.6934 537.5088 399.7588 526.875 406.4922 521.4092 c
S
[]0 d
339.5811 555.0674 m
350.2568 540.4756 362.9824 537.5088 379.4941 537.5088 c
S
276.3838 685.5928 m
280.8691 679.2568 284.9941 672.0186 288.8926 664.2119 c
291.4795 659.0313 293.9658 653.5996 296.3916 648.0146 c
302.7056 633.4775 308.6045 617.9053 314.7773 603.0176 c
319.0225 592.7783 323.3975 582.8633 328.126 573.8311 c
331.708 566.9878 335.4951 560.6523 339.5811 555.0674 c
S
234.3325 699.0073 m
234.7192 699.0083 235.1064 699.0088 235.4941 699.0088 c
252.5127 699.0088 265.5088 700.9521 276.3838 685.5928 c
S
1 w
159.7197 699.9404 m
164.6479 701.875 169.8711 703.5137 175.3579 704.8887 c
N
0 R
0 0 0 1 K
4 w
163 538.5 m
127 538.5 112.6665 549.334 112.6665 621.3335 c
112.6665 664.3862 145.0815 680.3662 176 692.5 C
178.5 692.5 L
195.8486 696.8491 212.6938 698.9487 234.3325 699.0073 c
S
[4 6 ]0 d
190.4917 521.4092 m
183.7588 526.875 175.1992 538.5 163 538.5 c
S
1 w []0 d
209.2471 504.0098 m
202.4946 509.3086 197.1431 516.0088 190.4917 521.4092 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
235.9941 488.5088 m
224.2446 488.5088 215.8301 498.8438 209.2471 504.0098 c
S
[]0 d
315.9941 488.0088 m
286.7324 488.0088 255.5508 488.5088 235.9941 488.5088 c
S
379.6611 487.5088 m
366.7051 487.5088 321.2119 488.0088 315.9941 488.0088 c
S
406.4941 504.6113 m
399.7607 499.1436 391.8623 487.5088 379.6611 487.5088 c
S
425.2471 522.0088 m
418.4961 516.71 413.1445 510.0107 406.4941 504.6113 c
S
1 w
438.2158 705.2363 m
443.2285 704.0303 448.0273 702.6104 452.5879 700.9521 c
N
0 R
0 0 0 1 K
4 w
376.7188 700.9185 m
377.6318 700.9785 378.5566 701.0088 379.4941 701.0088 c
400.9922 701.0088 419.1699 698.668 436.5 694.5 C
439 694 L
471.4785 682.1953 505.4941 665.292 505.4941 621.0088 c
505.4941 549.0088 486 537 450 537 c
438.251 537 431.8301 527.1748 425.2471 522.0088 c
S
[4 6 ]0 d
347.7246 690.3555 m
355.9756 696.6382 365.4404 700.1748 376.7188 700.9185 c
S
1 w []0 d
333.4912 675.314 m
337.8564 681.3994 342.5518 686.417 347.7246 690.3555 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
318.5947 648.0098 m
323.2441 658.7148 328.1182 667.8232 333.4912 675.314 c
S
1 w []0 d
300.207 603.0088 m
306.3809 617.8975 312.2803 633.4717 318.5947 648.0098 c
N
0 R
0 0 0 1 K
4 w
182.0449 700.4971 m
181.3379 696.6377 179.9224 694.1143 177.874 693.6572 c
173.0229 692.5752 166.457 703.4951 163.2104 718.0488 c
159.9629 732.6025 161.2622 745.2783 166.1143 746.3613 c
167.1304 746.5879 168.2217 746.2881 169.3423 745.5381 c
S
1 w
181.0669 714.0791 m
181.7495 708.5918 181.7207 703.6846 181.0449 699.9971 c
N
0 R
0 0 0 1 K
4 w [2 4 ]0 d
175.6934 734.3125 m
177.2935 730.6182 178.7139 726.2383 179.7778 721.4697 c
180.3442 718.9316 180.772 716.4512 181.0669 714.0791 c
S
1 w []0 d
168.3423 745.0381 m
170.8174 743.3818 173.4341 739.5293 175.6934 734.3125 c
N
432.292 714.4697 m
431.6113 708.1953 431.8838 702.7627 433.0068 699.1689 c
N
0 R
0 0 0 1 K
4 w [2 4 ]0 d
436.7373 733.1973 m
435.5703 730.1123 434.5342 726.6572 433.7109 722.9697 c
433.0557 720.0332 432.585 717.1729 432.292 714.4697 c
S
1 w []0 d
444.4932 746.0527 m
441.8154 743.8701 439.0244 739.2432 436.7373 733.1973 c
N
0 R
0 0 0 1 K
4 w
431.0068 700.1689 m
431.7988 697.6348 433.0127 696.0146 434.6143 695.6572 c
439.4658 694.5752 446.0313 705.4951 449.2783 720.0488 c
452.5254 734.6025 451.2266 747.2783 446.374 748.3613 c
445.1611 748.6318 443.8418 748.1523 442.4932 747.0527 c
S
2 w
235.3335 699 m
253.3335 699 280.4941 657.0088 280.4941 621.0088 c
280.4941 585.0088 254 538.5 236 538.5 c
S
376.333 700.3335 m
358.333 700.3335 334.4941 657.0088 334.4941 621.0088 c
334.4941 585.0088 361.667 537.5 379.667 537.5 c
S
0 To
1 0 0 1 142.9941 705.0088 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Symbol 24 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(a) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 456.4941 710.5088 0 Tp
TP
0 Tr
(b) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 287.9941 504.0088 0 Tp
TP
0 Tr
(g) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 515.4941 482.0088 0 Tp
TP
0 Tr
/_Helvetica 36 Tf
(K) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 349.9941 717.5088 0 Tp
TP
0 Tr
(N\(F\)) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
2 w
170.3335 538.334 m
233.3335 538.334 l
S
168 487.5 m
231 487.5 l
S
383 537.499 m
446 537.499 l
S
380 487.333 m
449.666 486.5 l
S
0 To
1 0 0 1 183 610 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 24 Tf
(D) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 199.5 606 0 Tp
TP
0 Tr
/_Helvetica 14 Tf
(1) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
3 w
292 754.3335 m
326.333 755.3335 347.5059 688.3408 339.002 653.333 c
S
[4 6 ]0 d
255.353 708.6904 m
256.9395 730.7563 269.2588 753.6714 292 754.3335 c
S
1 w []0 d
256.459 691.2827 m
255.2866 696.709 254.9199 702.668 255.353 708.6904 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
264.1597 674.3262 m
263.2134 675.7129 262.2715 677.1577 261.335 678.6665 c
259.1001 682.2661 257.4761 686.5737 256.459 691.2827 c
S
[]0 d
342.4023 583.0317 m
342.0625 583.9204 341.7061 584.7988 341.333 585.6665 c
317.2656 641.6616 289.1367 637.7183 264.1597 674.3262 c
S
[4 6 ]0 d
347.6123 557.3472 m
347.1924 566.2646 345.4551 575.0571 342.4023 583.0317 c
S
1 w []0 d
346.2578 536.9634 m
347.4824 543.6235 347.9336 550.522 347.6123 557.3472 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
296.002 488.333 m
324.7266 488.3335 341.4521 510.8145 346.2578 536.9634 c
S
[]0 d
264.0205 564.6509 m
263.4155 563.7144 262.8525 562.7222 262.335 561.6665 c
245.335 527 265.9946 488.3325 296.002 488.333 c
S
[4 6 ]0 d
307.6807 594.6475 m
290.688 580.1094 272.8628 578.3359 264.0205 564.6509 c
S
1 w []0 d
329.3174 624.4912 m
322.8809 610.4102 315.3662 601.2231 307.6807 594.6475 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
339.002 653.333 m
336.2236 641.8965 332.9414 632.4185 329.3174 624.4912 c
S
4 w []0 d
775.5908 584.2744 m
755.708 584.2246 739.5498 600.3008 739.5 620.1836 c
739.4502 640.0654 755.5273 656.2246 775.4092 656.2744 c
795.291 656.3242 811.4502 640.2471 811.5 620.3652 c
811.5498 600.4824 795.4727 584.3242 775.5908 584.2744 c
s
1063.5908 584.999 m
1043.709 584.9492 1027.5498 601.0264 1027.5 620.9082 c
1027.4492 640.791 1043.5273 656.9492 1063.4092 656.999 c
1083.291 657.0498 1099.4492 640.9717 1099.5 621.0898 c
1099.5498 601.208 1083.4727 585.0488 1063.5908 584.999 c
s
3 w [4 6 ]0 d
717.6367 637.4746 m
730.8867 633.5723 739.4824 627.29 739.5 620.1836 c
S
1 w []0 d
698.5049 641.0439 m
705.5234 640.3643 712.001 639.1348 717.6367 637.4746 c
N
0 R
0.9098 0 1 0 K
3 w [4 6 ]0 d
689.833 641.5879 m
692.7969 641.5 695.6943 641.3164 698.5049 641.0439 c
S
0 0 0 1 K
631.5 619.9121 m
631.4766 629.3867 646.707 637.4756 667.918 640.4404 c
673.4131 641.208 679.3086 641.6318 685.4453 641.6475 c
686.9219 641.6514 688.3857 641.6309 689.833 641.5879 c
S
[]0 d
739.5 620.1836 m
739.5303 608.2539 715.377 598.5225 685.5547 598.4473 c
655.7314 598.373 631.5303 607.9824 631.5 619.9121 c
631.5 619.9121 l
S
2 w
775.1377 764.2744 m
1063.1377 765 l
1142.665 765.2002 1207.2998 700.8896 1207.5 621.3613 c
1207.7002 541.834 1143.3906 477.1992 1063.8623 477 c
775.8623 476.2744 l
775.8623 476.2744 l
696.335 476.0742 631.7002 540.3838 631.5 619.9121 c
631.2998 699.4395 695.6094 764.0742 775.1377 764.2744 c
775.1377 764.2744 l
S
3 w [4 6 ]0 d
1195.2559 635.0107 m
1202.8965 631.3047 1207.4863 626.5527 1207.5 621.3613 c
S
1 w []0 d
1178.3945 640.4521 m
1183.8965 639.3184 1188.8447 637.8145 1193.0332 636.0234 c
1193.7998 635.6953 1194.541 635.3574 1195.2559 635.0107 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
1140.5293 642.1719 m
1144.667 642.5889 1148.9932 642.8154 1153.4453 642.8262 c
1158.8623 642.8398 1164.0947 642.5342 1169.0303 641.9531 c
1172.292 641.5693 1175.4238 641.0645 1178.3945 640.4521 c
S
1 w []0 d
1121.0234 638.416 m
1126.7461 640.1543 1133.3555 641.4492 1140.5293 642.1719 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
1099.5 621.0898 m
1099.4824 628.1504 1107.9365 634.4414 1121.0234 638.416 c
S
[]0 d
1099.5 621.0898 m
1099.5303 609.1602 1123.7314 599.5508 1153.5547 599.626 c
1183.377 599.7012 1207.5303 609.4326 1207.5 621.3613 c
S
u
0.9098 0 1 0 K
[4 6 ]0 d
811.5 620.3652 m
811.499 620.8359 811.5527 621.3027 811.6602 621.7676 c
S
1027.5 620.9082 m
S
1027.5 620.9082 m
1027.501 620.4375 1027.4473 619.9697 1027.3389 619.5039 c
S
[]0 d
1027.3389 619.5039 m
S
U
0 0 0 1 K
4 w [4 6 ]0 d
909.9102 637.2725 m
885.876 672.4951 858.6895 692.5 819 692.5 c
756 692.5 739.5 659 739.5 621 c
S
1 w []0 d
928.6123 609.4268 m
922.3447 618.6328 916.1836 628.0791 909.9102 637.2725 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
1065.6895 553.7715 m
1053.9053 546.5176 1038.4619 542 1018.5 542 c
995.4883 542 977.1846 552.5898 961.1807 568.3545 c
954.0254 575.4033 947.3301 583.4863 940.8789 592.1191 c
936.707 597.7021 932.6377 603.5146 928.6123 609.4268 c
S
1083.1367 569.3994 m
1078.5146 563.4619 1072.7607 558.124 1065.6895 553.7715 c
S
1099.5 621 m
1099.5 604.2363 1095.124 584.7988 1083.1367 569.3994 c
S
[]0 d
919.5 764.8027 m
1014.8877 760.623 1099.5 690.8115 1099.5 621 c
S
[4 6 ]0 d
736.5566 725.8936 m
788.7832 752.6328 857.4063 765 910.5 765 c
913.5088 765 916.5098 764.9336 919.5 764.8027 c
S
1 w []0 d
684.6982 687.7871 m
685.2773 688.4307 685.8652 689.0693 686.4609 689.7041 c
699.7432 703.8525 717 715.8809 736.5566 725.8936 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
658.9111 613.1689 m
658.6406 616.3477 658.5 619.625 658.5 623 c
658.5 637.6465 661.8486 651.0674 667.875 663.3037 c
672.1914 672.0664 677.8809 680.2227 684.6982 687.7871 c
S
1 w []0 d
664.624 587.043 m
661.7354 594.8301 659.7295 603.5479 658.9111 613.1689 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
710.8447 541.4014 m
710.5615 541.4736 710.2773 541.5488 709.9941 541.627 c
692.502 546.4424 673.9551 561.8877 664.624 587.043 c
S
1 w []0 d
735.1758 540.9258 m
731 540.3193 726.4648 540 721.5 540 c
718.0625 540 714.4805 540.4697 710.8447 541.4014 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
750.1719 544.8184 m
745.7061 543.0615 740.7637 541.7373 735.1758 540.9258 c
S
1 w []0 d
775.7891 563.2139 m
768.4395 555.3975 760.6084 548.9258 750.1719 544.8184 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
802.5 594 m
792.0723 582.9922 784.249 572.2119 775.7891 563.2139 c
S
[]0 d
1036.5 648 m
1000.5 612 838.5 632 802.5 594 c
S
[4 6 ]0 d
1063.2129 678.8135 m
1054.9053 669.4805 1047.0859 658.5859 1036.5 648 c
S
1 w []0 d
1090.1104 699.2324 m
1079.0059 694.751 1070.9004 687.4512 1063.2129 678.8135 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
1154 612.5 m
1154.2354 615.7959 1157.0947 621.0811 1157 624.5 c
1155.5 678.5 1134.5 702 1111 703.5 c
1099.9961 704.2021 1097.6084 702.2588 1090.1104 699.2324 c
S
1 w []0 d
1175.6279 587.3164 m
1177.9912 595.3945 1179.5049 603.9297 1180.1465 612.9258 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
1129.8428 548.3848 m
1138.8164 560.8389 1145.4336 574.8867 1150 590.5 c
S
1 w []0 d
1104.6309 522.3457 m
1114.541 530.0615 1122.8975 538.7461 1129.8428 548.3848 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
910.5 477 m
1004.1924 477 1066.1328 492.3691 1104.6309 522.3457 c
S
[]0 d
739.5 621 m
739.5 549 829.5 477 910.5 477 c
S
0.0157 0.749 0.9137 0 K
[4 6 ]0 d
1143.5 502 m
S
1 w []0 d
943.0732 541.5742 m
N
0 To
1 0 0 1 863.8271 774.292 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
/_Helvetica 36 Tf
(K) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 872.5684 716.1826 0 Tp
TP
0 Tr
/_Symbol 24 Tf
(g) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
3 w
632 622 m
632.5 682.5 735.5 739.0811 856.5 739.5 c
1001 740 1133 702 1134.5 622.5 c
1135.4346 572.9863 1093 559.5 1064 559.5 c
1035 559.5 1000.5 587.5 974 622.5 c
943.5107 662.7695 902.0137 712 821 712 c
719 712 702.5 647 703 600.5 c
704.0967 498.4951 811.501 497.5176 909.5 498 c
1011 498.5 1189.5 522.4551 1189.5 623.5 c
1189.5 713.5 1103.2764 764.5469 1063.1377 765 c
S
[4 6 ]0 d
736.0098 515.877 m
731.6221 515.626 727.1201 515.5 722.5 515.5 c
662.5 515.5 631.6777 582.998 632 622 c
S
1 w []0 d
766.6006 520.0527 m
757.0859 517.8926 746.9023 516.499 736.0098 515.877 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
778.5723 523.2832 m
774.7051 522.0635 770.7148 520.9863 766.6006 520.0527 c
S
1 w []0 d
801.1309 532.7314 m
794.1172 528.9678 786.6074 525.8174 778.5723 523.2832 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
861.4648 602.4238 m
847.4766 570.4033 827.916 547.1016 801.1309 532.7314 c
S
1 w []0 d
871.1641 628.8027 m
868.2793 619.4375 865.0566 610.6436 861.4648 602.4238 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
895.7559 682.1699 m
885.5605 667.6641 877.7822 651.791 873 635 c
872.4043 632.9072 871.792 630.8418 871.1641 628.8027 c
S
1 w []0 d
910.2773 700.1709 m
905.0166 694.4502 900.1602 688.4375 895.7559 682.1699 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
940.1572 726.4795 m
929.1943 718.6582 919.1592 709.8301 910.2773 700.1709 c
S
1 w []0 d
962.3633 740.2559 m
954.6182 736.1094 947.1963 731.502 940.1572 726.4795 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
976.0225 746.9375 m
971.3701 744.8682 966.8135 742.6377 962.3633 740.2559 c
S
1 w []0 d
999.5752 755.7637 m
991.502 753.2783 983.6348 750.3232 976.0225 746.9375 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
1063.1377 765 m
1041.1797 765.2476 1019.7363 761.9688 999.5752 755.7637 c
S
0 To
1 0 0 1 775.5 631 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w []0 d
(a) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1045.5 604 0 Tp
TP
0 Tr
(b) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1212.5 591 0 Tp
TP
0 Tr
/_Helvetica 24 Tf
(D) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 604.5 602 0 Tp
TP
0 Tr
(D) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 621.5 598 0 Tp
TP
0 Tr
/_Helvetica 14 Tf
(1) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1229.5 587 0 Tp
TP
0 Tr
(2) Tx 1 0 Tk
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1343 2521 a(Figure)g(2)100 2705 y(Throughout)k(the)i(rest)
g(of)f(the)i(pap)r(er,)f(w)n(e)g(will)g(follo)n(w)f(the)h(standard)f
(practice)g(of)h(rep-)0 2805 y(resen)n(ting)c(the)i(in)n(v)n(erses)d
(of)i(the)h(generators)c Fl(a;)14 b(b)30 b Fp(of)g(the)g(free)g(group)f
Fl(F)12 b Fp(\()p Fl(a;)i(b)p Fp(\))30 b(b)n(y)g Fl(A)h
Fp(and)f Fl(B)t Fp(,)0 2904 y(resp)r(ectiv)n(ely)-7 b(,)27
b(and)g(the)h(in)n(v)n(erse)e(of)i(a)f(w)n(ord)g Fl(w)j
Fp(in)e(the)g(letters)f Fl(a;)14 b(b)27 b Fp(b)n(y)p
2261 2859 62 4 v 28 w Fl(w)r Fp(.)100 3015 y(F)-7 b(or)39
b(our)g(second)g(condition,)j(w)n(e)e(c)n(ho)r(ose)e(a)i
Fl(\015)k Fp(whic)n(h)c(is)f(homotopically)g(essen)n(tial)g(in)0
3115 y Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\),)45 b(but)d(is)f(n)n
(ull-homologous)e(in)j Fl(@)5 b(X)i Fp(\()p Fl(F)12 b
Fp(\);)47 b(that)42 b(is,)j Fl(\015)h Fp(separates)40
b Fl(@)5 b(X)i Fp(\()p Fl(F)12 b Fp(\))41 b(in)n(to)g(t)n(w)n(o)0
3215 y(once-punctured)f(tori.)77 b(In)41 b(terms)f(of)h(our)f(standard)
g(picture)h(of)g Fl(N)9 b Fp(\()p Fl(F)j Fp(\))41 b(and)g
Fl(\015)5 b Fp(,)44 b(this)d(is)0 3314 y(straigh)n(tforw)n(ard)18
b(to)j(v)n(erify;)h(w)n(e)e(simply)h(need)g(to)g(c)n(hec)n(k)f(that)h
(in)g(the)g(four-punctured)f(sphere)0 3414 y(in)27 b
Fl(@)5 b(X)i Fp(\()p Fl(F)12 b Fp(\))26 b(obtained)g(b)n(y)g(omitting)h
(the)g(t)n(w)n(o)e(handles,)i(in)g(our)e(\014gure,)h
Fl(\015)32 b Fp(do)r(es)26 b(not)g(separate)0 3514 y(the)39
b(ends)g(of)f(either)h(handle.)69 b(This)39 b(is)f(su\016cien)n(t,)k(b)
r(ecause)c Fl(\015)43 b Fp(do)r(es)38 b(separate)g(the)h(four-)0
3613 y(punctured)c(sphere.)59 b(This)35 b(condition)g(can)g(also)f(b)r
(e)i(readily)e(established)h(from)f(the)i(w)n(ord)0 3713
y(in)29 b Fl(F)12 b Fp(\()p Fl(a;)i(b)p Fp(\))29 b(represen)n(ting)e
Fl(\015)5 b Fp(;)29 b(the)g(exp)r(onen)n(t)g(sums)f(of)h
Fl(a)g Fp(and)f Fl(b)h Fp(in)g(the)g(w)n(ord)e(m)n(ust)i(b)r(oth)g(b)r
(e)0 3812 y(zero.)100 3924 y(When)k(w)n(e)g(straigh)n(ten)f(out)h(the)h
(handleb)r(o)r(dy)f Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\))33
b(to)h(a)e(standard)h(handleb)r(o)r(dy)-7 b(,)34 b(the)0
4023 y(knot)27 b Fl(K)33 b Fp(and)27 b(the)h(lo)r(op)f
Fl(\015)32 b Fp(are)26 b(carried)g(to)h(simple)h(lo)r(ops)f(in)g
Fl(@)5 b(X)i Fp(\()p Fl(F)12 b Fp(\).)36 b(W)-7 b(e)28
b(imagine)f(pushing)0 4123 y Fl(\015)32 b Fp(in)n(to)27
b Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\))26 b(to)h(a)g(curv)n(e)f
Fl(\015)913 4093 y Fh(0)963 4123 y Fp(on)h(a)g(surface)f(parallel)g(to)
h Fl(@)5 b(X)i Fp(\()p Fl(F)12 b Fp(\),)26 b(to)h(mak)n(e)g(it)g
(disjoin)n(t)g(from)0 4223 y Fl(K)k Fp(again.)k(The)25
b(isotopies)f(of)h Fl(K)31 b Fp(\(ab)r(o)n(v)n(e\))24
b(and)h Fl(\015)30 b Fp(can)25 b(b)r(e)h(though)n(t)f(of)g(as)f(a)h
(single)g(isotop)n(y)f(of)0 4322 y Fl(K)h Fm(\\)20 b
Fl(\013)g Fm([)g Fl(\014)k Fm([)19 b Fl(\015)5 b Fp(.)42
b(Because)28 b Fl(\015)944 4292 y Fh(0)996 4322 y Fp(b)r(ounds)i(a)e
(disk)i Fl(D)h Fp(in)e Fl(S)1787 4292 y Fj(3)1824 4322
y Fp(,)h(the)g(e\013ect)f(of)h(1)p Fl(=n)e Fp(Dehn)i(surgery)0
4422 y(on)36 b(an)g(ob)5 b(ject)35 b(disjoin)n(t)h(from)g
Fl(\015)1064 4392 y Fh(0)1123 4422 y Fp(is)g(to)g(cut)g(the)h(ob)5
b(ject)36 b(op)r(en)g(along)f(the)h(disk,)i(giv)n(e)d(one)0
4521 y(side)30 b(of)f(the)h(disk)g Fl(n)f Fp(full)i(t)n(wists,)f(and)f
(then)h(reglue.)42 b(As)30 b(seen)f(in)h(Section)g(2)f(of)h([Br2],)f
(since)0 4621 y(the)f(disk)g Fl(D)i Fp(ma)n(y)e(b)r(e)g(c)n(hosen)f(to)
h(meet)h Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\))27 b(in)i(an)e(ann)n(ulus)h
(connecting)g Fl(\015)2499 4591 y Fh(0)2550 4621 y Fp(to)f
Fl(\015)5 b Fp(,)28 b Fl(X)7 b Fp(\()p Fl(F)2911 4633
y Fi(n)2957 4621 y Fp(\))0 4721 y(and)27 b Fl(K)232 4733
y Fi(n)300 4721 y Fm(\022)22 b Fl(@)5 b(X)i Fp(\()p Fl(F)597
4733 y Fi(n)642 4721 y Fp(\))28 b(can)f(b)r(e)g(obtained)g(from)g
Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\))27 b(and)g Fl(K)h Fm(\022)23
b Fl(@)5 b(X)i Fp(\()p Fl(F)12 b Fp(\))27 b(b)n(y)g(simply)g(setting)0
4820 y Fl(X)7 b Fp(\()p Fl(F)161 4832 y Fi(n)206 4820
y Fp(\))24 b(=)f Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\))28
b(and)g(applying)f Fl(n)h Fp(Dehn)g(t)n(wists)g(to)g
Fl(K)33 b Fp(along)27 b(the)h(curv)n(e)f Fl(\015)5 b
Fp(,)28 b(to)g(obtain)f Fl(K)2944 4832 y Fi(n)0 4920
y Fp(\(Figure)g(3\).)p eop
%%Page: 4 4
4 3 bop 0 42 a Fn(4)1187 b(Mark)24 b(Brittenham)594 1066
y @beginspecial 16 @llx 215 @lly 595 @urx 507 @ury 2160
@rwi @setspecial
%%BeginDocument: d_fig3.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig3.eps)
%%CreationDate: (9/10/2002) (10:29 AM)
%%BoundingBox: 16 215 595 507
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: Helvetica
%%DocumentNeededFonts: Helvetica
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 18 16 594 778
%AI3_DocumentPreview: Header
%%PageOrigin:18 16
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
 end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_cmykcolor eq
	{
 end
	} if
} def
/setcmykcolor
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
85.2549 379.793 m
92.2734 379.1133 98.751 377.8848 104.3867 376.2246 c
N
71.4482 426.5366 m
72.0273 427.1802 72.6152 427.8188 73.2109 428.4536 c
86.4932 442.6021 103.75 454.6304 123.3066 464.6431 c
N
121.9258 279.6748 m
117.75 279.0693 113.2148 278.749 108.25 278.749 c
104.8125 278.749 101.2305 279.2197 97.5947 280.1514 c
N
491.3809 261.0947 m
501.291 268.8115 509.6465 277.4951 516.5918 287.1338 c
N
0 R
0.0157 0.749 0.9137 0 K
4 w [4 6 ]0 d
530.25 240.749 m
S
1 w []0 d
329.8223 280.3232 m
N
0 R
0 0 0 1 K
4 w
162.0908 324.2744 m
142.208 324.2236 126.0498 340.3008 126 360.1836 c
125.9502 380.0645 142.0273 396.2241 161.9092 396.2739 c
181.791 396.3237 197.9502 380.2461 198 360.3652 c
198.0498 340.4824 181.9727 324.3232 162.0908 324.2744 c
s
450.0898 324.999 m
430.209 324.9482 414.0488 341.0254 414 360.9082 c
413.9492 380.791 430.0273 396.9487 449.9082 396.9985 c
469.791 397.0493 485.9492 380.9707 486 361.0898 c
486.0488 341.207 469.9727 325.0479 450.0898 324.999 c
s
2 w
161.6377 504.2739 m
449.6367 504.9995 l
529.1641 505.1997 593.7988 440.8892 594 361.3613 c
594.1992 281.833 529.8906 217.1982 450.3613 216.999 c
162.3623 216.2744 l
162.3623 216.2744 l
82.835 216.0732 18.2002 280.3838 18 359.9121 c
17.7998 439.439 82.1094 504.0737 161.6377 504.2739 c
161.6377 504.2739 l
S
u
3 w [4 6 ]0 d
198 360.3652 m
197.999 360.8359 198.0527 361.3027 198.1602 361.7676 c
S
414 360.9082 m
S
414 360.9082 m
414 360.4375 413.9473 359.9688 413.8379 359.5039 c
S
[]0 d
413.8379 359.5039 m
S
U
0.0157 0.749 0.9137 0 K
4 w [4 6 ]0 d
530 241.999 m
S
0 0 0 1 K
3 w []0 d
19.3335 345 m
18 346.332 21.3809 477.4814 243.25 478.2495 c
316.1611 478.502 385.8906 468.9517 437.2783 449.2144 C
437.5 448.9995 L
485.1709 430.7075 510.502 394.9629 510.002 356.9902 c
509.502 318.999 476.502 307.499 447.502 307.499 c
419.6914 307.499 403 338 377.5 376.5 c
S
315.333 257.999 m
415.7627 257.667 551.2725 274.9502 552.25 358.5 c
553.3027 448.4937 455.5 502.4995 416.5 504.4995 c
S
322 372.25 m
314 412.5 267.8975 419.9995 217.002 419.9995 c
115.002 419.9995 98.502 377.9902 99.002 331.4902 c
99.9639 242.0029 240.9883 243.0029 310.667 244.667 C
311 244.999 L
411.834 248.4092 563.6689 266.208 562.5 361.25 c
561.3926 451.2427 490.5 498.9995 453.5 504.4995 c
S
446.5 464.4995 m
499.3037 442.9321 529.7363 402.2329 530.502 353.4902 c
531.1494 312.2842 481.1201 288.2158 453.002 288.499 c
403.5 288.999 396 309.499 369.5 344.5 c
365.7002 349.5176 346.9658 377.1563 343 382 C
341.8799 383.377 L
314.2119 411.561 277.6875 429.9995 212.502 429.9995 c
110.502 429.9995 89.25 385.75 89.75 339.25 c
90.8022 241.3662 216.4126 236.4736 311 236.667 C
312 236.667 L
414.5566 240.1826 570.0986 253.7061 571 356.5 c
571.7891 446.4966 530.5 477.4995 508 492.4995 c
S
20.25 382.5 m
30.5 438.2495 132.501 487.0806 253.502 487.4995 c
324.2568 487.7441 391.7754 478.5186 442.4385 457.8247 C
442 457.4995 L
492.4551 438.1206 520.5068 400.6353 521.25 361.25 c
522.1836 311.7354 479.7412 298.9639 450.75 298.249 c
400 296.999 385.8936 347.998 360 380.5 C
359.5283 381.3594 L
329.2061 417.396 285.2983 437.9995 209.002 437.9995 c
107.002 437.9995 78.002 381.4902 78.502 334.9902 c
79.5986 232.9854 214.001 227.8506 312 228.333 C
312.667 228.333 L
418.2471 232.0596 579.8154 249.6025 580.75 354.75 c
581.248 410.7495 575 429.4995 550.5 463.4995 c
S
377.166 376.6367 m
373.207 381.4355 369.0303 386.1172 364.502 390.5 c
318.002 435.4995 271.9502 449.2593 191.002 445.9995 c
116.502 442.9995 68.002 393.9902 68.502 347.4902 c
69.4067 263.3408 116.7026 233.9385 212 224.999 c
S
29 305.333 m
2.6665 389.332 111.001 469.0806 232.002 469.4995 c
307.4883 469.7603 380.2588 460.7427 432.4014 440.7339 C
432.5 440.4995 L
476.0566 424.3286 499.5537 393.2617 500.002 369.4902 c
500.6338 336.0059 482.3926 318.5107 453.502 315.999 c
442 314.999 425.5 313.999 404 352.5 c
S
49.6665 271.333 m
-3 341 96.501 462.0806 217.502 462.4995 c
297.2046 462.7749 374.625 450.5776 428.2012 430.687 c
S
4 w
125.9502 363.2852 m
125.9502 316.6338 184 254.667 314.333 257.667 c
S
428.75 389.6504 m
414.333 373.6211 394 375 404 353 c
S
321.75 372.5 m
337.75 305 220.2158 369.6191 184.2842 328.9492 c
S
428 429.9995 m
451.5 420.4995 485 405.9995 485.998 356.6191 c
S
287.5 504.4995 m
343 505.4995 407.7637 480.3354 446.2637 465.3354 c
S
[4 6 ]0 d
106.3936 468.0005 m
153.5337 499.5942 223.8726 503.332 274.998 503.332 c
278.0068 503.332 281.0078 503.2656 283.999 503.1348 c
S
50.958 405 m
52.4253 408.9648 54.1372 412.3652 56 414.9995 c
S
45.9341 369 m
45.7842 372.0342 46.6304 379.2949 46.75 382.25 c
S
62.457 324 m
55.5903 331.7383 51.5493 344.3838 49 354.25 c
S
143.9995 304.4131 m
136.3066 303.0645 127.0039 302.4063 116.9995 302.9209 c
S
183.5 328 m
175.2021 319.2402 169.7432 313.9707 162 310.0859 c
S
458.0654 424.4429 m
456.9971 423.7056 456.0566 422.9707 455.2627 422.2559 c
S
479.4922 433.0479 m
478.3096 432.8223 477.1416 432.561 475.9932 432.2695 c
S
514.25 424 m
511.0967 427.3418 507.502 429.7144 503.6689 431.3076 c
S
533.4932 322.8721 m
548.1182 375.3457 537.4023 399.4585 514.25 424 c
S
1 w []0 d
471.084 242.1426 m
478.6172 245.5 485.3613 249.415 491.25 254 c
499.0625 260.082 523.9561 292.8438 529.5 309.75 c
530.9971 314.3145 532.3262 318.6836 533.4932 322.8721 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
284.6665 218.667 m
363.4424 222.0547 481.5 226.5 501.25 253.75 c
S
447.5 414.75 m
442.0762 408.1387 433.7549 396.7051 426.8936 389.8438 c
S
[]0 d
211.6665 224.999 m
228 222.999 264.6665 216.999 283 217.333 c
S
[4 6 ]0 d
228.6665 358.667 m
236.6665 369 235.0083 385.4609 227.3335 396.3335 c
215.3335 413.3335 125.3335 419.6665 125.7842 364.75 c
S
457.5 284.5 m
452.25 276 417.0029 277.165 403.0352 277.165 c
380.0234 277.165 361.5576 287.5928 345.7148 303.5186 c
330.6865 318.626 334.9854 350.0332 339.4336 369 c
S
486.667 356.333 m
486.667 350.1084 486 338 481.25 331.75 c
S
3 w
63.0059 303.1094 m
56.3042 306.2764 50.0327 310.2031 44.4521 314.999 c
S
153 295.9316 m
145.1519 293.9707 135.9053 292.5947 126 292.1113 c
S
208.6738 334.8203 m
195.2427 321.4727 178.8379 307.46 171.0005 302.8555 c
S
228.6665 358.667 m
227.6523 356.4619 225.6191 353.5439 222.8838 350.1895 c
S
72.0059 283.1279 m
62.0767 286.2842 52.8887 291.1416 45 298.0889 c
S
162.0005 288.5977 m
153.5288 285.6182 144.4019 283.0996 134.9995 281.3066 c
S
226.1455 333.8867 m
216.3457 323.2588 208.4907 315.5254 201.6665 309.667 c
196.6914 305.3955 189.9121 301.0449 181.8804 296.999 c
S
279.9658 396 m
276.0454 391.5947 272.4492 387.4746 269.25 383.75 C
269 383.5 L
258.9512 371.4111 250.1655 361.0352 242.3926 352.0938 c
S
330.9639 449.0205 m
325.5498 443.876 320.2021 438.6201 315 433.3701 C
S
416.75 504.4995 m
408.9531 504.6313 399.3721 501.0693 388.792 495 C
S
90 267.2988 m
72.8691 270.1221 57.1851 276.374 44.9971 286.4082 c
S
175.7896 279 m
168.5 275.748 160.8442 273.0576 153.0005 270.958 c
S
243.3481 331.6484 m
227.0356 315.4473 212.9634 303.0752 202.6665 294.999 c
201.1489 293.8086 199.5923 292.6514 198 291.5283 c
S
297 389.7754 m
295.4238 388.248 293.8408 386.7383 292.25 385.25 C
292.25 385 L
281.6348 372.3486 271.2798 360.748 261.4482 350.2773 c
S
348.9131 443.5864 m
343.583 438.3154 338.291 432.814 333.001 427.2212 C
S
453 504.7495 m
439.3545 504.7495 422.5879 497.6416 406.7168 488.3945 c
S
108 248.9863 m
83.8828 249.3193 63.5659 256.9414 50 270.749 c
S
189.001 271.0566 m
182.9541 267.8242 176.9448 264.9619 171 262.46 c
S
259.2412 328.5342 m
242.8218 311.9951 227.5381 298.1826 214.5635 288 c
S
309.75 384.25 m
299.145 371.5234 288.5347 359.4727 278.1792 348.2969 c
S
368.8516 440.7305 m
359.8975 433.2061 350.8994 425.2681 342 416.9014 C
S
506.75 492.9995 m
479.1055 502.2749 453.1494 497.2153 427.7002 483.5996 c
S
383.0039 435.2852 m
374.7207 427.8511 366.8516 419.6245 360 410.7603 c
S
549.75 463.4995 m
525.5215 487.9185 485.1113 488.6987 447.124 474.854 c
S
0 To
1 0 0 1 268.3335 296.333 0 Tp
TP
2 Tr
0 O
0 0 0 1 k
1 w []0 d
/_Helvetica 36 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(K) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 296.3335 290.333 0 Tp
TP
0 Tr
/_Helvetica 18 Tf
(1) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
275.729 338.7285 m
302.729 347.7285 l
302.729 329.7285 l
275.729 338.7285 l
b
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1343 1165 a Fp(Figure)j(3)100 1315 y(Because)32
b(w)n(e)h(start)g(with)h(a)f(non-trivial)f(knot)h Fl(K)39
b Fp(-)33 b(in)h(our)e(examples,)j(using)e Fl(p;)14 b(q)35
b Fm(\025)d Fp(2,)0 1414 y(the)j(knots)f Fl(K)39 b Fp(w)n(e)34
b(start)g(with)h(are)e(the)i(2-bridge)e(knots)h([Sc)n(h)n(u])g(with)h
(con)n(tin)n(ued)f(fraction)0 1514 y(expansion)24 b([2)p
Fl(p)13 b Fp(+)g(1)p Fl(;)h Fm(\000)p Fp(\(2)p Fl(q)f
Fp(+)g(1\)])24 b(-)g(the)h(surface)f Fl(F)12 b Fp(,)26
b(b)r(eing)e(gen)n(us)g(one,)h(m)n(ust)g(b)r(e)g(incompress-)0
1613 y(ible,)h(and)f(so)f Fl(@)5 b(X)i Fp(\()p Fl(F)12
b Fp(\))h Fm(n)g Fl(K)31 b Fp(is)25 b(incompressible)f(in)h
Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\).)36 b(By)25 b(applying)f(a)h
(criterion)f(of)h(Starr)0 1713 y([Sta],)f(w)n(e)f(can)g(also)f(see)h
(this)g(directly)-7 b(,)24 b(since)f(there)g(is)g(a)g(system)g(of)g
(cutting)h(disks)e(for)h Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\),)0
1813 y(whose)34 b(b)r(oundaries)h(split)g Fl(@)5 b(X)i
Fp(\()p Fl(F)12 b Fp(\))35 b(in)n(to)g(a)g(pair)f(of)h
(thrice-punctured)g(spheres)f Fl(P)2689 1825 y Fj(1)2727
1813 y Fl(;)14 b(P)2817 1825 y Fj(2)2854 1813 y Fp(,)38
b(so)0 1912 y(that)25 b Fl(K)k Fp(meets)c(eac)n(h)e Fl(P)746
1924 y Fi(i)798 1912 y Fp(in)i(essen)n(tial)e(arcs)g(whic)n(h)i(join)f
(ev)n(ery)f(pair)g(of)i(b)r(oundary)e(curv)n(es.)35 b(In)0
2012 y(our)24 b(case,)h(w)n(e)g(can)g(use)g(the)h(standard)e(set)h(of)g
(disks)g Fl(D)1730 2024 y Fj(1)1767 2012 y Fl(;)14 b(D)1873
2024 y Fj(2)1910 2012 y Fl(;)g(D)2016 2024 y Fj(3)2078
2012 y Fp(where)25 b Fl(D)2385 2024 y Fj(1)2447 2012
y Fp(and)g Fl(D)2675 2024 y Fj(2)2737 2012 y Fp(are)f(the)0
2112 y(disks)j(c)n(hosen)g(ab)r(o)n(v)n(e,)g(and)g Fl(D)961
2124 y Fj(3)1026 2112 y Fp(is)h(the)g(horizon)n(tal)e(disk)h(in)i(the)f
(middle)g(of)g(the)g(handleb)r(o)r(dy)0 2211 y(in)g(Figure)f(2b.)100
2311 y(Our)20 b(third)i(condition)f(on)g Fl(\015)k Fp(is)d(that)f(it)h
(meet)f Fl(K)27 b Fp(and)21 b(the)h(cutting)f(disks)g(for)g
Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\))21 b(so)g(that)0 2410
y(Dehn)34 b(t)n(wisting)g Fl(K)39 b Fp(along)33 b Fl(\015)935
2380 y Fh(0)992 2410 y Fp(yields)h(a)f(lo)r(op)g Fl(K)1566
2422 y Fj(1)1637 2410 y Fp(meeting)h(the)g(pair)f(of)h
(thrice-punctured)0 2510 y(spheres)22 b(in)g(essen)n(tial)g(arcs.)34
b(In)22 b(particular,)g(this)h(means)f(that)g Fl(\015)28
b Fp(itself)22 b(cannot)g(ha)n(v)n(e)g(a)f(trivial)0
2610 y(arc)29 b(of)h(in)n(tersection)g(with)h(either)f(of)g(the)h
(three-punctured)f(spheres)f Fl(P)2319 2622 y Fi(i)2377
2610 y Fp(\(Figure)h(4\).)45 b(Note)0 2709 y(that)31
b(this)h(condition)f(is)f(mean)n(t)h(to)g(apply)g(to)g
Fl(\015)36 b Fk(as)d(dr)l(awn)p Fp(,)f(and)f(not)g(up)h(to)f(isotop)n
(y)-7 b(.)46 b(This)0 2809 y(condition)27 b(on)h Fl(\015)k
Fp(is)27 b(not)h(in)n(v)-5 b(arian)n(t)26 b(under)i(isotop)n(y)-7
b(.)774 3437 y @beginspecial 72 @llx 378 @lly 504 @urx
534 @ury 1728 @rwi @setspecial
%%BeginDocument: d_fig4.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig4.eps)
%%CreationDate: (9/10/2002) (10:30 AM)
%%BoundingBox: 72 378 504 534
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%+ Symbol
%%DocumentNeededFonts: Helvetica
%%+ Symbol
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 18 16 594 778
%AI3_DocumentPreview: Header
%%PageOrigin:18 16
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
%%IncludeFont: Symbol
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/space
/exclam
/universal
/numbersign
/existential
/percent
/ampersand
/suchthat
/parenleft
/parenright
/asteriskmath
/plus
/comma
/minus
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/congruent
/Alpha
/Beta
/Chi
/Delta
/Epsilon
/Phi
/Gamma
/Eta
/Iota
/theta1
/Kappa
/Lambda
/Mu
/Nu
/Omicron
/Pi
/Theta
/Rho
/Sigma
/Tau
/Upsilon
/sigma1
/Omega
/Xi
/Psi
/Zeta
/bracketleft
/therefore
/bracketright
/perpendicular
/underscore
/radicalex
/alpha
/beta
/chi
/delta
/epsilon
/phi
/gamma
/eta
/iota
/phi1
/kappa
/lambda
/mu
/nu
/omicron
/pi
/theta
/rho
/sigma
/tau
/upsilon
/omega1
/omega
/xi
/psi
/zeta
/braceleft
/bar
/braceright
/similar
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Euro
/Upsilon1
/minute
/lessequal
/fraction
/infinity
/florin
/club
/diamond
/heart
/spade
/arrowboth
/arrowleft
/arrowup
/arrowright
/arrowdown
/degree
/plusminus
/second
/greaterequal
/multiply
/proportional
/partialdiff
/bullet
/divide
/notequal
/equivalence
/approxequal
/ellipsis
/arrowvertex
/arrowhorizex
/carriagereturn
/aleph
/Ifraktur
/Rfraktur
/weierstrass
/circlemultiply
/circleplus
/emptyset
/intersection
/union
/propersuperset
/reflexsuperset
/notsubset
/propersubset
/reflexsubset
/element
/notelement
/angle
/gradient
/registerserif
/copyrightserif
/trademarkserif
/product
/radical
/dotmath
/logicalnot
/logicaland
/logicalor
/arrowdblboth
/arrowdblleft
/arrowdblup
/arrowdblright
/arrowdbldown
/lozenge
/angleleft
/registersans
/copyrightsans
/trademarksans
/summation
/parenlefttp
/parenleftex
/parenleftbt
/bracketlefttp
/bracketleftex
/bracketleftbt
/bracelefttp
/braceleftmid
/braceleftbt
/braceex
/.notdef
/angleright
/integral
/integraltp
/integralex
/integralbt
/parenrighttp
/parenrightex
/parenrightbt
/bracketrighttp
/bracketrightex
/bracketrightbt
/bracerighttp
/bracerightmid
/bracerightbt
/.notdef
/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 O
0 0 0 1 k
0 R
0 0 0 1 K
0 i
0 J 0 j 2 w 4 M []0 d
%AI3_Note:
0 D
72 431.9995 m
252 431.9995 l
B
324 431.9995 m
504 431.9995 l
B
4 w
99 395.9995 m
108 422.9995 126 521.9995 162 521.9995 c
198 521.9995 216 422.999 225 395.9995 c
S
2.64 w
280.9102 432.9092 m
274.9702 441.8184 266.0605 435.8794 266.0605 429.939 c
266.0605 423.9995 271.4648 423.9995 272 423.9995 c
277.9404 423.9995 280.9102 426.9688 280.9102 429.939 c
280.9102 432.9092 280.9102 450.729 266.0605 447.7588 c
S
0 To
1 0 0 1 283 422.6665 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 36 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(D) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 310 416.333 0 Tp
TP
0 Tr
/_Helvetica 21 Tf
(i) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 199.6665 494 0 Tp
TP
0 Tr
/_Symbol 36 Tf
(g) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
5 w
99 531 m
126 513 180 422.9995 189 396 c
S
351 396.3335 m
356.4336 412.6338 365.1475 455.1758 379.1211 486.3335 C
390.0117 486.332 L
412.8633 453.4546 435.459 412.9556 441 396.3335 c
S
351 531.3335 m
358.1611 526.5591 367.2227 516.7197 376.8389 504.3335 C
388.7881 504.3335 L
396.0176 515.2402 404.3633 522.3335 414 522.3335 c
450 522.3335 468 423.3325 477 396.3335 c
S
0 To
1 0 0 1 144 387 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 36 Tf
(K) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 332 483 0 Tp
TP
0 Tr
(K) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 357 476.6665 0 Tp
TP
0 Tr
/_Helvetica 21 Tf
(1) Tx 1 0 Tk
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1343 3537 a(Figure)27 b(4)100 3686 y(Since)j(the)h(arcs)e
(of)h(in)n(tersection)g(of)g Fl(K)1353 3698 y Fj(1)1420
3686 y Fp(with)h(the)g Fl(P)1811 3698 y Fi(i)1869 3686
y Fp(basically)f(include)g(the)h(arcs)e(from)0 3786 y
Fl(K)6 b Fp(,)32 b Fl(K)203 3798 y Fj(1)271 3786 y Fp(meets)f(eac)n(h)g
(three-punctured)g(sphere)g(on)g(all)g(p)r(ossible)g(essen)n(tial)f
(arc)h(t)n(yp)r(es,)h(and)0 3885 y(so)e(w)n(e)g(immediately)h(ha)n(v)n
(e)e(that)i Fl(@)5 b(X)i Fp(\()p Fl(F)1293 3897 y Fj(1)1330
3885 y Fp(\))21 b Fm(n)f Fl(K)1516 3897 y Fj(1)1583 3885
y Fp(is)30 b(incompressible)g(in)h Fl(X)7 b Fp(\()p Fl(F)2488
3897 y Fj(1)2525 3885 y Fp(\),)32 b(and)e(so)g Fl(K)2952
3897 y Fj(1)0 3985 y Fp(is)d(non-trivial)g(in)h Fl(S)645
3955 y Fj(3)709 3985 y Fp(and)g Fl(F)924 3997 y Fj(1)989
3985 y Fp(is)g(a)f(least)g(gen)n(us)g(Seifert)h(surface)e(for)h
Fl(K)2303 3997 y Fj(1)2340 3985 y Fp(.)-6 4804 y @beginspecial
16 @llx 448 @lly 1252 @urx 741 @ury 3600 @rwi @setspecial
%%BeginDocument: d_fig5.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig5.eps)
%%CreationDate: (9/10/2002) (10:32 AM)
%%BoundingBox: 16 448 1252 741
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%DocumentNeededFonts: Helvetica
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 18 16 594 778
%AI3_DocumentPreview: Header
%%PageOrigin:18 16
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 R
0 0 0 1 K
0 i
0 J 0 j 3 w 4 M []0 d
%AI3_Note:
0 D
782 494.5 m
722.3535 494.5 674 542.8535 674 602.5 c
674 662.1465 722.3535 710.5 782 710.5 c
836 710.5 l
895.6465 710.5 944 662.1465 944 602.5 c
944 542.8535 895.6465 494.5 836 494.5 c
782 494.5 l
s
1088 494.166 m
1028.3535 494.166 980 542.5195 980 602.166 c
980 661.8125 1028.3535 710.1665 1088 710.1665 c
1142 710.1665 l
1201.6465 710.1665 1250 661.8125 1250 602.166 c
1250 542.5195 1201.6465 494.166 1142 494.166 c
1088 494.166 l
s
1088 602.5 m
1088 587.5879 1075.9121 575.5 1061 575.5 c
1046.0879 575.5 1034 587.5879 1034 602.5 c
1034 617.4121 1046.0879 629.5 1061 629.5 c
1075.9121 629.5 1088 617.4121 1088 602.5 c
s
1196 602.5 m
1196 587.5879 1183.9121 575.5 1169 575.5 c
1154.0879 575.5 1142 587.5879 1142 602.5 c
1142 617.4121 1154.0879 629.5 1169 629.5 c
1183.9121 629.5 1196 617.4121 1196 602.5 c
s
890 602.5 m
890 587.5879 877.9121 575.5 863 575.5 c
848.0879 575.5 836 587.5879 836 602.5 c
836 617.4121 848.0879 629.5 863 629.5 c
877.9121 629.5 890 617.4121 890 602.5 c
s
782 602.5 m
782 587.5879 769.9121 575.5 755 575.5 c
740.0879 575.5 728 587.5879 728 602.5 c
728 617.4121 740.0879 629.5 755 629.5 c
769.9121 629.5 782 617.4121 782 602.5 c
s
0 To
1 0 0 1 800 467.5 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 14 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(T) Tx 1 40 Tk
(OP) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1097 467.5 0 Tp
TP
0 Tr
(BO) Tx 1 40 Tk
(TT) Tx 1 40 Tk
(OM) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
4 w
162.0908 558 m
142.208 557.9502 126.0498 574.0264 126 593.9092 c
125.9502 613.791 142.0273 629.9502 161.9092 630 c
181.791 630.0498 197.9502 613.9727 198 594.0908 c
198.0498 574.208 181.9727 558.0498 162.0908 558 c
s
450.0898 558.7246 m
430.209 558.6748 414.0488 574.752 414 594.6338 c
413.9492 614.5166 430.0273 630.6748 449.9082 630.7246 c
469.791 630.7754 485.9492 614.6973 486 594.8154 c
486.0488 574.9336 469.9727 558.7744 450.0898 558.7246 c
s
3 w [4 6 ]0 d
104.1367 611.2002 m
117.3867 607.2979 125.9814 601.0156 126 593.9092 c
S
1 w []0 d
85.0049 614.7695 m
92.0234 614.0898 98.501 612.8604 104.1367 611.2002 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
18 593.6377 m
17.9756 603.1123 33.207 611.2012 54.418 614.166 c
59.9131 614.9336 65.8086 615.3574 71.9453 615.373 c
73.4219 615.377 74.8857 615.3564 76.333 615.3135 c
79.2969 615.2256 82.1943 615.042 85.0049 614.7695 c
S
[]0 d
126 593.9092 m
126.0303 581.9795 101.877 572.248 72.0547 572.1729 c
42.2314 572.0986 18.0303 581.708 18 593.6377 c
18 593.6377 l
S
2 w
161.6377 738 m
449.6367 738.7256 l
529.1641 738.9258 593.7988 674.6152 594 595.0869 c
594.1992 515.5596 529.8906 450.9248 450.3613 450.7256 c
162.3623 450 l
162.3623 450 l
82.835 449.7998 18.2002 514.1094 18 593.6377 c
17.7998 673.165 82.1094 737.7998 161.6377 738 c
161.6377 738 l
S
3 w [4 6 ]0 d
581.7559 608.7363 m
589.3965 605.0303 593.9863 600.2783 594 595.0869 c
S
1 w []0 d
564.8945 614.1777 m
570.3965 613.0439 575.3438 611.54 579.5332 609.749 c
580.2988 609.4209 581.041 609.083 581.7559 608.7363 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
527.0293 615.8975 m
531.166 616.3145 535.4922 616.541 539.9453 616.5518 c
545.3613 616.5654 550.5938 616.2598 555.5293 615.6787 c
558.791 615.2949 561.9238 614.79 564.8945 614.1777 c
S
1 w []0 d
507.5234 612.1416 m
513.2461 613.8799 519.8555 615.1748 527.0293 615.8975 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
486 594.8154 m
485.9824 601.876 494.4355 608.167 507.5234 612.1416 c
S
[]0 d
486 594.8154 m
486.0293 582.8857 510.2305 573.2764 540.0547 573.3516 c
569.877 573.4268 594.0293 583.1582 594 595.0869 c
S
u
[4 6 ]0 d
198 594.0908 m
197.999 594.5615 198.0527 595.0283 198.1602 595.4932 c
S
414 594.6338 m
S
414 594.6338 m
414 594.1631 413.9473 593.6953 413.8379 593.2295 c
S
[]0 d
413.8379 593.2295 m
S
U
4 w [4 6 ]0 d
263.9316 625.3955 m
269.4316 653.3955 232.7964 666.2256 205.5 666.2256 c
142.5 666.2256 126 632.7256 126 594.7256 c
S
296.4102 610.998 m
288.9053 621.9961 278.9316 645.3955 282.9316 658.3955 c
S
1 w []0 d
315.1113 583.1523 m
308.8438 592.3584 302.6836 601.8047 296.4102 610.998 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
452.1895 527.4971 m
440.4043 520.2432 424.9609 515.7256 405 515.7256 c
381.9883 515.7256 363.6836 526.3154 347.6797 542.0801 c
340.5254 549.1289 333.8301 557.2119 327.3789 565.8447 c
323.207 571.4277 319.1367 577.2402 315.1113 583.1523 c
S
1 w []0 d
469.6367 543.125 m
465.0137 537.1875 459.2598 531.8496 452.1895 527.4971 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
486 594.7256 m
486 577.9619 481.623 558.5244 469.6367 543.125 c
S
[]0 d
395.4316 697.3955 m
458.9316 675.8955 486 626.7207 486 594.7256 c
S
306.0005 738.5283 m
357.6699 736.2646 428.4316 686.3955 466.9316 671.3955 c
S
[4 6 ]0 d
123.0566 699.6191 m
175.2822 726.3584 243.9063 738.7256 297 738.7256 c
300.0088 738.7256 303.0098 738.6592 306.0005 738.5283 c
S
1 w []0 d
71.1982 661.5127 m
71.7773 662.1563 72.3652 662.7949 72.9609 663.4297 c
86.2432 677.5781 103.5 689.6064 123.0566 699.6191 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
45.4111 586.8945 m
45.1406 590.0732 45 593.3506 45 596.7256 c
45 611.3721 48.3486 624.793 54.375 637.0293 c
58.6914 645.792 64.3809 653.9482 71.1982 661.5127 c
S
1 w []0 d
51.124 560.7686 m
48.2354 568.5557 46.2295 577.2734 45.4111 586.8945 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
97.3447 515.127 m
97.0615 515.1992 96.7773 515.2744 96.4941 515.3525 c
79.002 520.168 60.4551 535.6133 51.124 560.7686 c
S
1 w []0 d
121.6758 514.6514 m
117.5 514.0449 112.9648 513.7256 108 513.7256 c
104.5625 513.7256 100.9805 514.1953 97.3447 515.127 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
136.6719 518.5439 m
132.2061 516.7871 127.2627 515.4629 121.6758 514.6514 c
S
1 w []0 d
162.2891 536.9395 m
154.9395 529.123 147.1084 522.6514 136.6719 518.5439 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
189 567.7256 m
178.5723 556.7178 170.749 545.9375 162.2891 536.9395 c
S
[]0 d
334.4316 627.3955 m
364.4316 567.3955 224.9316 608.3955 189 567.7256 c
S
423 621.7256 m
399 587.6665 349.5 619 369 585 c
S
[4 6 ]0 d
449.7129 652.5391 m
441.4043 643.2061 433.5859 632.3115 423 621.7256 c
S
1 w []0 d
476.6094 672.958 m
465.5059 668.4766 457.4004 661.1768 449.7129 652.5391 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
540.5 586.2256 m
540.7344 589.5215 543.5938 594.8066 543.5 598.2256 c
542 652.2256 521 675.7256 497.5 677.2256 c
486.4961 677.9277 484.1074 675.9844 476.6094 672.958 c
S
1 w []0 d
562.127 561.042 m
564.4902 569.1201 566.0039 577.6553 566.6465 586.6514 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
516.3418 522.1104 m
525.3164 534.5645 531.9336 548.6123 536.5 564.2256 c
S
1 w []0 d
491.1309 496.0713 m
501.041 503.7871 509.3965 512.4717 516.3418 522.1104 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
297 450.7256 m
390.6914 450.7256 452.6328 466.0947 491.1309 496.0713 c
S
[]0 d
183.9316 477.3955 m
212.4316 470.8955 268.4839 450.7256 297 450.7256 c
S
126 594.7256 m
126 548.0732 187.4316 477.8955 247.4316 473.3955 c
S
[4 6 ]0 d
530 475.7256 m
S
1 w []0 d
329.5723 515.2998 m
S
3 w
18.5 595.7256 m
19 656.2256 121.999 712.8066 243 713.2256 c
387.5 713.7256 519.5 675.7256 521 596.2256 c
521.9336 546.7119 479.5 533.2256 450.5 533.2256 c
421.5 533.2256 387 561.2256 360.5 596.2256 c
330.0098 636.4951 288.5137 685.7256 207.5 685.7256 c
105.5 685.7256 89 620.7256 89.5 574.2256 c
90.5967 472.2207 198.001 471.2432 296 471.7256 c
397.5 472.2256 576 496.1807 576 597.2256 c
576 687.2256 489.7754 738.2725 449.6367 738.7256 c
S
[4 6 ]0 d
122.5088 489.6025 m
118.1221 489.3516 113.6201 489.2256 109 489.2256 c
49 489.2256 18.1777 556.7236 18.5 595.7256 c
S
1 w []0 d
153.1006 493.7783 m
143.585 491.6182 133.4014 490.2246 122.5088 489.6025 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
165.0723 497.0088 m
161.2041 495.7891 157.2148 494.7119 153.1006 493.7783 c
S
1 w []0 d
187.6309 506.457 m
180.6162 502.6934 173.1064 499.543 165.0723 497.0088 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
243.0005 565.6157 m
229.4575 538.9702 211.3848 519.2012 187.6309 506.457 c
S
1 w []0 d
247.9648 576.1494 m
246.3823 572.5264 244.728 569.0151 243.0005 565.6157 c
N
257.6641 602.5283 m
254.7793 593.1631 251.5557 584.3691 247.9648 576.1494 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
282.2549 655.8955 m
272.0596 641.3896 264.2822 625.5166 259.5 608.7256 c
258.9033 606.6328 258.292 604.5674 257.6641 602.5283 c
S
1 w []0 d
296.7773 673.8965 m
291.5166 668.1758 286.6602 662.1631 282.2549 655.8955 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
326.6563 700.2051 m
315.6934 692.3838 305.6587 683.5557 296.7773 673.8965 c
S
1 w []0 d
348.8633 713.9814 m
341.1172 709.835 333.6953 705.2275 326.6563 700.2051 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
357.1885 717.9966 m
352.5361 715.9272 347.9795 713.6968 343.5303 711.3149 c
S
1 w []0 d
386.0742 729.4893 m
378.002 727.0039 370.1348 724.0488 362.5215 720.6631 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
449.6367 738.7256 m
427.6797 738.9736 406.2363 735.6943 386.0742 729.4893 c
S
[]0 d
414 594 m
414 579.0884 365.6465 567 306 567 c
246.353 567 198 579.0884 198 594 c
S
[4 6 ]0 d
407.8516 603.0015 m
411.833 600.186 414 597.1563 414 594 c
S
1 w []0 d
395.998 608.9307 m
400.8691 607.0991 404.8691 605.1104 407.8516 603.0015 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
360 617.3877 m
374.4482 615.2979 386.7813 612.3955 395.998 608.9307 c
S
1 w []0 d
324 620.6265 m
336.9229 620.0845 349.0674 618.9688 360 617.3877 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
198 594 m
198 608.9116 246.353 621 306 621 c
312.1328 621 318.1465 620.8721 324 620.6265 c
S
[]0 d
835.666 496.833 m
836.334 524.167 755.666 546.833 755 575.5 c
S
4 w
800.334 495.5 m
799.666 516.833 803 530.167 785.666 542.167 c
S
829 513.5 m
797 570.833 931.666 527.5 881 584.167 c
S
3 w
782.334 708.8335 m
781.666 683.5 862.334 659.5 863 629.5 c
S
4 w
818.334 710.1665 m
819 688.833 821.666 670.167 835.666 662.167 c
S
794.334 689.5 m
838.334 632.833 709 672.167 739 626.167 c
S
3 w
834.334 602.833 m
782 602.5 l
S
4 w
847 580.833 m
828.334 560.833 802.333 602.833 793 602.833 c
S
767 626.167 m
787.666 648.167 801 601.501 822.334 602.167 c
S
3 w
1250 604.833 m
1197.667 602.833 l
S
1032.333 604.167 m
980 602.166 l
S
4 w
1241.667 562.167 m
1188.333 584.167 l
S
996.333 660.167 m
1049 627.5 l
S
3 w
1140.333 602.833 m
1088 602.5 l
S
4 w
1164.333 576.167 m
1138.333 531.5 1126.333 604.166 1099 603.5 c
S
1072.333 627.5 m
1107.667 664.833 1107 603.5 1129.667 603.5 c
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1343 4904 a(Figure)g(5)p eop
%%Page: 5 5
5 4 bop 750 42 a Fn(Unique)24 b(minimal)c(gen)n(us)25
b(Seifert)e(surfaces)h(and)g(depth)693 b(5)100 241 y
Fp(This)32 b(condition)g(is)g(b)r(est)h(determined)f(b)n(y)g(building)g
(the)h(train)f(trac)n(k)f(in)h Fl(@)5 b(X)i Fp(\()p Fl(F)12
b Fp(\))32 b(whic)n(h)0 340 y(carries)20 b(b)r(oth)h
Fl(K)27 b Fp(and)21 b Fl(K)771 352 y Fj(1)808 340 y Fp(;)i(this)f
(amoun)n(ts)e(to)i(turning)f(eac)n(h)f(p)r(oin)n(t)i(of)f(in)n
(tersection)f(of)i Fl(K)k Fp(with)0 440 y Fl(\015)48
410 y Fh(0)97 440 y Fp(in)n(to)f(a)g(pair)g(of)h(switc)n(hes)f
(\(Figure)g(5\).)36 b(W)-7 b(e)26 b(can)f(then)h(see)f(directly)h(that)
g(the)g(in)n(tersection)0 540 y(of)h(the)g(train)f(trac)n(k)g(with)h
(eac)n(h)f(three-punctured)h(sphere)f(do)r(es)h(not)g(carry)e(a)h
(trivial)g(arc,)h(so)0 639 y(long)h(as)g(it)h(do)r(es)f(not)h(carry)e
(an)h Fk(outermost)g Fp(one.)40 b(This)28 b(is)h(essen)n(tially)e(an)h
(Euler)g(c)n(haracter-)0 739 y(istic)g(argumen)n(t.)38
b(No)28 b(horizon)n(tal)e(b)r(oundary)i(comp)r(onen)n(t)f(of)h(the)h
(train)f(trac)n(k)f(is)h(b)r(oundary)0 839 y(parallel,)c(and)h(no)f
(complemen)n(tary)f(region)h(is)g(a)g(smo)r(oth)h(disk)f(or)g(monogon.)
34 b(Therefore,)24 b(no)0 938 y(complemen)n(tary)32 b(region)h(has)g
(strictly)g(p)r(ositiv)n(e)g(\(orbifold\))g(Euler)g(c)n(haracteristic,)
g(and)h(so)0 1038 y(no)27 b(union)h(of)f(regions)g(can.)100
1148 y(W)-7 b(e)30 b(pro)n(vide)e(sev)n(eral)g(examples)h(of)g(suc)n(h)
h Fl(\015)1511 1118 y Fh(0)1563 1148 y Fp(in)g(Figure)f(6.)43
b(Note)29 b(that)h(a)g(Dehn)g(t)n(wist)g(in)0 1248 y(the)h(opp)r(osite)
e(direction)h(yields)g(a)g(knot)g(whic)n(h)g(do)r(es)g(ha)n(v)n(e)f
(trivial)h(arcs,)g(while)g(t)n(wisting)g Fl(n)0 1347
y Fp(times)j(in)g(the)g(direction)g(in)g(whic)n(h)f(one)h(t)n(wist)g(w)
n(orks)e(yields)h(knots)h Fl(K)2322 1359 y Fi(n)2399
1347 y Fp(whic)n(h)g(also)f(meet)0 1447 y(the)27 b(punctured)f(spheres)
g(in)g(essen)n(tial)g(arcs,)f(b)r(ecause)h(the)h(resulting)f(curv)n(es)
f(are)g(carried)g(b)n(y)0 1546 y(the)g(same)g(train)g(trac)n(k)e(as)i
Fl(K)927 1558 y Fj(1)964 1546 y Fp(.)36 b Fl(K)1094 1558
y Fi(n)1164 1546 y Fp(is)24 b(therefore)h(non-trivial)f(in)h
Fl(S)2147 1516 y Fj(3)2184 1546 y Fp(,)g(and)g Fl(F)2444
1558 y Fi(n)2515 1546 y Fp(is)g(least)g(gen)n(us)0 1646
y(for)i Fl(K)198 1658 y Fi(n)243 1646 y Fp(,)h(for)f(eac)n(h)f
Fl(n)d Fm(\025)g Fp(1.)-6 3245 y @beginspecial -40 @llx
254 @lly 1289 @urx 910 @ury 3600 @rwi @setspecial
%%BeginDocument: d_fig6.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig6.eps)
%%CreationDate: (9/10/2002) (10:34 AM)
%%BoundingBox: -40 254 1289 910
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%+ Symbol
%%DocumentNeededFonts: Helvetica
%%+ Symbol
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 18 16 594 778
%AI3_DocumentPreview: Header
%%PageOrigin:18 16
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
%%IncludeFont: Symbol
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/space
/exclam
/universal
/numbersign
/existential
/percent
/ampersand
/suchthat
/parenleft
/parenright
/asteriskmath
/plus
/comma
/minus
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/congruent
/Alpha
/Beta
/Chi
/Delta
/Epsilon
/Phi
/Gamma
/Eta
/Iota
/theta1
/Kappa
/Lambda
/Mu
/Nu
/Omicron
/Pi
/Theta
/Rho
/Sigma
/Tau
/Upsilon
/sigma1
/Omega
/Xi
/Psi
/Zeta
/bracketleft
/therefore
/bracketright
/perpendicular
/underscore
/radicalex
/alpha
/beta
/chi
/delta
/epsilon
/phi
/gamma
/eta
/iota
/phi1
/kappa
/lambda
/mu
/nu
/omicron
/pi
/theta
/rho
/sigma
/tau
/upsilon
/omega1
/omega
/xi
/psi
/zeta
/braceleft
/bar
/braceright
/similar
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Euro
/Upsilon1
/minute
/lessequal
/fraction
/infinity
/florin
/club
/diamond
/heart
/spade
/arrowboth
/arrowleft
/arrowup
/arrowright
/arrowdown
/degree
/plusminus
/second
/greaterequal
/multiply
/proportional
/partialdiff
/bullet
/divide
/notequal
/equivalence
/approxequal
/ellipsis
/arrowvertex
/arrowhorizex
/carriagereturn
/aleph
/Ifraktur
/Rfraktur
/weierstrass
/circlemultiply
/circleplus
/emptyset
/intersection
/union
/propersuperset
/reflexsuperset
/notsubset
/propersubset
/reflexsubset
/element
/notelement
/angle
/gradient
/registerserif
/copyrightserif
/trademarkserif
/product
/radical
/dotmath
/logicalnot
/logicaland
/logicalor
/arrowdblboth
/arrowdblleft
/arrowdblup
/arrowdblright
/arrowdbldown
/lozenge
/angleleft
/registersans
/copyrightsans
/trademarksans
/summation
/parenlefttp
/parenleftex
/parenleftbt
/bracketlefttp
/bracketleftex
/bracketleftbt
/bracelefttp
/braceleftmid
/braceleftbt
/braceex
/.notdef
/angleright
/integral
/integraltp
/integralex
/integralbt
/parenrighttp
/parenrightex
/parenrightbt
/bracketrighttp
/bracketrightex
/bracketrightbt
/bracerighttp
/bracerightmid
/bracerightbt
/.notdef
/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 R
0 0 0 1 K
0 i
0 J 0 j 3.991 w 4 M [4 6 ]0 d
%AI3_Note:
0 D
848.626 544.1162 m
803.626 544.1162 794.626 265.1162 650.626 256.1162 c
S
4 w
811.4648 583.2231 m
908.4648 559.2231 1018.9648 863.2231 1067.9648 863.2231 c
S
[]0 d
596.7168 365.1729 m
576.834 365.123 560.6758 381.1992 560.626 401.082 c
560.5762 420.9639 576.6533 437.123 596.5352 437.1729 c
616.417 437.2227 632.5762 421.1455 632.626 401.2637 c
632.6758 381.3809 616.5986 365.2227 596.7168 365.1729 c
s
884.7168 365.8975 m
864.835 365.8477 848.6758 381.9248 848.626 401.8066 c
848.5752 421.6895 864.6533 437.8477 884.5352 437.8975 c
904.417 437.9482 920.5752 421.8701 920.626 401.9883 c
920.6758 382.1064 904.5986 365.9473 884.7168 365.8975 c
s
3 w [4 6 ]0 d
452.626 400.8105 m
452.6016 410.2852 467.833 418.374 489.0439 421.3389 c
494.5391 422.1064 500.4346 422.5303 506.5713 422.5459 c
508.0479 422.5498 509.5117 422.5293 510.959 422.4863 c
513.9229 422.3984 516.8203 422.2148 519.6309 421.9424 C
526.6494 421.2627 533.127 420.0332 538.7627 418.373 c
552.0127 414.4697 560.6074 408.1885 560.626 401.082 c
S
[]0 d
560.626 401.082 m
560.6563 389.1523 536.5029 379.4209 506.6807 379.3457 c
476.8574 379.2715 452.6563 388.8809 452.626 400.8105 c
452.626 400.8105 l
S
2 w
596.2637 545.1729 m
884.2637 545.8984 l
963.791 546.0986 1028.4258 481.7881 1028.626 402.2598 c
1028.8262 322.7324 964.5166 258.0977 884.9883 257.8984 c
596.9883 257.1729 l
596.9883 257.1729 l
517.4609 256.9727 452.8262 321.2822 452.626 400.8105 c
452.4258 480.3379 516.7354 544.9727 596.2637 545.1729 c
596.2637 545.1729 l
S
3 w [4 6 ]0 d
920.626 401.9883 m
920.6084 409.0488 929.0625 415.3398 942.1494 419.3145 c
947.8721 421.0527 954.4814 422.3477 961.6553 423.0703 c
965.793 423.4873 970.1191 423.7139 974.5713 423.7246 c
979.9883 423.7383 985.2207 423.4326 990.1563 422.8516 c
993.418 422.4678 996.5498 421.9629 999.5205 421.3506 c
1005.0225 420.2168 1009.9707 418.7129 1014.1592 416.9219 c
1014.9258 416.5938 1015.667 416.2559 1016.3818 415.9092 c
1024.0225 412.2031 1028.6123 407.4512 1028.626 402.2598 c
S
[]0 d
920.626 401.9883 m
920.6563 390.0586 944.8574 380.4492 974.6807 380.5244 c
1004.5029 380.5996 1028.6563 390.3311 1028.626 402.2598 c
S
u
[4 6 ]0 d
632.626 401.2637 m
632.625 401.7344 632.6787 402.2012 632.7861 402.666 c
S
848.626 401.8066 m
S
848.626 401.8066 m
848.627 401.3359 848.5732 400.8682 848.4648 400.4023 c
S
[]0 d
848.4648 400.4023 m
S
U
4 w [4 6 ]0 d
731.0361 418.1709 m
707.002 453.3936 679.8154 473.3984 640.126 473.3984 c
577.126 473.3984 560.626 439.8984 560.626 401.8984 c
S
1 w []0 d
749.7383 390.3252 m
743.4707 399.5313 737.3096 408.9775 731.0361 418.1709 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
886.8154 334.6699 m
875.0313 327.416 859.5879 322.8984 839.626 322.8984 c
816.6143 322.8984 798.3105 333.4883 782.3066 349.2529 c
775.1514 356.3018 768.4561 364.3848 762.0049 373.0176 c
757.833 378.6006 753.7637 384.4131 749.7383 390.3252 c
S
904.2627 350.2979 m
899.6406 344.3604 893.8867 339.0225 886.8154 334.6699 c
S
920.626 401.8984 m
920.626 385.1348 916.25 365.6973 904.2627 350.2979 c
S
[]0 d
740.626 545.7012 m
836.0137 541.5215 920.626 471.71 920.626 401.8984 c
S
[4 6 ]0 d
577.3525 328.5029 m
575.4297 327.4824 573.417 326.5508 571.2979 325.7168 c
566.832 323.959 561.8887 322.6357 556.3018 321.8242 c
552.126 321.2178 547.5898 320.9902 542.626 320.8984 c
434.2959 318.8936 472.6709 447.5186 501.2959 475.2275 c
515.2393 488.7246 535.0723 503.8809 554.6289 513.8936 c
606.8545 540.6328 678.5322 545.8984 731.626 545.8984 c
734.6348 545.8984 737.6357 545.832 740.626 545.7012 c
S
623.626 374.8984 m
613.1982 363.8906 605.375 353.1104 596.915 344.1123 c
596.2373 343.3916 595.5547 342.6816 594.8672 341.9844 c
S
[]0 d
857.626 428.8984 m
821.626 392.8984 659.626 412.8984 623.626 374.8984 c
S
[4 6 ]0 d
887.1396 462.3213 m
886.1055 461.5088 885.165 460.6396 884.3389 459.7119 c
876.0322 450.3779 868.2119 439.4844 857.626 428.8984 c
S
731.626 257.8984 m
825.3184 257.8984 903.8789 273.5605 938.1289 291.3105 c
949.2803 297.0898 969.5498 315.6602 977.1289 324.8105 c
997.6289 349.5605 1011.9736 390.123 1007.6289 419.8105 c
1000.1289 471.0605 959.6709 476.0488 936.1289 476.5605 c
924.6289 476.8105 909.6289 473.8105 905.3789 471.3105 c
S
[]0 d
560.626 401.8984 m
560.626 329.8984 650.626 257.8984 731.626 257.8984 c
S
[4 6 ]0 d
964.626 282.8984 m
S
0 To
1 0 0 1 674.4473 559.6895 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w []0 d
/_Helvetica 36 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(K) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
3.991 w
650.626 256.1162 m
623.6787 254.4326 605.6465 292.1162 578.626 292.1162 c
542.626 292.1162 488.626 341.5264 488.626 401.1729 c
488.626 460.8193 537.0049 510.9229 596.626 509.1729 c
632.626 508.1162 848.626 490.1162 884.626 490.1162 c
934.332 490.1162 974.626 449.8223 974.626 400.1162 c
974.626 350.4102 934.332 310.1162 884.626 310.1162 c
857.626 310.1162 623.626 328.1162 596.626 329.1729 c
556.8916 330.7275 524.626 361.4082 524.626 401.1729 c
524.626 440.9375 556.8613 473.1074 596.626 473.1729 c
632.626 473.2314 854.8027 455.1729 884.626 455.1729 c
914.4492 455.1729 938.626 430.9961 938.626 401.1729 c
938.626 371.3496 914.4482 347.4648 884.626 347.1729 c
776.626 346.1162 659.626 454.1162 596.626 454.1162 c
566.8027 454.1162 542.626 429.9395 542.626 400.1162 c
542.626 370.293 566.8027 346.1162 596.626 346.1162 c
623.626 346.1162 857.626 328.1162 884.626 328.1162 c
924.3906 328.1162 956.626 360.2061 956.626 399.792 c
956.626 439.3779 924.3838 472.1846 884.626 471.4678 c
848.626 470.8193 632.626 490.1162 596.626 491.1729 c
546.9414 492.6318 506.626 450.8789 506.626 401.1729 c
506.626 351.4668 546.958 313.1162 596.626 311.1729 c
623.626 310.1162 857.626 292.1162 884.626 292.1162 c
944.2725 292.1162 992.626 340.4697 992.626 400.1162 c
992.626 459.7627 938.626 508.1162 902.626 508.1162 c
866.626 508.1162 875.626 544.1162 848.626 544.1162 c
S
4 w
855.2061 683.2231 m
835.3232 683.1733 819.165 699.2495 819.1152 719.1323 c
819.0654 739.0142 835.1426 755.1733 855.0244 755.2231 c
874.9063 755.2729 891.0654 739.1958 891.1152 719.314 c
891.165 699.4312 875.0879 683.2729 855.2061 683.2231 c
s
1143.2061 683.9478 m
1123.3242 683.8979 1107.165 699.9751 1107.1152 719.8569 c
1107.0645 739.7397 1123.1426 755.8979 1143.0244 755.9478 c
1162.9063 755.9985 1179.0645 739.9204 1179.1152 720.0386 c
1179.165 700.1567 1163.0879 683.9976 1143.2061 683.9478 c
s
3 w [4 6 ]0 d
711.1152 718.8608 m
711.0908 728.3354 726.3223 736.4243 747.5332 739.3892 c
753.0283 740.1567 758.9238 740.5806 765.0605 740.5962 c
766.5371 740.6001 768.001 740.5796 769.4482 740.5366 c
772.4121 740.4487 775.3096 740.2651 778.1201 739.9927 C
785.1387 739.313 791.6162 738.0835 797.252 736.4233 c
810.502 732.52 819.0967 726.2388 819.1152 719.1323 c
S
[]0 d
819.1152 719.1323 m
819.1455 707.2026 794.9922 697.4712 765.1699 697.396 c
735.3467 697.3218 711.1455 706.9312 711.1152 718.8608 c
711.1152 718.8608 l
S
2 w
854.7529 863.2231 m
1142.7529 863.9487 l
1222.2803 864.1489 1286.915 799.8384 1287.1152 720.3101 c
1287.3154 640.7827 1223.0059 576.1479 1143.4775 575.9487 c
855.4775 575.2231 l
855.4775 575.2231 l
775.9502 575.0229 711.3154 639.3325 711.1152 718.8608 c
710.915 798.3882 775.2246 863.0229 854.7529 863.2231 c
854.7529 863.2231 l
S
3 w [4 6 ]0 d
1179.1152 720.0386 m
1179.0977 727.0991 1187.5518 733.3901 1200.6387 737.3647 c
1206.3613 739.103 1212.9707 740.3979 1220.1445 741.1206 c
1224.2822 741.5376 1228.6084 741.7642 1233.0605 741.7749 c
1238.4775 741.7886 1243.71 741.4829 1248.6455 740.9019 c
1251.9072 740.5181 1255.0391 740.0132 1258.0098 739.4009 c
1263.5117 738.2671 1268.46 736.7632 1272.6484 734.9722 c
1273.415 734.644 1274.1563 734.3062 1274.8711 733.9595 c
1282.5117 730.2534 1287.1016 725.5015 1287.1152 720.3101 c
S
[]0 d
1179.1152 720.0386 m
1179.1455 708.1089 1203.3467 698.4995 1233.1699 698.5747 c
1262.9922 698.6499 1287.1455 708.3813 1287.1152 720.3101 c
S
u
[4 6 ]0 d
891.1152 719.314 m
891.1143 719.7847 891.168 720.2515 891.2754 720.7163 c
S
1107.1152 719.8569 m
S
1107.1152 719.8569 m
1107.1162 719.3862 1107.0625 718.9185 1106.9541 718.4526 c
S
[]0 d
1106.9541 718.4526 m
S
U
4 w [4 6 ]0 d
989.5254 736.2212 m
965.4912 771.4438 938.3047 791.4487 898.6152 791.4487 c
835.6152 791.4487 819.1152 757.9487 819.1152 719.9487 c
S
1 w []0 d
1008.2275 708.3755 m
1001.96 717.5815 995.7988 727.0278 989.5254 736.2212 c
S
4 w [4 6 ]0 d
1145.3047 652.7202 m
1133.5205 645.4663 1118.0771 640.9487 1098.1152 640.9487 c
1075.1035 640.9487 1056.7998 651.5386 1040.7959 667.3032 c
1033.6406 674.3521 1026.9453 682.4351 1020.4941 691.0679 c
1016.3223 696.6509 1012.2529 702.4634 1008.2275 708.3755 c
S
1162.752 668.3481 m
1158.1299 662.4106 1152.376 657.0728 1145.3047 652.7202 c
S
1179.1152 719.9487 m
1179.1152 703.1851 1174.7393 683.7476 1162.752 668.3481 c
S
[]0 d
999.1152 863.7515 m
1094.5029 859.5718 1179.1152 789.7603 1179.1152 719.9487 c
S
[4 6 ]0 d
835.8418 646.5532 m
833.9189 645.5327 831.9063 644.6011 829.7871 643.7671 c
825.3213 642.0093 820.3779 640.686 814.791 639.8745 c
810.6152 639.2681 806.0791 639.0405 801.1152 638.9487 c
692.7842 636.9438 731.1602 765.5688 759.7842 793.2778 c
773.7275 806.7749 793.5615 821.9312 813.1182 831.9438 c
865.3438 858.6831 937.0215 863.9487 990.1152 863.9487 c
993.124 863.9487 996.125 863.8823 999.1152 863.7515 c
S
882.1152 692.9487 m
871.6875 681.9409 863.8643 671.1606 855.4043 662.1626 c
854.7266 661.4419 854.0439 660.7319 853.3564 660.0347 c
S
[]0 d
1116.1152 746.9487 m
1080.1152 710.9487 918.1152 730.9487 882.1152 692.9487 c
S
[4 6 ]0 d
1145.6289 780.3716 m
1144.5947 779.5591 1143.6543 778.6899 1142.8281 777.7622 c
1134.5215 768.4282 1126.7012 757.5347 1116.1152 746.9487 c
S
990.1152 575.9487 m
1083.8076 575.9487 1162.3682 591.6108 1196.6182 609.3608 c
1207.7695 615.1401 1228.0391 633.7104 1235.6182 642.8608 c
1256.1182 667.6108 1270.4629 708.1733 1266.1182 737.8608 c
1258.6182 789.1108 1218.1602 794.0991 1194.6182 794.6108 c
1183.1182 794.8608 1168.1182 791.8608 1163.8682 789.3608 c
S
[]0 d
819.1152 719.9487 m
819.1152 647.9487 909.1152 575.9487 990.1152 575.9487 c
S
[4 6 ]0 d
1223.1152 600.9487 m
S
0 To
1 0 0 1 827.9424 873.2407 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w []0 d
(K) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
4 w
875.9648 575.2231 m
824.9648 573.7231 804.8066 618.4126 785.4648 651.7231 c
776.4648 667.2231 765.1152 698.9634 765.1152 719.2231 c
765.1152 768.9292 805.875 816.0166 855.1152 809.2231 c
952.9648 795.7231 1092.9648 665.2231 1143.1152 665.2231 c
1172.9385 665.2231 1197.1152 689.3999 1197.1152 719.2231 c
1197.1152 749.0464 1172.9385 773.2231 1143.1152 773.2231 c
1100.2656 773.2231 897.9648 827.2231 855.1152 827.2231 c
795.4678 827.2231 747.1152 778.8696 747.1152 719.2231 c
747.1152 695.7124 750.9648 670.2231 759.9648 649.7231 c
765.5664 636.9634 778.457 591.3901 811.4648 583.2231 c
S
[4 6 ]0 d
1108.9648 864.2231 m
1064.4648 863.2231 926.9648 576.7231 875.9648 575.2231 c
S
[]0 d
1149.9648 863.2231 m
1203.9648 854.2231 1225.3477 801.2217 1234.4648 783.2231 c
1244.335 763.7378 1251.1152 742.7339 1251.1152 719.2231 c
1251.1152 659.5767 1202.7617 611.2231 1143.1152 611.2231 c
1086.9648 611.2231 893.2656 665.2231 855.1152 665.2231 c
825.292 665.2231 801.1152 689.3999 801.1152 719.2231 c
801.1152 749.0464 825.292 773.2231 855.1152 773.2231 c
896.9648 773.2231 1053.4648 629.7231 1143.1152 629.2231 c
1192.8203 628.9458 1233.1152 669.5171 1233.1152 719.2231 c
1233.1152 743.7515 1222.6816 765.7275 1209.4648 784.2231 c
1198.3896 799.7217 1153.4648 865.2231 1108.9648 864.2231 c
S
[4 6 ]0 d
910.4648 575.2231 m
968.9648 575.2231 1095.9648 872.2231 1149.9648 863.2231 c
S
[]0 d
1067.9648 863.2231 m
1116.9648 863.2231 1184.21 794.606 1194.4648 779.2231 c
1206.4648 761.2231 1215.1152 740.9106 1215.1152 719.5474 c
1215.1152 679.9614 1182.8779 648.2681 1143.1152 647.8716 c
1077.9648 647.2231 911.2656 791.2231 855.1152 791.2231 c
815.3506 791.2231 783.1152 758.9878 783.1152 719.2231 c
783.1152 702.1978 794.2275 676.7017 802.4648 663.2231 c
813.4648 645.2231 870.1309 575.2231 910.4648 575.2231 c
S
165.7412 681.1123 m
145.8584 681.0625 129.7002 697.1387 129.6504 717.0215 c
129.6006 736.9033 145.6777 753.0625 165.5596 753.1123 c
185.4414 753.1621 201.6006 737.085 201.6504 717.2031 c
201.7002 697.3203 185.623 681.1621 165.7412 681.1123 c
s
453.7412 681.8369 m
433.8594 681.7871 417.7002 697.8643 417.6504 717.7461 c
417.5996 737.6289 433.6777 753.7871 453.5596 753.8369 c
473.4414 753.8877 489.5996 737.8096 489.6504 717.9277 c
489.7002 698.0459 473.623 681.8867 453.7412 681.8369 c
s
3 w [4 6 ]0 d
21.6504 716.75 m
21.626 726.2246 36.8574 734.3135 58.0684 737.2783 c
63.5635 738.0459 69.459 738.4697 75.5957 738.4854 c
77.0723 738.4893 78.5361 738.4688 79.9834 738.4258 c
82.9473 738.3379 85.8447 738.1543 88.6553 737.8818 C
95.6738 737.2021 102.1514 735.9727 107.7871 734.3125 c
121.0371 730.4092 129.6318 724.1279 129.6504 717.0215 c
S
[]0 d
129.6504 717.0215 m
129.6807 705.0918 105.5273 695.3604 75.7051 695.2852 c
45.8818 695.2109 21.6807 704.8203 21.6504 716.75 c
21.6504 716.75 l
S
2 w
165.2881 861.1123 m
453.2881 861.8379 l
532.8154 862.0381 597.4502 797.7275 597.6504 718.1992 c
597.8506 638.6719 533.541 574.0371 454.0127 573.8379 c
166.0127 573.1123 l
166.0127 573.1123 l
86.4854 572.9121 21.8506 637.2217 21.6504 716.75 c
21.4502 796.2773 85.7598 860.9121 165.2881 861.1123 c
165.2881 861.1123 l
S
3 w [4 6 ]0 d
489.6504 717.9277 m
489.6328 724.9883 498.0869 731.2793 511.1738 735.2539 c
516.8965 736.9922 523.5059 738.2871 530.6797 739.0098 c
534.8174 739.4268 539.1436 739.6533 543.5957 739.6641 c
549.0127 739.6777 554.2451 739.3721 559.1807 738.791 c
562.4424 738.4072 565.5742 737.9023 568.5449 737.29 c
574.0469 736.1563 578.9951 734.6523 583.1836 732.8613 c
583.9502 732.5332 584.6914 732.1953 585.4063 731.8486 c
593.0469 728.1426 597.6367 723.3906 597.6504 718.1992 c
S
[]0 d
489.6504 717.9277 m
489.6807 705.998 513.8818 696.3887 543.7051 696.4639 c
573.5273 696.5391 597.6807 706.2705 597.6504 718.1992 c
S
u
[4 6 ]0 d
201.6504 717.2031 m
201.6494 717.6738 201.7031 718.1406 201.8105 718.6055 c
S
417.6504 717.7461 m
S
417.6504 717.7461 m
417.6514 717.2754 417.5977 716.8076 417.4893 716.3418 c
S
[]0 d
417.4893 716.3418 m
S
U
4 w [4 6 ]0 d
300.0605 734.1104 m
276.0264 769.333 248.8398 789.3379 209.1504 789.3379 c
146.1504 789.3379 129.6504 755.8379 129.6504 717.8379 c
S
1 w []0 d
318.7627 706.2646 m
312.4951 715.4707 306.334 724.917 300.0605 734.1104 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
455.8398 650.6094 m
444.0557 643.3555 428.6123 638.8379 408.6504 638.8379 c
385.6387 638.8379 367.335 649.4277 351.3311 665.1924 c
344.1758 672.2412 337.4805 680.3242 331.0293 688.957 c
326.8574 694.54 322.7881 700.3525 318.7627 706.2646 c
S
473.2871 666.2373 m
468.665 660.2998 462.9111 654.9619 455.8398 650.6094 c
S
489.6504 717.8379 m
489.6504 701.0742 485.2744 681.6367 473.2871 666.2373 c
S
[]0 d
309.6504 861.6406 m
405.0381 857.4609 489.6504 787.6494 489.6504 717.8379 c
S
[4 6 ]0 d
146.377 644.4424 m
144.4541 643.4219 142.4414 642.4902 140.3223 641.6563 c
135.8564 639.8984 130.9131 638.5752 125.3262 637.7637 c
121.1504 637.1572 116.6143 636.9297 111.6504 636.8379 c
3.3193 634.833 41.6953 763.458 70.3193 791.167 c
84.2627 804.6641 104.0967 819.8203 123.6533 829.833 c
175.8789 856.5723 247.5566 861.8379 300.6504 861.8379 c
303.6592 861.8379 306.6602 861.7715 309.6504 861.6406 c
S
192.6504 690.8379 m
182.2227 679.8301 174.3994 669.0498 165.9395 660.0518 c
165.2617 659.3311 164.5791 658.6211 163.8916 657.9238 c
S
[]0 d
426.6504 744.8379 m
390.6504 708.8379 228.6504 728.8379 192.6504 690.8379 c
S
[4 6 ]0 d
456.1641 778.2607 m
455.1299 777.4482 454.1895 776.5791 453.3633 775.6514 c
445.0566 766.3174 437.2363 755.4238 426.6504 744.8379 c
S
300.6504 573.8379 m
394.3428 573.8379 451.75 590.25 486 608 c
497.1514 613.7793 523.1367 636.7402 529.667 646.6665 c
546.333 672 551.667 704.6665 546 734 c
541.6748 756.3896 528.667 775.3335 504 787 c
493.6016 791.918 478.6533 789.75 474.4033 787.25 c
S
[]0 d
129.6504 717.8379 m
129.6504 645.8379 219.6504 573.8379 300.6504 573.8379 c
S
[4 6 ]0 d
533.6504 598.8379 m
S
0 To
1 0 0 1 348.4775 875.6299 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w []0 d
(K) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
4 w [4 6 ]0 d
441.5 574 m
363.5 573 320 862 188.667 862 c
S
[]0 d
188.667 862 m
142.667 862 101.4307 833.3481 87.667 818.6665 c
72.667 802.6665 57.6504 776.7588 57.6504 717.1123 c
57.6504 657.4658 106.0029 609.2197 165.6504 609.1123 c
228 609 398.2129 604.1758 453.5 626 c
491.5 641 525.6504 677.8506 525.6504 717.4365 c
525.6504 757.0225 493.2646 799.8574 453.5 800 c
314 800.5 250.3496 662.8877 170 663 c
130.2354 663.0557 93.6504 677.3477 93.6504 717.1123 c
93.6504 756.877 125.7246 799.9492 165.5 809 c
249 828 400.3008 825.2246 453.6504 825.1123 c
513.2969 824.9868 564.0176 776.9351 566.333 717.3335 c
567.667 683 560.5 654.5 546 634 c
526.4297 606.332 485.999 574.5703 441.5 574 c
S
147 825 m
S
2 w
267.7129 725.9028 m
280.3105 724.0854 l
258.6875 707.915 l
271.2852 706.0977 l
S
1114.1289 786.4233 m
1121.6377 776.1465 l
1094.959 780.2988 l
1102.4678 770.022 l
S
904.6973 760.8882 m
907.2031 748.4087 l
884.7266 763.3696 l
887.2314 750.8911 l
S
203.165 618.3325 m
212.165 609.3325 l
185.165 609.3325 l
194.165 600.3325 l
S
361.9121 643.3228 m
373.96 639.2202 l
362.04 663.4463 l
374.0889 659.3442 l
S
427.166 835 m
436.166 826 l
409.166 826 l
418.166 817 l
S
1067.0635 709.8306 m
1069.4863 697.3345 l
1047.1094 712.4438 l
1049.5322 699.9478 l
S
152.1084 673.3281 m
159.2588 662.7988 l
132.7393 667.8672 l
139.8896 657.3374 l
S
456.6045 808.9468 m
465.498 799.8418 l
438.5 800.1582 l
447.3936 791.0532 l
S
243.3213 832.8003 m
255.9023 834.7212 l
234.1465 850.7114 l
246.7285 852.6323 l
S
404.1826 582.6904 m
416.8809 581.833 l
399.1172 602.167 l
411.8164 601.3101 l
S
871.8965 673.2505 m
879.6895 663.186 l
852.9053 666.5923 l
860.6973 656.5298 l
S
982.293 662.3882 m
984.9951 649.9507 l
999.5977 672.6606 l
1002.3008 660.2231 l
S
1014.2109 766.5557 m
1016.9131 754.1177 l
1031.5156 776.8281 l
1034.2188 764.3901 l
S
928.4609 685.3052 m
931.1631 672.8677 l
945.7656 695.5786 l
948.4688 683.1401 l
S
950.6973 757.2222 m
953.2031 744.7427 l
930.7266 759.7036 l
933.2324 747.2241 l
S
852.2256 499.9766 m
860.0186 489.9131 l
833.2334 493.3193 l
841.0264 483.2559 l
S
772.7256 486.4766 m
780.5186 476.4131 l
753.7334 479.8193 l
761.5264 469.7559 l
S
847.7256 465.4766 m
855.5186 455.4131 l
828.7334 458.8193 l
836.5264 448.7559 l
S
646.7256 351.4766 m
654.5186 341.4131 l
627.7334 344.8193 l
635.5264 334.7559 l
S
660.2256 315.4766 m
668.0186 305.4131 l
641.2334 308.8193 l
649.0264 298.7559 l
S
556.2549 354.5381 m
555.9102 341.8154 l
537.3418 361.417 l
536.9971 348.6943 l
S
691.8467 427.9189 m
695.5225 415.7334 l
671.7295 428.499 l
675.4053 416.3135 l
S
787.7354 431.7646 m
793.9131 420.6357 l
801.3389 446.5957 l
807.5166 435.4678 l
S
0 To
1 0 0 1 236 655 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Symbol 36 Tf
(g) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 986.2168 818.4966 0 Tp
TP
0 Tr
(g) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 700.7275 355.3896 0 Tp
TP
0 Tr
(g) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 -40 718 0 Tp
TP
0 Tr
/_Helvetica 36 Tf
(\(a\)) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 651.6152 726.2231 0 Tp
TP
0 Tr
(\(b\)) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 393.126 404.1162 0 Tp
TP
0 Tr
(\(c\)) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
676.7393 389.0459 m
648.2832 388.5664 l
670.7607 406.0234 l
B
929.5615 703.751 m
901.1055 703.2715 l
923.583 720.7285 l
B
240.3872 703.7915 m
211.9312 703.312 l
234.4087 720.769 l
B
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1343 3345 a(Figure)k(6)100 3526 y(The)c(fundamen)n(tal)g
(group)f(of)h Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\))23 b(is)g(free)g(of)g
(rank)f(t)n(w)n(o;)i(it)g(has)e(a)h(basis)f(represen)n(ted)g(b)n(y)0
3626 y(lo)r(ops,)31 b(whic)n(h)g(w)n(e)g(ma)n(y)f(tak)n(e)h(to)f(lie)i
(in)f Fl(@)5 b(X)i Fp(\()p Fl(F)12 b Fp(\),)31 b(and)g(whic)n(h)g(eac)n
(h)f(in)n(tersect)h(exactly)f(once)0 3725 y(one)e(of)g(the)g(t)n(w)n(o)
g(standard)f(compressing)g(disks)g Fl(D)1639 3737 y Fj(1)1676
3725 y Fl(;)14 b(D)1782 3737 y Fj(2)1848 3725 y Fp(for)27
b Fl(@)5 b(X)i Fp(\()p Fl(F)12 b Fp(\))28 b(lab)r(elled)g(in)h(Figure)e
(2.)0 3825 y(The)i(lo)r(op)f(whic)n(h)h(in)n(tersects)f(the)h(left)h
(disk,)f(orien)n(ted)f(to)g(b)r(e)h(tra)n(v)n(elling)e(do)n(wn)i(as)f
(it)h(passes)0 3925 y(through)j(the)i(disk,)g(w)n(e)f(will)g(denote)g
Fl(a)p Fp(;)j(the)e(other,)g(orien)n(ted)e(similarly)-7
b(,)34 b(will)f(b)r(e)h(denoted)0 4024 y(b)n(y)g Fl(b)p
Fp(.)55 b(An)34 b(elemen)n(t)g Fl(x)h Fp(of)f Fl(\031)921
4036 y Fj(1)958 4024 y Fp(\()p Fl(X)7 b Fp(\()p Fl(F)12
b Fp(\)\))35 b(can)e(b)r(e)h(written)g(as)g(a)f(w)n(ord)g(in)h
Fl(a)g Fp(and)g Fl(b)f Fp(and)h(their)0 4124 y(in)n(v)n(erses;)g(this)g
(w)n(ord)e(can)h(b)r(e)h(read)e(o\013)h(from)g(a)g(lo)r(op)g(represen)n
(ting)e Fl(x)j Fp(b)n(y)f(reading)f(o\013)h(the)0 4224
y(sequence)27 b(of)h(disks)f Fl(D)714 4236 y Fj(1)778
4224 y Fp(and)h Fl(D)1009 4236 y Fj(2)1046 4224 y Fp(,)g(and)f(the)h
(directions,)f(that)h Fl(x)g Fp(passes)e(through.)100
4334 y(In)f(the)g(end,)g(it)h(will)f(not)g(matter)f(m)n(uc)n(h)h(whic)n
(h)f(sp)r(eci\014c)h(w)n(ords)f(in)h Fl(F)12 b Fp(\()p
Fl(a;)i(b)p Fp(\))25 b(our)f(knots)g Fl(K)2944 4346 y
Fi(n)0 4433 y Fp(sp)r(ell)e(out;)i(our)d(argumen)n(ts)g(turn)h(out)g
(to)f(b)r(e)i(fairly)e(general,)h(relying)e(only)i(on)g(the)g(prop)r
(erties)0 4533 y(outlined)40 b(in)h(Section)f(1.)74 b(But)41
b(with)f(a)g(little)h(practice,)i(it)d(b)r(ecomes)g(a)g(straigh)n
(tforw)n(ard)0 4633 y(exercise)27 b(to)h(determine)g(the)h(w)n(ord)e
(represen)n(ting)f(the)j(curv)n(e)e Fl(K)2054 4645 y
Fi(n)2099 4633 y Fp(,)h(after)g(1)p Fl(=n)f Fp(surgery)f(on)i
Fl(\015)5 b Fp(,)0 4732 y(1)p Fl(=p)27 b Fp(surgery)g(on)h
Fl(\013)p Fp(,)h(and)f(1)p Fl(=q)i Fp(surgery)d(on)h
Fl(\014)t Fp(.)39 b(Note)28 b(that)h(an)f(ordering)f(for)g(these)i
(surgeries)0 4832 y(do)r(es)c(not)g(need)g(to)g(b)r(e)h(giv)n(en;)f(b)r
(ecause)g(these)g(curv)n(es)f(b)r(ound)i(disjoin)n(t)f(disks)g(in)g
Fl(S)2637 4802 y Fj(3)2674 4832 y Fp(,)h(surgery)0 4932
y(on)37 b(eac)n(h)f(is)g(essen)n(tially)g(indep)r(enden)n(t)i(of)f(the)
g(others.)64 b(The)37 b(basic)f(idea)h(is)f(to)h(\014rst)g(read)0
5031 y(o\013)31 b(the)h(w)n(ord)d(represen)n(ting)h Fl(\015)5
b Fp(,)32 b(as)e(w)n(e)h(tra)n(v)n(erse)e(the)i(curv)n(e.)46
b(Then)32 b(w)n(e)e(read)g(o\013)i(the)f(w)n(ord)p eop
%%Page: 6 6
6 5 bop 0 42 a Fn(6)1187 b(Mark)24 b(Brittenham)0 241
y Fp(represen)n(ting)32 b Fl(K)546 253 y Fi(p;q)669 241
y Fp(\(whic)n(h)i(is,)g(in)g(fact,)g Fl(a)1398 211 y
Fi(p)p Fj(+1)1521 241 y Fl(b)1557 211 y Fi(q)r Fj(+1)1677
241 y Fl(A)1739 211 y Fi(p)p Fj(+1)1862 241 y Fl(B)1929
211 y Fi(q)r Fj(+1)2050 241 y Fp(\),)h(but)e(eac)n(h)g(time)h(w)n(e)e
(cross)0 340 y Fl(\015)5 b Fp(,)40 b(w)n(e)e(insert)g
Fl(n)g Fp(copies)f(of)h(a)f(cyclic)h(conjugate)f(of)h
Fl(\015)43 b Fp(or)p 1941 295 48 4 v 37 w Fl(\015)g Fp(in)n(to)37
b(the)i(w)n(ord)e(b)r(eing)h(read.)0 440 y(Determining)c(whic)n(h)g
(cyclic)f(conjugate)g(is)h(a)f(matter)h(of)f(b)r(o)r(okk)n(eeping,)h(k)
n(eeping)f(trac)n(k)g(of)0 540 y(where,)27 b(as)g Fl(\015)32
b Fp(is)c(b)r(eing)g(read)e(o\013,)i Fl(K)1144 552 y
Fi(p;q)1262 540 y Fp(is)f(crossing)f Fl(\015)5 b Fp(.)100
644 y(F)-7 b(or)27 b(example,)h(the)g(w)n(ords)f(read)g(o\013)h(b)n(y)g
(the)g(curv)n(es)f(in)h(Figures)f(3,)h(6\(a\),)g(6\(b\),)g(and)g
(6\(c\))0 744 y(are,)f(in)h(order)0 877 y Fl(A)62 847
y Fi(p)p Fj(+1)185 877 y Fp(\()p Fl(baB)t(A)p Fp(\))458
847 y Fi(n)503 877 y Fl(b)539 847 y Fi(q)r Fj(+1)660
877 y Fp(\()p Fl(bAB)t(a)p Fp(\))933 847 y Fi(n)978 877
y Fl(a)1022 847 y Fi(p)p Fj(+1)1145 877 y Fp(\()p Fl(B)t(Aba)p
Fp(\))1418 847 y Fi(n)1463 877 y Fl(B)1530 847 y Fi(q)r
Fj(+1)1651 877 y Fp(\()p Fl(B)t(abA)p Fp(\))1924 847
y Fi(n)0 982 y Fl(A)62 951 y Fi(p)p Fj(+1)185 982 y Fp(\()p
Fl(B)t(abA)p Fp(\))458 951 y Fi(n)503 982 y Fp(\()p Fl(baB)t(A)p
Fp(\))776 951 y Fi(n)822 982 y Fp(\()p Fl(bAB)t(a)p Fp(\))1095
951 y Fi(n)1141 982 y Fl(b)1177 951 y Fi(q)r Fj(+1)1297
982 y Fp(\()p Fl(aB)t(Ab)p Fp(\))1570 951 y Fi(n)1616
982 y Fl(a)1660 951 y Fi(p)p Fj(+1)1782 982 y Fp(\()p
Fl(bAB)t(a)p Fp(\))2055 951 y Fi(n)2101 982 y Fp(\()p
Fl(B)t(Aba)p Fp(\))2374 951 y Fi(n)2419 982 y Fp(\()p
Fl(B)t(abA)p Fp(\))2692 951 y Fi(n)2738 982 y Fl(B)2805
951 y Fi(q)r Fj(+1)100 1086 y Fp(\()p Fl(AbaB)t Fp(\))373
1056 y Fi(n)0 1190 y Fl(A)62 1160 y Fi(p)p Fj(+1)185
1190 y Fp(\()p Fl(babaB)t(AB)t(A)p Fp(\))667 1160 y Fi(n)712
1190 y Fl(b)748 1160 y Fi(q)r Fj(+1)869 1190 y Fp(\()p
Fl(bAB)t(AB)t(aba)p Fp(\))1351 1160 y Fi(n)1396 1190
y Fp(\()p Fl(baB)t(AB)t(Aba)p Fp(\))1878 1160 y Fi(n)1924
1190 y Fp(\()p Fl(babAB)t(AB)t(a)p Fp(\))2406 1160 y
Fi(n)2451 1190 y Fl(a)2495 1160 y Fi(p)p Fj(+1)100 1294
y Fp(\()p Fl(B)t(AB)t(Ababa)p Fp(\))582 1264 y Fi(n)627
1294 y Fl(B)694 1264 y Fi(q)r Fj(+1)815 1294 y Fp(\()p
Fl(B)t(ababAB)t(A)p Fp(\))1297 1264 y Fi(n)1343 1294
y Fp(\()p Fl(B)t(AbabaB)t(A)p Fp(\))1825 1264 y Fi(n)1870
1294 y Fp(\()p Fl(B)t(AB)t(ababA)p Fp(\))2352 1264 y
Fi(n)0 1399 y Fl(A)62 1368 y Fi(p)p Fj(+1)185 1399 y
Fp(\()p Fl(bAbaB)t(aB)t(A)p Fp(\))667 1368 y Fi(n)712
1399 y Fp(\()p Fl(bAB)t(aB)t(abA)p Fp(\))1194 1368 y
Fi(n)1240 1399 y Fp(\()p Fl(baB)t(aB)t(AbA)p Fp(\))1722
1368 y Fi(n)1768 1399 y Fl(b)1804 1368 y Fi(q)r Fj(+1)1924
1399 y Fp(\()p Fl(bAbAB)t(aB)t(a)p Fp(\))2406 1368 y
Fi(n)2451 1399 y Fl(a)2495 1368 y Fi(p)p Fj(+1)100 1503
y Fp(\()p Fl(B)t(aB)t(AbAba)p Fp(\))582 1473 y Fi(n)627
1503 y Fp(\()p Fl(B)t(abAbAB)t(a)p Fp(\))1109 1473 y
Fi(n)1155 1503 y Fp(\()p Fl(B)t(AbAbaB)t(a)p Fp(\))1637
1473 y Fi(n)1682 1503 y Fl(B)1749 1473 y Fi(q)r Fj(+1)1870
1503 y Fp(\()p Fl(B)t(aB)t(abAbA)p Fp(\))2352 1473 y
Fi(n)100 1637 y Fp(where)38 b(w)n(e)h(ha)n(v)n(e)f(read)g(eac)n(h)g(w)n
(ord)g(starting)g(at)h(the)h(blac)n(k)e(triangle,)j(reading)d(in)h(the)
0 1736 y(direction)27 b(that)h(the)g(triangle)f(indicates.)100
1840 y(Note)d(that)g(b)r(ecause)g(the)g(curv)n(es)f Fl(\015)28
b Fm(\022)22 b Fl(@)5 b(X)i Fp(\()p Fl(F)12 b Fp(\))24
b(that)g(w)n(e)g(c)n(ho)r(ose)f(are)g(disjoin)n(t)h(from)f
Fl(\013)i Fp(and)0 1940 y Fl(\014)t Fp(,)f(the)g(w)n(ord)d(w)n(e)i
(read)f(o\013)h(in)g Fl(F)12 b Fp(\()p Fl(a;)i(b)p Fp(\)\))23
b(for)f Fl(\015)28 b Fp(nev)n(er)22 b(has)g(a)h(rep)r(eated)f(letter.)
36 b(This)23 b(is)f(b)r(ecause)0 2040 y(for)28 b(a)g(rep)r(eated)g
(letter)h(to)g(o)r(ccur)e(\()p Fl(b)p Fp(,)i(sa)n(y\),)f
Fl(\015)34 b Fp(m)n(ust)28 b(pass)g(through)g(the)h(disks)f
Fl(D)2608 2052 y Fj(2)2645 2040 y Fp(,)h Fl(D)2766 2052
y Fj(3)2803 2040 y Fp(,)g(and)0 2139 y Fl(D)69 2151 y
Fj(2)106 2139 y Fp(,)g(in)f(order.)38 b(This)28 b(has)g(the)h(e\013ect)
g(of)f("trapping")f Fl(\015)33 b Fp(against)27 b Fl(\014)33
b Fp(\(Figure)28 b(7\),)g(whic)n(h)g(then)0 2239 y(requires)c
Fl(\015)30 b Fp(to)25 b(pass)g(through)g Fl(D)1042 2251
y Fj(2)1104 2239 y Fp(in)h(the)g(opp)r(osite)f(direction)g(b)r(efore)g
(passing)f(through)h Fl(D)2929 2251 y Fj(1)2966 2239
y Fp(,)0 2339 y(giving)g(an)h(inessen)n(tial)g(in)n(tersection)f(of)i
Fl(\015)j Fp(with)d Fl(P)1610 2351 y Fj(2)1648 2339 y
Fp(,)f(con)n(tradicting)f(our)h(third)g(assumption.)0
2438 y(The)d(other)g(p)r(ossible)g(rep)r(eated)g(letters)g(are)g
(similar.)35 b(Note)23 b(also)f(that)i(the)g(cyclic)f(conjugates)0
2538 y(are)29 b(nev)n(er)g(inserted)g(within)i(one)e(of)h(the)g(p)r(o)n
(w)n(ers,)f(for)h(the)g(same)f(reason;)g(the)i(high)e(p)r(o)n(w)n(ers)0
2637 y(arise)d(within)j(small)e(neigh)n(b)r(orho)r(o)r(ds)f(of)i
Fl(\013)g Fp(and)f Fl(\014)t Fp(,)h(whic)n(h)g Fl(\015)k
Fp(do)r(es)27 b(not)h(meet.)1044 3595 y @beginspecial
80 @llx 287 @lly 390 @urx 578 @ury 1080 @rwi @setspecial
%%BeginDocument: d_fig7.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig7.eps)
%%CreationDate: (9/10/2002) (10:36 AM)
%%BoundingBox: 80 287 390 578
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%+ Symbol
%%DocumentNeededFonts: Helvetica
%%+ Symbol
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 18 16 594 778
%AI3_DocumentPreview: Header
%%PageOrigin:18 16
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
%%IncludeFont: Symbol
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/space
/exclam
/universal
/numbersign
/existential
/percent
/ampersand
/suchthat
/parenleft
/parenright
/asteriskmath
/plus
/comma
/minus
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/congruent
/Alpha
/Beta
/Chi
/Delta
/Epsilon
/Phi
/Gamma
/Eta
/Iota
/theta1
/Kappa
/Lambda
/Mu
/Nu
/Omicron
/Pi
/Theta
/Rho
/Sigma
/Tau
/Upsilon
/sigma1
/Omega
/Xi
/Psi
/Zeta
/bracketleft
/therefore
/bracketright
/perpendicular
/underscore
/radicalex
/alpha
/beta
/chi
/delta
/epsilon
/phi
/gamma
/eta
/iota
/phi1
/kappa
/lambda
/mu
/nu
/omicron
/pi
/theta
/rho
/sigma
/tau
/upsilon
/omega1
/omega
/xi
/psi
/zeta
/braceleft
/bar
/braceright
/similar
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Euro
/Upsilon1
/minute
/lessequal
/fraction
/infinity
/florin
/club
/diamond
/heart
/spade
/arrowboth
/arrowleft
/arrowup
/arrowright
/arrowdown
/degree
/plusminus
/second
/greaterequal
/multiply
/proportional
/partialdiff
/bullet
/divide
/notequal
/equivalence
/approxequal
/ellipsis
/arrowvertex
/arrowhorizex
/carriagereturn
/aleph
/Ifraktur
/Rfraktur
/weierstrass
/circlemultiply
/circleplus
/emptyset
/intersection
/union
/propersuperset
/reflexsuperset
/notsubset
/propersubset
/reflexsubset
/element
/notelement
/angle
/gradient
/registerserif
/copyrightserif
/trademarkserif
/product
/radical
/dotmath
/logicalnot
/logicaland
/logicalor
/arrowdblboth
/arrowdblleft
/arrowdblup
/arrowdblright
/arrowdbldown
/lozenge
/angleleft
/registersans
/copyrightsans
/trademarksans
/summation
/parenlefttp
/parenleftex
/parenleftbt
/bracketlefttp
/bracketleftex
/bracketleftbt
/bracelefttp
/braceleftmid
/braceleftbt
/braceex
/.notdef
/angleright
/integral
/integraltp
/integralex
/integralbt
/parenrighttp
/parenrightex
/parenrightbt
/bracketrighttp
/bracketrightex
/bracketrightbt
/bracerighttp
/bracerightmid
/bracerightbt
/.notdef
/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 R
0 0 0 1 K
0 i
0 J 0 j 4 w 4 M []0 d
%AI3_Note:
0 D
216.0908 396.7246 m
196.209 396.6738 180.0498 412.7515 180 432.6333 c
179.9492 452.5161 196.0273 468.6743 215.9092 468.7241 c
235.791 468.7749 251.9492 452.6968 252 432.8149 c
252.0498 412.9331 235.9727 396.7734 216.0908 396.7246 c
s
2 w
108.0005 576.4541 m
215.6377 576.7251 l
295.165 576.9253 359.7998 512.6147 360 433.0864 c
360.2002 353.5586 295.8906 288.9238 216.3623 288.7246 c
107.9995 288.4521 l
S
3 w [4 6 ]0 d
347.7559 446.7358 m
355.3965 443.0298 359.9863 438.2778 360 433.0864 c
S
330.8945 452.1772 m
336.3965 451.0435 341.3447 449.5396 345.5332 447.7485 c
346.2998 447.4204 347.041 447.0825 347.7559 446.7358 c
S
1 w []0 d
310.498 454.4868 m
314.3008 454.3696 317.9922 454.0947 321.5303 453.6782 c
324.792 453.2944 327.9238 452.7896 330.8945 452.1772 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
293.0293 453.897 m
297.167 454.314 301.4932 454.5405 305.9453 454.5513 c
307.4785 454.5552 308.9971 454.5332 310.498 454.4868 c
S
1 w []0 d
273.5234 450.1411 m
279.2461 451.8794 285.8555 453.1743 293.0293 453.897 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
252 432.8149 m
251.9824 439.8755 260.4365 446.1665 273.5234 450.1411 c
S
[]0 d
252 432.8149 m
252.0303 420.8853 276.2314 411.2759 306.0547 411.3511 c
335.877 411.4263 360.0303 421.1577 360 433.0864 c
S
4 w [4 6 ]0 d
296 313.7246 m
S
0 To
1 0 0 1 203.6455 444.7573 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w []0 d
/_Symbol 24 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(b) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 365 402.7246 0 Tp
TP
0 Tr
/_Helvetica 24 Tf
(D) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 382 398.7246 0 Tp
TP
0 Tr
/_Helvetica 14 Tf
(2) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
4 w
243 531.0005 m
297 531.0005 324 468.0005 324 432.0005 c
324 369 270 333 216 333 c
153 333 135 396.0005 135 432.0005 c
135 486.0005 180 504.0005 216 504.0005 c
270 504.0005 288 459.0005 288 432.0005 c
288 405.0005 265.5161 369 229.5161 369 c
S
234 378 m
216 369 l
234 360 l
S
3 w
180 427.5 m
180 412.7251 137.856 400.3257 81.0005 396.9238 c
S
[4 6 ]0 d
143.9976 449.2256 m
166.3057 443.5737 180 435.9229 180 427.5 c
S
1 w []0 d
125.9995 453.0234 m
132.4717 451.8911 138.4966 450.6191 143.9976 449.2256 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
90 457.4541 m
103.02 456.4292 115.1396 454.9233 125.9995 453.0234 c
S
0 To
1 0 0 1 81 414 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w []0 d
/_Helvetica 24 Tf
(D) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 98.6133 411.2583 0 Tp
TP
0 Tr
/_Helvetica 14 Tf
(3) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 218.4927 517.6289 0 Tp
TP
0 Tr
/_Symbol 24 Tf
(g) Tx 1 0 Tk
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1343 3694 a(Figure)f(7)1453 3917 y Fm(x)p
Fq(2)972 4016 y(Depth)k(grea)-6 b(ter)32 b(than)e(one)100
4170 y Fp(W)-7 b(e)36 b(no)n(w)g(sho)n(w)f(that)h(for)g(curv)n(es)f
Fl(\015)40 b Fp(satisfying)c(the)g(conditions)g(ab)r(o)n(v)n(e,)h(the)f
(knot)g Fl(K)2944 4182 y Fi(n)0 4270 y Fp(obtained)30
b(b)n(y)g(1)p Fl(=n)f Fp(surgery)f(along)h Fl(\015)5
b Fp(,)31 b Fk(for)i Fl(n)27 b Fm(\025)g Fp(2,)j(has)g(free)f(gen)n(us)
h(one)g(Seifert)g(surface)f Fl(F)2943 4282 y Fi(n)0 4370
y Fp(whic)n(h)36 b(is)g(not)g(the)h(sole)e(compact)h(leaf)g(of)g(a)g
(depth)h(one)f(foliation.)62 b(The)36 b(k)n(ey)f(ingredien)n(t)0
4469 y(to)41 b(sho)n(wing)f(this)i(is)f(the)h(follo)n(wing)e(result,)45
b(due)d(to)f(Can)n(t)n(w)n(ell)f(and)i(Conlon.)77 b(Here)41
b Fl(M)0 4569 y Fp(denotes)c(the)i(manifold)e(obtained)h(b)n(y)f
(gluing)g(a)h(2-handle)f(to)g Fl(X)7 b Fp(\()p Fl(S)e
Fp(\))38 b(along)e(the)i(ann)n(ulus)0 4669 y Fl(Q)23
b Fp(=)f Fl(X)7 b Fp(\()p Fl(S)e Fp(\))18 b Fm(\\)h Fl(@)5
b Fp(\()p Fl(N)k Fp(\()p Fl(K)d Fp(\)\))23 b Fm(\022)g
Fl(@)5 b(X)i Fp(\()p Fl(S)e Fp(\))0 4832 y Fr(Theorem)31
b([CC2].)46 b Fk(:)39 b(If)30 b Fl(K)36 b Fk(is)30 b(a)h(genus-1)e(one)
i(knot)f(and)g Fl(S)35 b Fk(is)30 b(a)h(minimal)g(genus)e(Seifert)0
4932 y(surfac)l(e)e(for)g Fl(K)6 b Fk(,)27 b(then)g(every)g(depth)h
(one)f(foliation)h(of)g Fl(X)7 b Fp(\()p Fl(K)f Fp(\))p
Fk(,)27 b(with)g Fl(S)k Fk(as)c(sole)g(c)l(omp)l(act)g(le)l(af,)0
5031 y(induc)l(es)g(a)h(\014br)l(ation)f(on)g Fl(M)9
b Fk(,)28 b(tr)l(ansverse)f(to)g Fl(@)5 b(M)35 b Fk(and)28
b(to)f(a)g(c)l(or)l(e)g(of)h(the)g(attache)l(d)g(2-hand)t(le.)p
eop
%%Page: 7 7
7 6 bop 750 42 a Fn(Unique)24 b(minimal)c(gen)n(us)25
b(Seifert)e(surfaces)h(and)g(depth)693 b(7)0 241 y Fk(Conversely,)32
b(such)e(a)g(\014br)l(ation)g(induc)l(es)g(a)g(depth-one)h(foliation)h
(on)e Fl(X)7 b Fp(\()p Fl(K)f Fp(\))29 b Fk(with)h Fl(S)35
b Fk(as)30 b(sole)0 340 y(c)l(omp)l(act)g(le)l(af.)100
479 y Fp(Therefore,)25 b(to)i(sho)n(w)f(that)h(our)f(Seifert)h
(surfaces)f Fl(F)1755 491 y Fi(n)1827 479 y Fp(for)h
Fl(K)2025 491 y Fi(n)2096 479 y Fp(are)f(not)h(the)g(sole)f(compact)0
578 y(lea)n(v)n(es)32 b(of)h(a)g(depth)h(one)f(foliation,)i(it)f
(su\016ces)f(to)g(sho)n(w)g(that)h(the)g(manifold)f(obtained)g(b)n(y)0
678 y(gluing)e(a)h(2)f(handle)h(to)g Fl(X)7 b Fp(\()p
Fl(F)939 690 y Fi(n)984 678 y Fp(\))32 b(along)f Fl(X)7
b Fp(\()p Fl(F)1435 690 y Fi(n)1480 678 y Fp(\))22 b
Fm(\\)f Fl(@)5 b Fp(\()p Fl(N)k Fp(\()p Fl(K)1870 690
y Fi(n)1915 678 y Fp(\)\))31 b Fm(\022)f Fl(@)5 b(X)i
Fp(\()p Fl(F)2315 690 y Fi(n)2359 678 y Fp(\))33 b(is)e(not)h(a)g
(surface)0 778 y(bundle)26 b(o)n(v)n(er)e(the)h(circle.)36
b(T)-7 b(o)25 b(sho)n(w)f(this,)j(w)n(e)e(will)g(use)h(the)f
(Bieri-Neumann-Streb)r(el)g(in)n(v)-5 b(ari-)0 877 y(an)n(t)30
b([BNS])g(of)g(the)g(fundamen)n(tal)g(group)f(of)g Fl(X)7
b Fp(\()p Fl(F)1610 889 y Fi(n)1656 877 y Fp(\))p Fm([)1743
889 y Fi(Q)1800 877 y Fp(\(2-handle\)\)=)29 b Fl(M)2381
889 y Fi(n)2426 877 y Fp(.)44 b(In)30 b(the)g(setting)0
977 y(of)c(3-manifold)f(groups,)g(the)h(BNS)h(in)n(v)-5
b(arian)n(t)24 b(is)i(essen)n(tially)f(the)h(same)g(as)f(the)h(\014b)r
(ered)g(faces)0 1077 y(of)i(the)g(unit)h(ball)f(in)g(the)g(Th)n(urston)
f(norm)h([Th1];)g(that)g(is,)g(the)g(BNS)h(in)n(v)-5
b(arian)n(t)26 b(is)i(an)g(op)r(en)0 1176 y(subset)f(in)g(the)g(unit)g
(sphere)f(of)h Fl(H)1087 1188 y Fj(1)1124 1176 y Fp(\()p
Fl(M)1237 1188 y Fi(n)1282 1176 y Fp(;)14 b Fe(R)p Fp(\))33
b(=)26 b(Hom\()p Fl(\031)1781 1188 y Fj(1)1819 1176 y
Fp(\()p Fl(M)1932 1188 y Fi(n)1977 1176 y Fp(\))p Fl(;)14
b Fe(R)p Fp(\))33 b(whose)26 b(p)r(oin)n(ts)h(represen)n(t)0
1276 y(homomorphisms)f(of)i Fl(\031)761 1288 y Fj(1)799
1276 y Fp(\()p Fl(M)912 1288 y Fi(n)957 1276 y Fp(\))g(to)g
Fe(Z)21 b Fp(ha)n(ving)27 b(\014nitely)h(generated)f(k)n(ernel.)37
b(By)27 b(the)h(Stallings)0 1375 y(Fibration)35 b(Theorem)g([Stl],)j
(suc)n(h)e(a)f(homomorphism)f(is)i(represen)n(ted)e(b)n(y)i(a)f(bundle)
h(map)0 1475 y(from)30 b Fl(M)280 1487 y Fi(n)354 1475
y Fp(to)g(the)g(circle)f(\(and)h(con)n(v)n(ersely\).)42
b(Therefore,)29 b(if)i(the)f(BNS)g(in)n(v)-5 b(arian)n(t)29
b(is)h(empt)n(y)-7 b(,)0 1575 y(there)30 b(are)f(no)h(homomorphisms)f
(from)h Fl(\031)1342 1587 y Fj(1)1379 1575 y Fp(\()p
Fl(M)1492 1587 y Fi(n)1537 1575 y Fp(\))h(to)f Fe(Z)23
b Fp(with)31 b(\014nitely)g(generated)e(k)n(ernel,)h(so)0
1674 y Fl(M)81 1686 y Fi(n)153 1674 y Fp(is)e(not)f(a)h(bundle)g(o)n(v)
n(er)e(the)i(circle.)100 1774 y Fl(\031)147 1786 y Fj(1)184
1774 y Fp(\()p Fl(M)297 1786 y Fi(n)342 1774 y Fp(\))h(is,)f(b)n(y)f
(the)i(Seifert-V)-7 b(an)28 b(Kamp)r(en)g(Theorem,)f(a)h(one-relator)d
(group,)i(since)h Fl(M)2944 1786 y Fi(n)0 1874 y Fp(is)e(obtained)h
(from)f(the)h(gen)n(us-2)e(handleb)r(o)r(dy)i(\(with)g(free)g(fundamen)
n(tal)f(group\))g(b)n(y)g(adding)0 1973 y(a)i(single)g(2-handle)g
(\(giving)g(the)h(relator\).)39 b(The)29 b(relator)e(is)i(the)g(w)n
(ord,)f(in)h(the)g(generators)d Fl(a)0 2073 y Fp(and)d
Fl(b)g Fp(of)h(the)g(free)f(group,)g(represen)n(ting)f(the)i(knot)f
Fl(K)1718 2085 y Fi(n)1763 2073 y Fp(,)h(since)f Fl(K)2080
2085 y Fi(n)2149 2073 y Fp(is)g(the)h(core)e(of)i(the)f(gluing)0
2172 y(ann)n(ulus)k(for)g(the)h(2-handle.)100 2291 y(Bro)n(wn)23
b([Bro])g(has)h(pro)r(duced)g(an)g(algorithm)f(for)h(computing)g(the)h
(BNS)f(in)n(v)-5 b(arian)n(t)23 b(of)i(a)f(1-)0 2391
y(relator)f(group)g Fl(G)i Fp(=)f Fl(<)e(a;)14 b(b)24
b Fm(j)h Fl(R)e(>)p Fp(.)36 b(His)24 b(metho)r(d)h(requires)e(that)i
(the)f(relator)f Fl(R)i Fp(ha)n(v)n(e)e(trivial)0 2491
y(ab)r(elianization;)31 b(this)g(will)g(b)r(e)g(the)g(case)f(for)g(our)
g(groups,)h(since)f Fl(K)2180 2503 y Fi(n)2255 2491 y
Fp(b)r(ounds)h(a)g(punctured)0 2590 y(torus)24 b(in)i
Fl(@)5 b(X)i Fp(\()p Fl(F)12 b Fp(\),)25 b(so)g(is)g(n)n
(ull-homologous.)34 b Fl(K)1507 2602 y Fi(n)1577 2590
y Fp(is)25 b(therefore)f(trivial)h(in)g(the)h(ab)r(elianization)0
2690 y(of)35 b Fl(\031)149 2702 y Fj(1)187 2690 y Fp(\()p
Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\)\),)38 b(since)d(this)h(group)e(is)h
(canonically)f(isomorphic)g(to)h(the)h(\014rst)f(homology)f(of)0
2790 y Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\).)53 b(It)34 b(also)e(requires)f
(that)j(the)f(relator)f Fl(R)h Fp(b)r(e)h(reduced)f(and)f(cyclically)h
(reduced)f(\(i.e,)0 2889 y(do)r(es)d(not)h(ha)n(v)n(e)e(an)i(adjacen)n
(t)f(pair,)h(and)f(do)r(es)g(not)h(start)f(and)h(end)g(with)g(a)f
(pair,)g(of)h(letters)0 2989 y Fl(a;)14 b(A)21 b Fp(or)f
Fl(b;)14 b(B)t Fp(\).)35 b(This)21 b(is)g(also)f(the)h(case)f(in)h(our)
g(setting,)h(b)r(ecause)f Fl(K)2108 3001 y Fi(n)2152
2989 y Fm(j)p Fp(\()p Fl(D)2276 3001 y Fj(1)2319 2989
y Fm([)5 b Fl(D)2448 3001 y Fj(2)2491 2989 y Fm([)g Fl(D)2620
3001 y Fj(3)2657 2989 y Fp(\))22 b(consists)0 3088 y(of)31
b(essen)n(tial)g(arcs)e(in)j Fl(@)5 b(X)i Fp(\()p Fl(F)918
3100 y Fi(n)963 3088 y Fp(\))p Fm(j)p Fp(\()p Fl(D)1119
3100 y Fj(1)1177 3088 y Fm([)22 b Fl(D)1323 3100 y Fj(2)1380
3088 y Fm([)g Fl(D)1526 3100 y Fj(3)1563 3088 y Fp(\).)48
b(In)31 b(our)g(setting,)h(the)f(BNS)h(in)n(v)-5 b(arian)n(t)30
b(of)0 3188 y Fl(G)i Fp(will)f(b)r(e)h(a)f(subset)g(of)g(the)h(unit)g
(sphere)f(in)g Fl(H)1561 3200 y Fj(1)1599 3188 y Fp(\()p
Fl(M)1712 3200 y Fi(n)1757 3188 y Fp(;)14 b Fe(R)p Fp(\).)54
b Fl(H)2026 3200 y Fj(1)2063 3188 y Fp(\()p Fl(M)2176
3200 y Fi(n)2221 3188 y Fp(;)14 b Fe(R)p Fp(\))38 b(can)31
b(b)r(e)g(iden)n(ti\014ed)0 3288 y(with)37 b(Hom\()p
Fl(\031)450 3300 y Fj(1)488 3288 y Fp(\()p Fl(M)601 3300
y Fi(n)646 3288 y Fp(\))p Fl(;)14 b Fe(R)p Fp(\))44 b(=)36
b Fe(R)1000 3258 y Fj(2)1044 3288 y Fp(,)j(since)e(Hom\()p
Fl(\031)1571 3300 y Fj(1)1609 3288 y Fp(\()p Fl(M)1722
3300 y Fi(n)1767 3288 y Fp(\))p Fl(;)14 b Fe(R)p Fp(\))43
b(=)37 b(Hom\()p Fl(F)12 b Fp(\()p Fl(a;)i(b)p Fp(\))p
Fl(;)g Fe(R)p Fp(\),)45 b(b)r(ecause)0 3387 y(the)28
b(relator)e Fl(K)482 3399 y Fi(n)527 3387 y Fp(,)h(b)r(eing)h(n)n
(ull-homologous,)d(is)j(automatically)e(sen)n(t)i(to)f(0.)589
4594 y @beginspecial 89 @llx 153 @lly 1072 @urx 603 @ury
2880 @rwi @setspecial
%%BeginDocument: d_fig8.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig8.eps)
%%CreationDate: (9/10/2002) (10:37 AM)
%%BoundingBox: 89 153 1072 603
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%+ Symbol
%%DocumentNeededFonts: Helvetica
%%+ Symbol
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 18 16 594 778
%AI3_DocumentPreview: Header
%%PageOrigin:18 16
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
%%IncludeFont: Symbol
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/space
/exclam
/universal
/numbersign
/existential
/percent
/ampersand
/suchthat
/parenleft
/parenright
/asteriskmath
/plus
/comma
/minus
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/congruent
/Alpha
/Beta
/Chi
/Delta
/Epsilon
/Phi
/Gamma
/Eta
/Iota
/theta1
/Kappa
/Lambda
/Mu
/Nu
/Omicron
/Pi
/Theta
/Rho
/Sigma
/Tau
/Upsilon
/sigma1
/Omega
/Xi
/Psi
/Zeta
/bracketleft
/therefore
/bracketright
/perpendicular
/underscore
/radicalex
/alpha
/beta
/chi
/delta
/epsilon
/phi
/gamma
/eta
/iota
/phi1
/kappa
/lambda
/mu
/nu
/omicron
/pi
/theta
/rho
/sigma
/tau
/upsilon
/omega1
/omega
/xi
/psi
/zeta
/braceleft
/bar
/braceright
/similar
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Euro
/Upsilon1
/minute
/lessequal
/fraction
/infinity
/florin
/club
/diamond
/heart
/spade
/arrowboth
/arrowleft
/arrowup
/arrowright
/arrowdown
/degree
/plusminus
/second
/greaterequal
/multiply
/proportional
/partialdiff
/bullet
/divide
/notequal
/equivalence
/approxequal
/ellipsis
/arrowvertex
/arrowhorizex
/carriagereturn
/aleph
/Ifraktur
/Rfraktur
/weierstrass
/circlemultiply
/circleplus
/emptyset
/intersection
/union
/propersuperset
/reflexsuperset
/notsubset
/propersubset
/reflexsubset
/element
/notelement
/angle
/gradient
/registerserif
/copyrightserif
/trademarkserif
/product
/radical
/dotmath
/logicalnot
/logicaland
/logicalor
/arrowdblboth
/arrowdblleft
/arrowdblup
/arrowdblright
/arrowdbldown
/lozenge
/angleleft
/registersans
/copyrightsans
/trademarksans
/summation
/parenlefttp
/parenleftex
/parenleftbt
/bracketlefttp
/bracketleftex
/bracketleftbt
/bracelefttp
/braceleftmid
/braceleftbt
/braceex
/.notdef
/angleright
/integral
/integraltp
/integralex
/integralbt
/parenrighttp
/parenrightex
/parenrightbt
/bracketrighttp
/bracketrightex
/bracketrightbt
/bracerighttp
/bracerightmid
/bracerightbt
/.notdef
/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 R
0 0 0 1 K
0 i
0 J 0 j 4 w 4 M []0 d
%AI3_Note:
0 D
216 288 m
504 288 l
504 504.0005 l
216 504.0005 l
216 288 l
s
5 w
216 288 m
216 360 l
288 360 l
288 288 l
216 288 l
s
216 504 m
216 576 l
144 576 l
144 504 l
216 504 l
s
504 504 m
504 432 l
432 432 l
432 504 l
504 504 l
s
504 288 m
504 216 l
576 216 l
576 288 l
504 288 l
s
6 w
144 576.0005 m
216 576.0005 l
504 504.0005 l
576 288 l
576 216 l
504 216 l
216 288 l
144 504.0005 l
144 576.0005 l
s
0 To
1 0 0 1 360 549 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 36 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(C) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 387 297 0 Tp
TP
0 Tr
(K) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 180 522 0 Tp
TP
0 Tr
/_Symbol 36 Tf
(g) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 405 432 0 Tp
TP
0 Tr
(g) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 252 378 0 Tp
TP
0 Tr
(g) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 522 261 0 Tp
TP
0 Tr
(g) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
2 w
504 153 m
504 603 l
S
603 288 m
89.9995 288 l
S
u
0 To
1 0 0 1 577.5996 396 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 28.8 Tf
(A \(baBA\) b \(bABa\) a \(BAba\) B \(BabA\)) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 595.1992 415.2002 0 Tp
TP
0 Tr
/_Helvetica 16.8 Tf
(4) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 839.4668 413.333 0 Tp
TP
0 Tr
(4) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 719.1992 412 0 Tp
TP
0 Tr
(3) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 966.3994 413.8662 0 Tp
TP
0 Tr
(3) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1062 414.5332 0 Tp
TP
0 Tr
(n) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 692.4004 416.2666 0 Tp
TP
0 Tr
(n) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 935.4658 415.7324 0 Tp
TP
0 Tr
(n) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 815.7324 415.334 0 Tp
TP
0 Tr
(n) Tx 1 0 Tk
(\r) TX 
TO
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1343 4694 a(Figure)g(8)100 4832 y(Bro)n(wn's)j(algorithm)h
(consists)g(of)i(tracing)e(out)h(the)g(relator)f Fl(R)i
Fp(as)e(a)h(path)g(in)g Fe(Z)2712 4802 y Fj(2)2773 4832
y Fm(\022)f Fe(R)2923 4802 y Fj(2)2966 4832 y Fp(,)0
4932 y(thinking)k(of)f Fl(R)h Fp(as)f(lying)g(in)g Fe(Z)1022
4901 y Fj(2)1087 4932 y Fp(instead)g(of)h Fl(F)12 b Fp(\()p
Fl(a;)i(b)p Fp(\).)57 b(Ho)n(w)n(ev)n(er,)34 b(w)n(e)g(trace)f(out)i
Fl(R)g Fp(in)f(the)0 5031 y(order)24 b(in)i(whic)n(h)f(it)h(is)f
(written;)i(w)n(e)e(do)g(not)g(try)h(to)f(simplify)h(it)g(in)f
Fe(Z)2181 5001 y Fj(2)2238 5031 y Fp(\014rst;)g(see)h(Figure)e(8)h(for)
p eop
%%Page: 8 8
8 7 bop 0 42 a Fn(8)1187 b(Mark)24 b(Brittenham)0 241
y Fp(an)j(example.)36 b(Let)27 b Fl(C)33 b Fp(denote)26
b(the)i(b)r(oundary)e(of)g(the)i(con)n(v)n(ex)d(h)n(ull)i(of)g(the)g
(traced)f(out)h(path;)0 340 y(it)j(is)f(a)g(\014nite-sided)g(con)n(v)n
(ex)f(p)r(olygon.)41 b(A)30 b(v)n(ertex)e Fl(v)33 b Fp(of)c
Fl(C)36 b Fp(is)29 b(called)g Fk(simple)i Fp(if)e(it)h(is)f(crossed)0
440 y(b)n(y)23 b(the)g(path)h(traced)e(out)h(b)n(y)g
Fl(R)h Fp(exactly)f(once.)35 b Fl(C)29 b Fp(will)24 b(necessarily)d
(con)n(tain)h(horizon)n(tal)g(and)0 540 y(v)n(ertical)i(edges)h
(\(since)h(the)f(relator)f(is)i(cyclically)e(reduced\);)j(suc)n(h)e(an)
g(edge)g(is)g(called)g Fk(sp)l(e)l(cial)0 639 y Fp(if)e(b)r(oth)f(of)g
(its)g(endp)r(oin)n(ts)g(are)f(simple.)35 b(Then)22 b([Bro,)h(Theorem)e
(4.4])g(the)h(BNS)h(in)n(v)-5 b(arian)n(t)21 b(of)h Fl(G)0
739 y Fp(consists)k(of)h(op)r(en)h(arcs)d(in)j(the)f(unit)h(circle)f
(in)g Fl(H)1566 751 y Fj(1)1603 739 y Fp(\()p Fl(M)1716
751 y Fi(n)1761 739 y Fp(;)14 b Fe(R)p Fp(\),)34 b(one)26
b(for)h(eac)n(h)f(simple)i(v)n(ertex)e(or)0 839 y(sp)r(ecial)h(edge)f
(in)i Fl(C)6 b Fp(,)27 b Fk(pr)l(ovide)l(d)p Fp(,)i(in)f(the)f(second)g
(case,)f(that)h(the)h(line)f(con)n(taining)f(the)h(sp)r(ecial)0
938 y(edge)i(in)n(tersects)g Fl(C)36 b Fp(only)29 b(in)h(that)g(edge.)
42 b(His)30 b(algorithm)f(also)f(describ)r(es)h(ho)n(w)g(to)h(compute)0
1038 y(these)e(arcs.)100 1137 y(F)-7 b(or)22 b(our)g(purp)r(oses,)h(ho)
n(w)n(ev)n(er,)e(w)n(e)i(wish)f(to)h(establish)f(that)h(the)g(BNS)g(in)
n(v)-5 b(arian)n(t)22 b(is)g Fk(empty)p Fp(.)0 1237 y(W)-7
b(e)33 b(therefore)f(wish)g(to)h(\014nd)g(knots)f Fl(K)1274
1249 y Fi(n)1352 1237 y Fp(whic)n(h,)i(when)f(though)n(t)f(of)h(as)f(w)
n(ords)f(in)i(the)g(free)0 1337 y(group)19 b Fl(F)12
b Fp(\()p Fl(a;)i(b)p Fp(\))21 b(and)f(traced)g(out)g(as)g(a)g(path)g
(in)h Fe(Z)1530 1307 y Fj(2)1585 1337 y Fm(\022)h Fe(R)1726
1307 y Fj(2)1769 1337 y Fp(,)g(ha)n(v)n(e)e(no)g(simple)g(v)n(ertices)g
(or)f(sp)r(ecial)0 1436 y(edges.)36 b(That)26 b(is,)g(ev)n(ery)f(v)n
(ertex)g(of)h Fl(C)33 b Fp(is)26 b(crossed)f(at)h(least)g(t)n(wice)g(b)
n(y)f Fl(K)2276 1448 y Fi(n)2321 1436 y Fp(.)37 b(F)-7
b(or)25 b(curv)n(es)g Fl(\015)31 b Fp(and)0 1536 y Fl(K)j
Fp(c)n(hosen)27 b(as)g(ab)r(o)n(v)n(e,)g(this)i(is)f(completely)f
(routine,)h(pro)n(vided)f(w)n(e)h(tak)n(e)g Fl(n)23 b
Fm(\025)h Fp(2,)k(that)g(is,)g(w)n(e)0 1636 y(spin)23
b Fl(K)28 b Fp(at)22 b(least)g(t)n(wice)g(around)g Fl(\015)5
b Fp(.)34 b(The)23 b(basic)f(idea)g(is)g(that,)i(since)e
Fl(\015)27 b Fp(is)c(n)n(ull-homologous)d(in)0 1735 y
Fl(@)5 b(X)i Fp(\()p Fl(F)12 b Fp(\),)22 b(and)f(therefore)g(in)g
Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\),)23 b(when)e Fl(K)1419
1747 y Fi(n)1485 1735 y Fp(is)h(traced)e(out,)j(eac)n(h)d(o)r
(ccurrence)g(of)h(the)h(cyclic)0 1835 y(conjugates)31
b(of)i Fl(\015)k Fp(and)p 759 1789 48 4 v 32 w Fl(\015)g
Fp(traces)31 b(out)i(a)f(lo)r(op.)51 b(T)-7 b(racing)31
b(eac)n(h)g(out)i Fl(n)e Fm(\025)f Fp(2)i(times)h(therefore)0
1934 y(insures)25 b(that)i(eac)n(h)e(v)n(ertex)g(that)h(these)g(pieces)
g(of)g Fl(K)1682 1946 y Fi(n)1752 1934 y Fp(meet)h(ha)n(v)n(e)e
(already)f(b)r(een)i(crossed)f(at)0 2034 y(least)f(t)n(wice)h(b)n(y)f
Fl(K)586 2046 y Fi(n)631 2034 y Fp(.)36 b(In)25 b(fact,)g(since)g(with)
g(our)f(c)n(hoice)f(of)i Fl(K)30 b Fp(ab)r(o)n(v)n(e)23
b Fl(K)2246 2046 y Fi(n)2316 2034 y Fp(is)h(represen)n(ted)g(b)n(y)g(a)
0 2134 y(w)n(ord)31 b(of)h(the)h(form)f Fl(A)720 2104
y Fi(p)p Fj(+1)842 2134 y Fp(\(lo)r(ops\))p Fl(b)1130
2104 y Fi(q)r Fj(+1)1251 2134 y Fp(\(lo)r(ops\))p Fl(a)1547
2104 y Fi(p)p Fj(+1)1669 2134 y Fp(\(lo)r(ops\))p Fl(B)1988
2104 y Fi(q)r Fj(+1)2108 2134 y Fp(\(lo)r(ops\),)i(the)e(path)h(traced)
0 2233 y(out)g(is)g(essen)n(tially)f(a)h(large)f(\(for)h
Fl(p;)14 b(q)35 b Fp(large\))d(rectangle,)i(with)f(extra)g(lo)r(ops)f
(traced)g(at)h(the)0 2333 y(four)c(corners.)42 b(Since)30
b(ev)n(ery)f(extra)f(lo)r(op)i(is)g(traced)f(out)g(at)h(least)f(t)n
(wice,)i(the)f(only)f(p)r(ossible)0 2433 y(simple)35
b(v)n(ertices)f(or)g(sp)r(ecial)g(edges)g(that)i(can)e(b)r(e)h(created)
f(are)g(in)h(the)h(sides)e(of)h(the)g(large)0 2532 y(rectangle,)e
(where)f(an)n(y)g(simple)h(v)n(ertex)f(will)h(in)g(fact)g(b)r(e)g(con)n
(tain)g(in)g(a)f(sp)r(ecial)h(edge.)52 b(But)0 2632 y(the)29
b(line)g(con)n(taining)f(suc)n(h)g(an)h(edge)f(will)h(meet)h
Fl(C)35 b Fp(at)28 b(the)i(corners)d(of)h(the)i(large)d(rectangle,)0
2731 y(where)22 b(the)h(path)g(has)f(crossed)f(at)i(least)f(t)n(wice.)
35 b(So)23 b(neither)g(criterion)e(of)i(Bro)n(wn's)e(algorithm)0
2831 y(can)32 b(b)r(e)h(met,)i(and)d(so)g(all)g(of)h(the)g(groups)e
Fl(<)g(a;)14 b(b)32 b Fm(j)h Fl(K)1757 2843 y Fi(n)1833
2831 y Fl(>)f Fp(constructed)g(in)h(this)g(w)n(a)n(y)e(ha)n(v)n(e)0
2931 y(trivial)c(BNS)h(in)n(v)-5 b(arian)n(t.)100 3030
y(Therefore,)28 b(for)h(ev)n(ery)f(knot)h Fl(K)1115 3042
y Fi(n)1189 3030 y Fp(and)g(free)g(gen)n(us)f(one)h(Seifert)g(surface)g
Fl(F)2494 3042 y Fi(n)2568 3030 y Fp(constructed)0 3130
y(in)i(this)g(w)n(a)n(y)-7 b(,)30 b(the)h(manifold)g(obtained)f(b)n(y)h
(gluing)f(a)g(2)h(handle)f(to)h Fl(X)7 b Fp(\()p Fl(F)2342
3142 y Fi(n)2387 3130 y Fp(\))31 b(along)e Fl(X)7 b Fp(\()p
Fl(F)2835 3142 y Fi(n)2881 3130 y Fp(\))20 b Fm(\\)0
3230 y Fl(@)5 b Fp(\()p Fl(N)k Fp(\()p Fl(K)260 3242
y Fi(n)305 3230 y Fp(\)\))27 b Fm(\022)e Fl(@)5 b(X)i
Fp(\()p Fl(F)696 3242 y Fi(n)741 3230 y Fp(\))30 b(is)g(not)f(a)g
(surface)g(bundle)h(o)n(v)n(er)e(the)i(circle,)f(pro)n(vided)f(that)i
Fl(n)c Fm(\025)g Fp(2.)0 3329 y(Therefore)g(w)n(e)i(ha)n(v)n(e:)0
3479 y Fr(Prop)s(osition)h(1.)47 b Fk(F)-6 b(or)29 b(curves)f
Fl(\015)34 b Fk(satisfying)c(the)f(c)l(onditions)g(of)h(Se)l(ction)e
(1,)i(and)f(for)h(every)0 3578 y Fl(n)h Fm(\025)g Fp(2)p
Fk(,)36 b(the)f(surfac)l(e)f Fl(F)763 3590 y Fi(n)843
3578 y Fk(c)l(annot)g(b)l(e)h(the)g(sole)g(c)l(omp)l(act)g(le)l(af)g
(of)g(a)g(depth)h(one)e(foliation)j(of)0 3678 y Fl(X)7
b Fp(\()p Fl(K)179 3690 y Fi(n)223 3678 y Fp(\))p Fk(.)1453
3877 y Fm(x)p Fq(3)778 3977 y(Unique)30 b(genus)h(one)g(Seifer)-6
b(t)32 b(surf)-7 b(a)n(ce)100 4126 y Fp(W)g(e)32 b(no)n(w)f(giv)n(e)f
(a)i(pro)r(cedure)e(for)i(v)n(erifying)e(that)i(a)f(Seifert)h(surface)f
(lik)n(e)g(the)i(ones)e(con-)0 4226 y(structed)d(ab)r(o)n(v)n(e)f(are)h
(the)g(unique)h(minimal)f(gen)n(us)g(spanning)f(surface)h(for)g(the)g
(knot.)39 b(As)29 b(in)0 4325 y(the)22 b(previous)f(section,)h(the)g
(basis)f(for)g(the)h(pro)r(cedure)f(is)g(geometric,)h(but)g(w)n(e)g
(will)f(ultimately)0 4425 y(v)n(erify)32 b(it)h(algebraically)-7
b(,)32 b(using)g(the)h(the)g(w)n(ord)f(in)h(the)g(free)g(group)e
Fl(F)12 b Fp(\()p Fl(a;)i(b)p Fp(\))33 b(that)g(the)g(knot)0
4525 y Fl(K)71 4537 y Fi(n)143 4525 y Fp(sp)r(ells)28
b(out.)100 4624 y(Our)c(starting)h(p)r(oin)n(t)h(is)f(a)h(result)f(of)g
(Sc)n(harlemann)g(and)g(Thompson,)h(whic)n(h)f(sa)n(ys,)g(essen-)0
4724 y(tially)-7 b(,)34 b(that)e(to)g(rule)g(out)h(a)f(second)g
(non-isotopic)f(minimal)h(gen)n(us)g(spanning)f(surface,)i(w)n(e)0
4824 y(need)28 b(only)f(rule)g(out)h(the)g(existence)f(of)h(a)f(second)
g(suc)n(h)g(surface)g Fk(disjoint)i Fp(from)e(the)h(\014rst:)p
eop
%%Page: 9 9
9 8 bop 750 42 a Fn(Unique)24 b(minimal)c(gen)n(us)25
b(Seifert)e(surfaces)h(and)g(depth)693 b(9)0 241 y Fr(Theorem)31
b([ST].)47 b Fk(:)40 b(If)31 b Fl(S)k Fk(and)c Fl(T)41
b Fk(ar)l(e)31 b(minimal)g(genus)f(Seifert)h(surfac)l(es)g(for)g(the)g
(knot)f Fl(K)6 b Fk(,)0 340 y(then)30 b(ther)l(e)h(is)g(a)g(se)l(quenc)
l(e)f(of)i(minimal)f(genus)g(Seifert)g(surfac)l(es)g
Fl(S)e Fp(=)24 b Fl(S)2358 352 y Fj(0)2395 340 y Fl(;)14
b(S)2483 352 y Fj(1)2520 340 y Fl(;)g(:)g(:)g(:)28 b(;)14
b(S)2770 352 y Fi(n)2840 340 y Fp(=)24 b Fl(T)0 440 y
Fk(such)30 b(that,)g(for)h(e)l(ach)f Fl(i;)14 b Fp(1)22
b Fm(\024)h Fl(i)g Fm(\024)f Fl(n;)14 b Fm(j)p Fl(S)1221
452 y Fi(i)1267 440 y Fm(\\)19 b Fl(S)1392 452 y Fi(i)p
Fh(\000)p Fj(1)1504 440 y Fm(j)24 b Fp(=)e Fl(K)6 b Fk(.)100
629 y Fp(So)36 b(if)h(one)f(of)h(the)g(knots)f Fl(K)1030
641 y Fi(n)1111 629 y Fp(constructed)g(as)g(ab)r(o)n(v)n(e)f(had)i(a)f
(second)g(gen)n(us-1)f(Seifert)0 728 y(surface)f(\006,)i(then)g(it)f(w)
n(ould)f(ha)n(v)n(e)f(one)i(whic)n(h)f(w)n(as)g(disjoin)n(t)h(from)f
(our)g(surface)g Fl(F)2712 740 y Fi(n)2757 728 y Fp(.)58
b(\006)35 b(is)0 828 y(therefore)g(con)n(tained)g(in)g(the)h(handleb)r
(o)r(dy)g Fl(H)42 b Fp(=)36 b Fl(X)7 b Fp(\()p Fl(K)1845
840 y Fi(n)1889 828 y Fp(\))p Fm(j)p Fl(F)1997 840 y
Fi(n)2078 828 y Fp(=)36 b Fl(X)7 b Fp(\()p Fl(F)2340
840 y Fi(n)2385 828 y Fp(,)38 b(with)e(b)r(oundary)0
928 y Fl(@)5 b Fp(\006)23 b(=)f Fl(K)290 940 y Fi(n)358
928 y Fm(\022)h Fl(@)5 b(H)i Fp(.)36 b(Because)26 b(\006)g(is)h(not)g
(isotopic)f(to)g Fl(F)1720 940 y Fi(n)1793 928 y Fp(in)h
Fl(S)1945 897 y Fj(3)1982 928 y Fp(,)g(\006)g(is)f(not)h(b)r(oundary)f
(parallel)0 1027 y(in)35 b Fl(H)7 b Fp(.)56 b(After)35
b(isotop)n(y)-7 b(,)35 b(\006)23 b Fm(\\)g Fl(D)1024
1039 y Fj(3)1095 1027 y Fm(\022)34 b Fl(D)1263 1039 y
Fj(3)1334 1027 y Fp(consists)g(of)g(circles)f(and)i(arcs,)f(and)g(all)g
(circles)g(of)0 1127 y(in)n(tersection)g(can)h(b)r(e)g(remo)n(v)n(ed)f
(b)n(y)h(a)g(standard)f(innermost)g(circle)h(argumen)n(t,)h(using)e
(the)0 1226 y(incompressibilit)n(y)23 b(of)h(\006.)35
b(The)24 b(in)n(tersection)g(m)n(ust)g(still)g(b)r(e)g(non-empt)n(y)-7
b(,)24 b(b)r(ecause)g Fl(@)5 b Fp(\006)22 b(=)h Fl(K)2944
1238 y Fi(n)0 1326 y Fp(meets)31 b Fl(@)5 b(D)357 1338
y Fj(3)394 1326 y Fp(.)48 b(Cho)r(ose)30 b(an)h(outermost)g(arc)f
Fl(\021)k Fp(of)e(\006)20 b Fm(\\)i Fl(D)1815 1338 y
Fj(3)1881 1326 y Fm(\022)29 b Fl(D)2044 1338 y Fj(3)2081
1326 y Fp(,)j(whic)n(h)f(together)f(with)i(an)0 1426
y(arc)26 b Fl(!)j Fp(of)d Fl(@)5 b(D)430 1438 y Fj(3)493
1426 y Fp(b)r(ounds)27 b(a)f(disk)g(\001)e Fm(\022)e
Fl(D)1270 1438 y Fj(3)1334 1426 y Fp(whose)k(in)n(terior)f(is)h
(disjoin)n(t)h(from)f(\006.)37 b Fl(\021)29 b Fp(cannot)d(b)r(e)0
1525 y Fl(@)5 b Fp(-parallel)29 b(in)i(\006.)46 b(F)-7
b(or)30 b(otherwise)g(when)h(w)n(e)f(lo)r(ok)g(at)h(the)g(in)n
(tersection)e(of)i(the)g(disk)g Fl(E)k Fp(cut)0 1625
y(o\013)c(b)n(y)g Fl(\021)k Fp(\(with)d(b)r(oundary)e
Fl(\021)25 b Fm([)c Fl(\021)1101 1637 y Fj(0)1138 1625
y Fp(\))32 b(with)g(the)f(cutting)h(disks)f Fl(D)2110
1637 y Fj(1)2178 1625 y Fp(and)g Fl(D)2412 1637 y Fj(2)2449
1625 y Fp(,)i(an)e(outermost)0 1725 y(\(i.e,)26 b(furthest)f(from)f
Fl(\021)s Fp(\))h(arc)f(of)g(in)n(tersection)g(will)h(cut)g(an)f(arc)g
(o\013)g(of)h Fl(\021)2226 1737 y Fj(0)2263 1725 y Fp(,)g(lying)g(in)g
Fl(K)2679 1737 y Fi(n)2723 1725 y Fp(,)h(whose)0 1824
y(endp)r(oin)n(ts)j(lie)g(in)h Fl(D)660 1836 y Fi(i)687
1824 y Fp(,)g Fl(i)25 b Fp(=)g(1)k(or)f(2.)41 b(But)30
b(this)f(con)n(tradicts)f(our)g(third)i(condition)f(on)f
Fl(K)2835 1836 y Fi(n)2880 1824 y Fp(.)42 b Fl(\021)0
1924 y Fp(therefore)23 b(is)h(non-separating)e(on)h(\006,)i(and)f(so)f
(when)h(w)n(e)g Fl(@)5 b Fp(-compress)22 b(\006)i(along)f(\001,)i(w)n
(e)e(obtain)0 2023 y(an)k(ann)n(ulus)g Fl(A)484 2035
y Fj(1)550 2023 y Fp(\(Figure)g(9\).)144 2923 y @beginspecial
35 @llx 421 @lly 1172 @urx 749 @ury 3240 @rwi @setspecial
%%BeginDocument: d_fig9.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig9.eps)
%%CreationDate: (9/10/2002) (10:39 AM)
%%BoundingBox: 35 421 1172 749
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 18 16 594 778
%AI3_DocumentPreview: Header
%%PageOrigin:18 16
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 R
0 0 0 1 K
0 i
0 J 0 j 1.5 w 4 M [4.5 6 ]0 d
%AI3_Note:
0 D
252.3755 584.625 m
252.3755 599.5366 276.5522 611.625 306.3755 611.625 c
336.1982 611.625 360.375 599.5366 360.375 584.625 c
S
468.375 584.625 m
468.375 599.5366 492.5518 611.625 522.375 611.625 c
552.1992 611.625 576.375 599.5366 576.375 584.625 c
S
1062.75 585 m
1062.75 599.9121 1086.9268 612 1116.75 612 c
1146.5732 612 1170.75 599.9121 1170.75 585 c
S
629.625 585 m
629.625 599.9121 653.8018 612 683.625 612 c
713.4492 612 737.625 599.9121 737.625 585 c
S
36.3755 584.625 m
36.3755 599.5366 60.5518 611.625 90.3755 611.625 c
120.1987 611.625 144.3755 599.5366 144.3755 584.625 c
S
0 O
0 0 0 0.23 k
1 w []0 d
367.125 612 m
380.625 639 373.875 659.25 360.375 672.75 c
346.875 686.25 319.4814 699.75 343.3027 720 c
365.79 739.1147 392.7773 747 414.375 747 C
414 747 L
374.25 747 L
373.875 747 L
350.8789 747 306.3755 720 279.3755 686.25 c
246.894 645.6484 205.1255 659.25 171.3755 632.25 C
164.6255 625.125 L
170.6011 631.5 182.4126 638.625 191.6255 638.625 c
194.1704 638.625 195.9243 638.9658 198.3755 638.625 C
198.3755 638.625 L
208.5923 636.0713 258.0005 641.25 272.6255 654.4043 c
307.3184 685.6079 326.625 665.625 340.125 652.125 c
353.625 638.625 360.375 599.2207 360.375 577.875 C
354.9785 577.875 L
354.9785 590.8184 359.5332 602.6982 367.125 612 c
F
0 R
0 0 0 1 K
3 w [4.5 6 ]0 d
171.3755 631.875 m
205.1255 658.875 246.894 645.2734 279.3755 685.875 c
306.3755 719.625 350.8789 746.625 373.875 746.625 c
S
360.375 584.625 m
360.375 605.9702 353.625 638.625 340.125 652.125 c
326.625 665.625 306.3755 682.9326 279.3755 660.7788 c
252.2627 638.5322 215.3423 636.0713 205.1255 638.625 c
S
367.125 611.625 m
380.625 638.625 373.875 658.875 360.375 672.375 c
346.875 685.875 319.4814 699.375 343.3027 719.625 c
365.79 738.7393 392.7773 746.625 414.375 746.625 c
S
0 O
0 0 0 0.53 k
1 w []0 d
414.375 746.625 m
374.625 746.625 L
373.875 746.625 L
400.875 746.625 400.875 733.125 427.875 733.125 c
475.125 733.125 542.625 651.728 542.625 584.625 c
542.625 517.5225 481.4775 456.375 414.375 456.375 c
198.3755 456.375 l
131.2729 456.375 70.1255 517.5225 70.1255 584.625 c
70.1255 651.728 131.2729 679.125 198.3755 679.125 c
414.375 679.125 l
466.5664 679.125 508.875 636.8159 508.875 584.625 c
508.875 532.4341 466.5664 490.125 414.375 490.125 c
360.375 490.125 l
340.125 490.125 319.875 510.375 333.375 530.625 c
346.875 550.875 360.375 564.375 360.375 584.625 C
360.375 597.5684 364.9297 609.4482 372.5225 618.75 C
367.125 611.625 L
353.625 584.625 279.3755 490.125 252.375 490.125 c
198.3755 490.125 l
146.1846 490.125 103.8755 532.4341 103.8755 584.625 c
103.8755 625.125 139.7505 606.5752 171.3755 631.875 C
172.9004 632.25 L
180.4888 636.3179 189.1626 638.625 198.3755 638.625 c
200.9204 638.625 203.4248 638.4492 205.8765 638.1084 C
205.1255 638.625 L
171.7349 646.9731 90.3755 644.272 90.3755 584.625 c
90.3755 524.978 138.7285 476.625 198.3755 476.625 c
414.375 476.625 l
474.0225 476.625 522.375 524.978 522.375 584.625 c
522.375 644.272 474.0225 692.625 414.375 692.625 c
198.3755 692.625 l
123.8169 692.625 56.6255 659.1836 56.6255 584.625 c
56.6255 510.0664 123.8169 442.875 198.3755 442.875 c
414.375 442.875 l
488.9346 442.875 556.125 510.0664 556.125 584.625 c
556.125 659.1836 488.9346 746.625 414.375 746.625 C
b
1.5 w
252.3755 584.625 m
252.3755 554.8018 228.1987 530.625 198.3755 530.625 c
168.5522 530.625 144.3755 554.8018 144.3755 584.625 c
144.3755 614.4482 168.5522 638.625 198.3755 638.625 c
228.1987 638.625 252.3755 614.4482 252.3755 584.625 c
s
468.375 584.625 m
468.375 554.8018 444.1982 530.625 414.375 530.625 c
384.5518 530.625 360.375 554.8018 360.375 584.625 c
360.375 614.4482 384.5518 638.625 414.375 638.625 c
444.1982 638.625 468.375 614.4482 468.375 584.625 c
s
414.375 422.625 m
503.8457 422.625 576.375 495.1543 576.375 584.625 c
576.375 674.0952 503.8457 746.625 414.375 746.625 c
198.3755 746.625 l
108.9048 746.625 36.3755 674.0952 36.3755 584.625 c
36.3755 495.1543 108.9048 422.625 198.3755 422.625 c
414.375 422.625 l
s
3 w
414.375 746.625 m
488.9346 746.625 556.125 659.1836 556.125 584.625 c
556.125 510.0664 488.9346 442.875 414.375 442.875 c
198.3755 442.875 l
123.8169 442.875 56.6255 510.0664 56.6255 584.625 c
56.6255 659.1836 123.8169 692.625 198.3755 692.625 c
414.375 692.625 l
474.0225 692.625 522.375 644.2715 522.375 584.625 c
522.375 524.978 474.0225 476.625 414.375 476.625 c
198.3755 476.625 l
138.7285 476.625 90.3755 524.978 90.3755 584.625 c
90.3755 644.2715 171.7349 646.9727 205.1255 638.625 c
S
171.3755 631.875 m
139.7505 606.5752 103.8755 625.125 103.8755 584.625 c
103.8755 532.4341 146.1846 490.125 198.3755 490.125 c
252.375 490.125 l
279.3755 490.125 353.625 584.625 367.125 611.625 c
S
373.875 746.625 m
400.875 746.625 400.875 733.125 427.875 733.125 c
475.125 733.125 542.625 651.7275 542.625 584.625 c
542.625 517.5225 481.4775 456.375 414.375 456.375 c
198.3755 456.375 l
131.2729 456.375 70.1255 517.5225 70.1255 584.625 c
70.1255 651.7275 131.2729 679.125 198.3755 679.125 c
414.375 679.125 l
466.5664 679.125 508.875 636.8159 508.875 584.625 c
508.875 532.4341 466.5664 490.125 414.375 490.125 c
360.375 490.125 l
340.125 490.125 319.875 510.375 333.375 530.625 c
346.875 550.875 360.375 564.375 360.375 584.625 c
S
0 O
0 0 0 0.23 k
1 w
936.9277 720.375 m
959.415 739.4893 986.4023 747.375 1008 747.375 C
1007.625 747.375 L
967.875 747.375 L
967.5 747.375 L
944.5039 747.375 900 720.375 873 686.625 c
840.5195 646.0234 798.75 659.625 765 632.625 C
758.25 625.5 L
764.2266 631.875 776.0371 639 785.25 639 c
787.7949 639 789.5488 639.3408 792 639 C
792 639 L
802.2168 636.4463 851.625 641.625 866.25 654.7793 c
F
0 R
0 0 0 1 K
3 w [4.5 6 ]0 d
765 632.25 m
798.75 659.25 840.5195 645.6484 873 686.25 c
900 720 944.5039 747 967.5 747 c
S
798.75 639 m
808.9668 636.4463 845.8877 638.9082 873 661.1543 c
936.9277 720 l
959.415 739.1143 986.4023 747 1008 747 c
S
0 O
0 0 0 0.53 k
1 w []0 d
846 490.5 m
792 490.5 l
739.8096 490.5 697.5 532.8096 697.5 585 c
697.5 625.5 733.375 606.9502 765 632.25 C
766.5254 632.625 L
774.1133 636.6934 782.7871 639 792 639 c
794.5449 639 797.0498 638.8242 799.502 638.4834 C
798.75 639 L
765.3594 647.3477 684 644.6475 684 585 c
684 525.3525 732.3535 477 792 477 c
1008 477 l
1067.6475 477 1116 525.3525 1116 585 c
1116 644.6475 1067.6475 693 1008 693 c
792 693 l
717.4414 693 650.25 659.5586 650.25 585 c
650.25 510.4414 717.4414 443.25 792 443.25 c
1008 443.25 l
1082.5596 443.25 1149.75 510.4414 1149.75 585 c
1149.75 659.5586 1082.5596 747 1008 747 C
968.25 747 L
967.5 747 L
994.5 747 994.5 733.5 1021.5 733.5 c
1068.75 733.5 1136.25 652.1025 1136.25 585 c
1136.25 517.8975 1075.1025 456.75 1008 456.75 c
792 456.75 l
724.8984 456.75 663.75 517.8975 663.75 585 c
663.75 652.1025 724.8984 679.5 792 679.5 c
1008 679.5 l
1060.1914 679.5 1102.5 637.1904 1102.5 585 c
1102.5 532.8096 1060.1914 490.5 1008 490.5 c
954 490.5 l
B
1.5 w
846 585 m
846 555.1768 821.8242 531 792 531 c
762.1777 531 738 555.1768 738 585 c
738 614.8232 762.1777 639 792 639 c
821.8242 639 846 614.8232 846 585 c
s
1062 585 m
1062 555.1768 1037.8232 531 1008 531 c
978.1768 531 954 555.1768 954 585 c
954 614.8232 978.1768 639 1008 639 c
1037.8232 639 1062 614.8232 1062 585 c
s
1008 423 m
1097.4707 423 1170 495.5293 1170 585 c
1170 674.4697 1097.4707 747 1008 747 c
792 747 l
702.5293 747 630 674.4697 630 585 c
630 495.5293 702.5293 423 792 423 c
1008 423 l
s
3 w
1008 747 m
1082.5596 747 1149.75 659.5586 1149.75 585 c
1149.75 510.4414 1082.5596 443.25 1008 443.25 c
792 443.25 l
717.4414 443.25 650.25 510.4414 650.25 585 c
650.25 659.5586 717.4414 693 792 693 c
1008 693 l
1067.6475 693 1116 644.6475 1116 585 c
1116 525.3525 1067.6475 477 1008 477 c
792 477 l
732.3535 477 684 525.3525 684 585 c
684 644.6475 765.3594 647.3477 798.75 639 c
S
765 632.25 m
733.375 606.9502 697.5 625.5 697.5 585 c
697.5 532.8096 739.8096 490.5 792 490.5 c
846 490.5 l
954 490.5 l
1008 490.5 l
1060.1914 490.5 1102.5 532.8096 1102.5 585 c
1102.5 637.1904 1060.1914 679.5 1008 679.5 c
792 679.5 l
724.8984 679.5 663.75 652.1025 663.75 585 c
663.75 517.8975 724.8984 456.75 792 456.75 c
1008 456.75 l
1075.1025 456.75 1136.25 517.8975 1136.25 585 c
1136.25 652.1025 1068.75 733.5 1021.5 733.5 c
994.5 733.5 994.5 747 967.5 747 c
S
1.5 w
144.3755 584.625 m
144.3755 569.7134 120.1987 557.625 90.3755 557.625 c
60.5518 557.625 36.3755 569.7134 36.3755 584.625 c
S
360.375 584.625 m
360.375 569.7129 336.1982 557.625 306.3755 557.625 c
276.5522 557.625 252.3755 569.7129 252.3755 584.625 c
S
576.375 584.625 m
576.375 569.7129 552.1992 557.625 522.375 557.625 c
492.5518 557.625 468.375 569.7129 468.375 584.625 c
S
[4.5 6 ]0 d
845.625 585 m
845.625 599.9121 869.8027 612 899.625 612 c
929.4482 612 953.625 599.9121 953.625 585 c
S
[]0 d
953.625 585 m
953.625 570.0879 929.4482 558 899.625 558 c
869.8027 558 845.625 570.0879 845.625 585 c
S
737.625 585 m
737.625 570.0879 713.4492 558 683.625 558 c
653.8018 558 629.625 570.0879 629.625 585 c
S
1170.75 585 m
1170.75 570.0879 1146.5732 558 1116.75 558 c
1086.9268 558 1062.75 570.0879 1062.75 585 c
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1343 3023 a(Figure)g(9)100 3212 y Fl(!)39
b Fp(lies)e(in)g(one)f(of)h(the)g(t)n(w)n(o)f(punctured)h(tori)f
Fl(T)1654 3224 y Fj(1)1716 3212 y Fm([)24 b Fl(T)1844
3224 y Fj(2)1920 3212 y Fp(=)37 b(\()p Fl(@)5 b(H)i Fp(\)\))p
Fm(j)p Fl(K)2337 3224 y Fi(n)2382 3212 y Fp(,)40 b(sa)n(y)35
b Fl(T)2646 3224 y Fj(1)2683 3212 y Fp(.)64 b Fl(!)40
b Fp(do)r(e)0 3311 y(not)g(separate)f Fl(T)550 3323 y
Fj(1)587 3311 y Fp(,)44 b(b)r(ecause)c(it)h(is)f(essen)n(tial)g(in)h
Fl(T)1669 3323 y Fj(1)1705 3311 y Fp(;)47 b(the)41 b(argumen)n(t)f(is)g
(iden)n(tical)g(to)g(the)0 3411 y(one)d(giv)n(en)f(ab)r(o)n(v)n(e)f
(for)i(\006.)65 b Fl(T)966 3423 y Fj(1)1002 3411 y Fm(j)p
Fl(!)40 b Fp(is)d(therefore)f(an)h(ann)n(ulus)f Fl(A)2071
3423 y Fj(2)2146 3411 y Fp(with)h(\(w)n(e)g(ma)n(y)f(assume\))0
3511 y Fl(@)5 b(A)111 3523 y Fj(2)183 3511 y Fp(=)35
b Fl(@)5 b(A)394 3523 y Fj(1)466 3511 y Fp(.)60 b Fl(A)611
3523 y Fj(1)672 3511 y Fm([)24 b Fl(A)813 3523 y Fj(2)886
3511 y Fp(=)35 b Fl(T)46 b Fm(\022)35 b Fl(H)42 b Fp(is)35
b(then)h(an)f(torus)f(\(it)i(cannot)e(b)r(e)i(a)e(Klein)h(b)r(ottle,)0
3610 y(b)r(ecause)e(handleb)r(o)r(dies)g(do)g(not)g(con)n(tain)g
(non-orien)n(table)e(closed)i(surfaces\),)h(whic)n(h)f(m)n(ust)0
3710 y(b)r(e)28 b(compressible.)36 b(Because)26 b Fl(H)35
b Fp(is)27 b(irreducible,)g Fl(T)39 b Fp(either)27 b(is)h(con)n(tained)
f(in)h(a)f(3-ball,)g(so)f(the)0 3809 y(curv)n(es)f Fl(c)289
3821 y Fj(1)341 3809 y Fm([)16 b Fl(c)448 3821 y Fj(2)508
3809 y Fp(=)22 b Fl(A)657 3821 y Fj(1)710 3809 y Fm(\\)16
b Fl(A)843 3821 y Fj(2)906 3809 y Fp(are)25 b(n)n(ull-homotopic)g(in)h
Fl(H)7 b Fp(,)26 b(or)f Fl(T)37 b Fp(b)r(ounds)27 b(a)e(solid)h(torus)f
Fl(M)2857 3821 y Fj(0)2920 3809 y Fp(in)0 3909 y Fl(H)7
b Fp(.)44 b(The)30 b(\014rst)g(case)f(is)h(in)h(fact)f(imp)r(ossible,)h
(b)r(ecause)e(the)i(curv)n(es)e Fl(c)2199 3921 y Fi(i)2257
3909 y Fp(are)g(\(non-separating,)0 4009 y(hence\))40
b(essen)n(tial)e(in)i Fl(T)775 4021 y Fj(1)812 4009 y
Fp(,)i(whic)n(h)e(is)f(incompressible.)71 b(In)40 b(the)g(second)e
(case,)k(if)e Fl(c)2732 4021 y Fj(1)2808 4009 y Fp(\(sa)n(y\))0
4108 y(generates)30 b Fl(\031)416 4120 y Fj(1)454 4108
y Fp(\()p Fl(M)567 4120 y Fj(0)604 4108 y Fp(\),)j(then)f
Fl(A)947 4120 y Fj(1)1016 4108 y Fp(is)f(parallel)g(to)g
Fl(A)1570 4120 y Fj(2)1639 4108 y Fp(through)g Fl(M)2038
4120 y Fj(0)2075 4108 y Fp(,)i(that)f(is,)g Fl(A)2488
4120 y Fj(2)2557 4108 y Fp(is)g Fl(@)5 b Fp(-parallel)0
4208 y(\(Figure)31 b(10a\).)49 b(But)32 b(this)g(in)g(turn)g(implies)g
(that)g(\006)f(is)h Fl(@)5 b Fp(-parallel,)31 b(since)h(rev)n(ersing)d
(the)j Fl(@)5 b Fp(-)0 4308 y(compression)22 b(along)h(\001,)i
(starting)e(with)h(a)g Fl(@)5 b Fp(-parallel)22 b(ann)n(ulus,)i(yields)
g(a)g Fl(@)5 b Fp(-parallel)22 b(surface;)0 4407 y(\001)28
b(m)n(ust)g(lie)g(outside)f(of)h Fl(M)876 4419 y Fj(0)913
4407 y Fp(,)f(since)h(otherwise)f(\006)h(is)f(compressible)g(\(Figure)g
(10b\).)37 b Fl(c)2746 4419 y Fj(1)2811 4407 y Fp(m)n(ust)0
4507 y(therefore)26 b(represen)n(t)f(a)i(prop)r(er)f(p)r(o)n(w)n(er)f
(of)i(the)g(generator)e(of)h Fl(\031)2025 4519 y Fj(1)2063
4507 y Fp(\()p Fl(M)2176 4519 y Fj(0)2213 4507 y Fp(\),)h(and)g(so)f
(represen)n(ts)f(a)0 4606 y(prop)r(er)i(p)r(o)n(w)n(er)f(in)i
Fl(\031)652 4618 y Fj(1)689 4606 y Fp(\()p Fl(H)7 b Fp(\).)100
4719 y(Therefore,)19 b(if)g(\006)g(exists,)h(then)f(for)f(ev)n(ery)f
(outermost)h(arc)g(of)g(\006)q Fm(\\)q Fl(D)2176 4731
y Fj(3)2236 4719 y Fm(\022)23 b Fl(D)2393 4731 y Fj(3)2430
4719 y Fp(,)d Fl(@)5 b Fp(-compression)0 4819 y(of)22
b(\006)f(along)g(the)h(outermost)e(disk)i(of)f Fl(D)1234
4831 y Fj(3)1293 4819 y Fp(that)h(the)g(arc)f(cuts)g(o\013)h(pro)r
(duces)f(an)g(ann)n(ulus)h(whose)0 4918 y(b)r(oundary)j(comp)r(onen)n
(ts)h(represen)n(t)e(a)i(prop)r(er)f(p)r(o)n(w)n(er)f(in)j(the)f(free)f
(group)g Fl(F)12 b Fp(\()p Fl(a;)i(b)p Fp(\))23 b(=)g
Fl(\031)2788 4930 y Fj(1)2825 4918 y Fp(\()p Fl(H)7 b
Fp(\).)p eop
%%Page: 10 10
10 9 bop 0 42 a Fn(10)1152 b(Mark)24 b(Brittenham)444
1204 y @beginspecial 106 @llx 469 @lly 724 @urx 777 @ury
2520 @rwi @setspecial
%%BeginDocument: d_fig10.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig10.eps)
%%CreationDate: (9/10/2002) (10:11 AM)
%%BoundingBox: 106 469 724 777
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%+ Symbol
%%DocumentNeededFonts: Helvetica
%%+ Symbol
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 18 16 594 778
%AI3_DocumentPreview: Header
%%PageOrigin:18 16
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
%%IncludeFont: Symbol
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/space
/exclam
/universal
/numbersign
/existential
/percent
/ampersand
/suchthat
/parenleft
/parenright
/asteriskmath
/plus
/comma
/minus
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/congruent
/Alpha
/Beta
/Chi
/Delta
/Epsilon
/Phi
/Gamma
/Eta
/Iota
/theta1
/Kappa
/Lambda
/Mu
/Nu
/Omicron
/Pi
/Theta
/Rho
/Sigma
/Tau
/Upsilon
/sigma1
/Omega
/Xi
/Psi
/Zeta
/bracketleft
/therefore
/bracketright
/perpendicular
/underscore
/radicalex
/alpha
/beta
/chi
/delta
/epsilon
/phi
/gamma
/eta
/iota
/phi1
/kappa
/lambda
/mu
/nu
/omicron
/pi
/theta
/rho
/sigma
/tau
/upsilon
/omega1
/omega
/xi
/psi
/zeta
/braceleft
/bar
/braceright
/similar
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Euro
/Upsilon1
/minute
/lessequal
/fraction
/infinity
/florin
/club
/diamond
/heart
/spade
/arrowboth
/arrowleft
/arrowup
/arrowright
/arrowdown
/degree
/plusminus
/second
/greaterequal
/multiply
/proportional
/partialdiff
/bullet
/divide
/notequal
/equivalence
/approxequal
/ellipsis
/arrowvertex
/arrowhorizex
/carriagereturn
/aleph
/Ifraktur
/Rfraktur
/weierstrass
/circlemultiply
/circleplus
/emptyset
/intersection
/union
/propersuperset
/reflexsuperset
/notsubset
/propersubset
/reflexsubset
/element
/notelement
/angle
/gradient
/registerserif
/copyrightserif
/trademarkserif
/product
/radical
/dotmath
/logicalnot
/logicaland
/logicalor
/arrowdblboth
/arrowdblleft
/arrowdblup
/arrowdblright
/arrowdbldown
/lozenge
/angleleft
/registersans
/copyrightsans
/trademarksans
/summation
/parenlefttp
/parenleftex
/parenleftbt
/bracketlefttp
/bracketleftex
/bracketleftbt
/bracelefttp
/braceleftmid
/braceleftbt
/braceex
/.notdef
/angleright
/integral
/integraltp
/integralex
/integralbt
/parenrighttp
/parenrightex
/parenrightbt
/bracketrighttp
/bracketrightex
/bracketrightbt
/bracerighttp
/bracerightmid
/bracerightbt
/.notdef
/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 R
0 0 0 1 K
0 i
0 J 0 j 2.4 w 4 M []0 d
%AI3_Note:
0 D
709.2832 666.6587 m
709.2832 597.9165 l
S
708.4609 598.5601 m
675.25 619.5322 684.75 651.2261 709.2832 666.6587 c
S
3 w
351.7646 615.7451 m
388.3643 615.7451 l
S
[3 6 ]0 d
540.4199 712.0259 m
546.2939 710.7666 553.959 711.4756 562.1064 715.7705 c
S
[]0 d
562.1064 715.7705 m
539.4268 731.0791 l
S
539.4268 731.0791 m
528.7305 727.7163 527.2832 721.4111 531.2949 716.856 c
S
0 O
0 0 0 0.2 k
1 w
205.207 571.7651 m
187.207 598.7651 79.207 616.7651 115.207 571.7651 C
115.207 571.7651 l
205.207 571.7651 L
f
0 R
0 0 0 1 K
3 w
207 571.7656 m
270 715.7656 l
180 715.7656 l
117 571.7656 l
207 571.7656 l
s
270 715.7651 m
252 742.7651 144 760.7651 180 715.7651 c
S
119.0156 597.8872 m
107.3208 594.9858 103.0405 586.9731 115.207 571.7651 c
S
1 w
140.4727 598.7173 m
132.249 599.5029 124.7432 599.3081 119.0156 597.8872 c
N
0 R
0 0 0 1 K
3 w [3 6 ]0 d
205.207 571.7651 m
196.2695 585.1719 165.1426 596.3594 140.4727 598.7173 c
S
[]0 d
109.3999 593.9648 m
172.6001 733.1646 l
S
0 To
1 0 0 1 142.1997 613.1646 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 24 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(c) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 234.2002 610.7646 0 Tp
TP
0 Tr
(c) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 124.6001 687.5645 0 Tp
TP
0 Tr
(A) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 179 643.5654 0 Tp
TP
0 Tr
(A) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 150.2002 474.499 0 Tp
TP
0 Tr
(\(a\)) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 141.3999 685.1646 0 Tp
TP
0 Tr
/_Helvetica 14 Tf
(1) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 155.7998 609.9648 0 Tp
TP
0 Tr
(1) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 246.2002 609.9648 0 Tp
TP
0 Tr
(2) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 197.3999 639.5649 0 Tp
TP
0 Tr
(2) Tx 1 0 Tk
(\r) TX 
TO
517.9268 676.9565 m
523.6387 670.8325 528.2949 663.7114 531.6064 655.8828 c
N
530.7998 698.2539 m
537.999 691.606 544.291 683.9907 549.4707 675.6147 c
N
519.0557 734.6484 m
518.4531 733.1763 517.8057 731.7041 517.1143 730.2354 c
N
0 R
0 0 0 1 K
3 w
524.6055 769.6602 m
541.082 758.3374 543.9746 732.6211 533.4834 707.0015 C
533.0166 704.4414 L
513.7656 722.2183 488.0332 733.0791 459.7646 733.0791 c
400.1182 733.0791 351.7646 684.7261 351.7646 625.0786 c
351.7646 565.4321 400.1182 517.0786 459.7646 517.0786 c
519.4111 517.0786 567.7646 565.4321 567.7646 625.0786 c
567.7646 645.8853 561.8809 665.3174 551.6875 681.8022 c
S
451.0596 740.9258 m
472.2373 770.2573 504.9521 782.8813 524.9932 769.1094 c
547.2451 753.8174 l
565.7354 741.1113 567.1172 710.2803 551.6807 681.8008 c
S
1 w
442.9424 727.6626 m
444.8877 731.4785 447.1328 735.2617 449.6768 738.9639 c
450.1318 739.626 450.5928 740.2798 451.0596 740.9258 c
N
0 R
0 0 0 1 K
3 w
434.0098 699.3823 m
435.1318 708.5122 438.1133 718.1875 442.9424 727.6626 c
S
1 w
433.7373 686.0156 m
433.3496 690.2666 433.4404 694.7544 434.0098 699.3823 c
N
0 R
0 0 0 1 K
3 w
433.7373 686.0156 m
434.7686 674.7158 439.1836 665.0918 447.0098 658.9673 c
470.7881 642.5552 l
485.7197 632.2944 507.6865 636.686 526.6748 651.7227 c
S
526.1064 653.105 m
529.75 644.4912 531.7646 635.0205 531.7646 625.0791 c
531.7646 585.3149 499.5293 553.0786 459.7646 553.0786 c
420 553.0786 387.7646 585.3149 387.7646 625.0791 c
387.7646 664.8438 420 697.0791 459.7646 697.0791 c
480.5527 697.0791 499.2842 688.269 512.4268 674.1787 C
514.4482 673.3052 L
493.9424 652.6797 467.6445 645.2354 450.5586 656.9766 c
450.0361 657.3354 449.5273 657.709 449.0322 658.0967 c
S
1 w
538.6348 702.0376 m
536.4023 697.293 533.709 692.5806 530.5566 687.9927 c
527.0557 682.8975 523.208 678.2764 519.1309 674.1758 c
N
551.6807 681.8008 m
550.0176 678.7314 548.1582 675.6895 546.1045 672.7007 c
540.3828 664.374 533.7344 657.3125 526.6748 651.7227 c
N
526.2334 758.9653 m
533.8818 759.3281 541.043 757.5728 547.0615 753.437 c
N
0 R
0 0 0 1 K
3 w [3 6 ]0 d
483.0176 737.147 m
496.3711 750.7153 512.2324 758.6729 526.417 759.3457 c
S
1 w []0 d
474.6357 727.4258 m
477.2793 730.9243 480.0879 734.1704 483.0176 737.147 c
N
0 R
0 0 0 1 K
3 w [3 6 ]0 d
461.2256 703.4937 m
463.8516 710.2944 467.4209 717.1108 471.9297 723.6724 c
472.8105 724.9536 473.7129 726.2051 474.6357 727.4258 c
S
1 w []0 d
457.3633 690.6201 m
458.2686 694.8584 459.5566 699.1729 461.2256 703.4937 c
N
0 R
0 0 0 1 K
3 w [3 6 ]0 d
458.2686 659.6943 m
455.248 668.5889 454.9521 679.335 457.3633 690.6201 c
S
1 w []0 d
466.7168 638.4839 m
460.7881 642.5581 456.6182 648.4961 454.1973 655.623 c
N
531.2949 716.856 m
533.2197 714.6704 536.4004 712.8877 540.4199 712.0259 c
N
0 R
0 0 0 1 K
3 w
392.6396 629.8706 m
401.5146 629.2456 402.5986 623.9121 386.7646 615.7451 c
S
1 w
380.7744 628.6992 m
385.4287 629.7271 389.5166 630.0903 392.6396 629.8706 c
N
0 R
0 0 0 1 K
3 w [3 6 ]0 d
351.7646 615.7451 m
361.7021 622.6582 372.2012 626.8062 380.7744 628.6992 c
S
0 To
1 0 0 1 547.4307 728.4121 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w []0 d
/_Symbol 14 Tf
(w) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 524.4316 575.0786 0 Tp
TP
0 Tr
/_Helvetica 24 Tf
(A) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 541.4316 570.0786 0 Tp
TP
0 Tr
/_Helvetica 14 Tf
(2) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 511.085 727.4121 0 Tp
TP
0 Tr
/_Symbol 24 Tf
(D) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
2.4 w
650.083 743.8667 m
650.083 700.6665 l
650.083 643.0669 722.083 643.0669 722.083 700.6665 c
722.083 743.8667 l
S
650.083 520.6665 m
650.083 563.8667 l
650.083 621.4668 722.083 621.4668 722.083 563.8667 c
722.083 520.6665 l
S
0 To
1 0 0 1 405 621 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
(S) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
2.4 w
721.4014 743.8667 m
664.4834 772.6665 592.4834 765.4668 649.4014 743.8667 C
650.083 743.8667 L
722.083 743.8667 L
721.4014 743.8667 L
s
721.4023 520.6665 m
664.4834 549.4668 592.4834 542.2666 649.4023 520.6665 C
650.083 520.6665 L
722.083 520.6665 L
S
628.625 757.459 m
628.625 534.2524 l
S
0 To
1 0 0 1 711.9473 613.1606 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Symbol 14 Tf
(w) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 691.0303 630.0015 0 Tp
TP
0 Tr
/_Symbol 24 Tf
(D) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
2.4 w
687.0088 633.2485 m
685.8926 627.8174 673.3154 623.5356 657.9648 623.5356 c
641.8799 623.5356 628.8398 628.2368 628.8398 634.0356 c
S
[2.4 4.8 ]0 d
628.8398 634.0356 m
628.8398 639.8345 641.8799 644.5356 657.9648 644.5356 c
674.0498 644.5356 687.0898 639.8345 687.0898 634.0356 c
687.0898 633.771 687.0625 633.5083 687.0088 633.2485 c
S
0 To
1 0 0 1 607.1465 713.543 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w []0 d
(S) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 678.2461 715.0547 0 Tp
TP
0 Tr
/_Helvetica 24 Tf
(A) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 695.2461 710.0547 0 Tp
TP
0 Tr
/_Helvetica 14 Tf
(2) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 559.25 478.75 0 Tp
TP
0 Tr
/_Helvetica 24 Tf
(\(b\)) Tx 1 0 Tk
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1322 1304 a Fp(Figure)j(10)100 1452 y(The)35
b(main)g(p)r(oin)n(t,)j(ho)n(w)n(ev)n(er,)d(is)h(that)f(under)h(this)f
(pro)r(cess)g(of)g Fl(@)5 b Fp(-compression,)35 b(curv)n(es)0
1552 y(represen)n(ting)d(only)h(six)g(w)n(ords)f(in)i
Fl(F)12 b Fp(\()p Fl(a;)i(b)p Fp(\))33 b(can)g(b)r(e)h(formed)f(out)g
(of)g(an)n(y)g(giv)n(en)g(curv)n(e)f Fl(K)2921 1564 y
Fi(n)2966 1552 y Fp(,)0 1651 y(and)h(eac)n(h)f(can)h(b)r(e)g(quic)n
(kly)g(c)n(hec)n(k)n(ed)f(to)g(determine)i(if)f(it)h(is)f(a)f(prop)r
(er)g(p)r(o)n(w)n(er.)52 b(The)33 b(basic)0 1751 y(idea)39
b(is)h(that,)j(sc)n(hematically)-7 b(,)42 b(the)e(punctured)g(torus)f
(complemen)n(ts)g Fl(T)2391 1763 y Fj(1)2467 1751 y Fp(and)h
Fl(T)2690 1763 y Fj(2)2766 1751 y Fp(of)g Fl(K)2944 1763
y Fi(n)0 1850 y Fp(in)c Fl(@)5 b(H)42 b Fp(are)35 b(built)i(b)n(y)e
(gluing)h(together)f(pieces)g(of)h Fl(@)5 b(H)i Fm(j)p
Fp(\()p Fl(D)1936 1862 y Fj(1)1997 1850 y Fm([)24 b Fl(D)2145
1862 y Fj(2)2206 1850 y Fm([)g Fl(D)2354 1862 y Fj(3)2415
1850 y Fm([)g Fl(K)2565 1862 y Fi(n)2610 1850 y Fp(\),)38
b(and)e Fl(K)2944 1862 y Fi(n)0 1950 y Fp(cuts)f Fl(@)5
b(H)i Fm(j)p Fp(\()p Fl(D)432 1962 y Fj(1)493 1950 y
Fm([)23 b Fl(D)640 1962 y Fj(2)701 1950 y Fm([)h Fl(D)849
1962 y Fj(3)886 1950 y Fp(\))35 b(in)n(to)g(four)g(hexagons)e(and)i(a)g
(collection)f(of)i(rectangles,)f(from)0 2050 y(the)40
b(third)f(condition)g(on)g Fl(\015)5 b Fp(.)71 b(The)39
b(rectangles)f(o)r(ccur)g(b)r(et)n(w)n(een)i(arcs)e(of)h
Fl(K)2529 2062 y Fi(n)2613 2050 y Fp(parallel)f(in)0
2149 y Fl(@)5 b(H)i Fm(j)p Fp(\()p Fl(D)249 2161 y Fj(1)312
2149 y Fm([)27 b Fl(D)463 2161 y Fj(2)526 2149 y Fm([)g
Fl(D)677 2161 y Fj(3)714 2149 y Fp(\))42 b(=)h Fl(P)949
2161 y Fj(1)1012 2149 y Fm([)27 b Fl(P)1147 2161 y Fj(2)1185
2149 y Fp(;)45 b(t)n(w)n(o)38 b(hexagons)g(come)h(from)g(eac)n(h)g(of)g
Fl(P)2581 2161 y Fj(1)2618 2149 y Fl(;)14 b(P)2708 2161
y Fj(2)2746 2149 y Fp(,)42 b(lying)0 2249 y(b)r(et)n(w)n(een)25
b(non-parallel)e(arcs)g(of)i Fl(K)1103 2261 y Fi(n)1148
2249 y Fp(.)36 b(The)25 b Fl(T)1424 2261 y Fi(i)1476
2249 y Fp(therefore)f(eac)n(h)g(lo)r(ok)g(lik)n(e)g(a)h(pair)f(of)h
(hexagons)0 2349 y(with)e(pairs)e(of)h(edges)g(iden)n(ti\014ed)g
(through)g(a)g(string)f(of)h(rectangles.)34 b(F)-7 b(rom)22
b(this)g(p)r(oin)n(t)h(of)f(view)0 2448 y Fl(T)49 2460
y Fi(i)109 2448 y Fp(has)32 b(a)h(v)n(ery)e(natural)h(spine)h
(consisting)f(of)h(t)n(w)n(o)f(v)n(ertices,)h(one)f(for)g(eac)n(h)g
(hexagon,)h(and)0 2548 y(three)20 b(arcs,)h(one)f(for)f(eac)n(h)h
(string)f(of)i(rectangles)d(\(Figure)i(11\).)34 b(Eac)n(h)19
b(arc)h(can)f(b)r(e)i(represen)n(ted)0 2647 y(b)n(y)33
b(a)h(w)n(ord)e Fl(\025;)14 b(\026\027)39 b Fp(in)34
b Fl(F)12 b Fp(\()p Fl(a;)i(b)p Fp(\))34 b(b)n(y)f(reading)g(o\013)h
(its)f(in)n(tersections)g(with)h(the)g(disks)f Fl(D)2784
2659 y Fj(1)2855 2647 y Fp(and)0 2747 y Fl(D)69 2759
y Fj(2)134 2747 y Fp(dual)c(to)f(our)f(generators)f Fl(a;)14
b(b)p Fp(.)38 b(The)29 b(w)n(ord)e(represen)n(ting)g
Fl(K)2070 2759 y Fi(n)2114 2747 y Fp(,)i(in)g(terms)f(of)g(these)g
(three)0 2847 y(w)n(ords,)e(is)i(then)g Fl(\025)p 582
2801 51 4 v(\026\027)p 678 2779 49 4 v 5 w(\025)q(\026)p
777 2801 47 4 v(\027)5 b Fp(.)1044 3986 y @beginspecial
101 @llx 286 @lly 669 @urx 730 @ury 1584 @rwi @setspecial
%%BeginDocument: d_fig11.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig11.eps)
%%CreationDate: (9/10/2002) (10:41 AM)
%%BoundingBox: 101 286 669 730
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: Helvetica
%%+ Symbol
%%DocumentNeededFonts: Helvetica
%%+ Symbol
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 18 16 594 778
%AI3_DocumentPreview: Header
%%PageOrigin:18 16
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
 end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_cmykcolor eq
	{
 end
	} if
} def
/setcmykcolor
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
%%IncludeFont: Symbol
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/space
/exclam
/universal
/numbersign
/existential
/percent
/ampersand
/suchthat
/parenleft
/parenright
/asteriskmath
/plus
/comma
/minus
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/congruent
/Alpha
/Beta
/Chi
/Delta
/Epsilon
/Phi
/Gamma
/Eta
/Iota
/theta1
/Kappa
/Lambda
/Mu
/Nu
/Omicron
/Pi
/Theta
/Rho
/Sigma
/Tau
/Upsilon
/sigma1
/Omega
/Xi
/Psi
/Zeta
/bracketleft
/therefore
/bracketright
/perpendicular
/underscore
/radicalex
/alpha
/beta
/chi
/delta
/epsilon
/phi
/gamma
/eta
/iota
/phi1
/kappa
/lambda
/mu
/nu
/omicron
/pi
/theta
/rho
/sigma
/tau
/upsilon
/omega1
/omega
/xi
/psi
/zeta
/braceleft
/bar
/braceright
/similar
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Euro
/Upsilon1
/minute
/lessequal
/fraction
/infinity
/florin
/club
/diamond
/heart
/spade
/arrowboth
/arrowleft
/arrowup
/arrowright
/arrowdown
/degree
/plusminus
/second
/greaterequal
/multiply
/proportional
/partialdiff
/bullet
/divide
/notequal
/equivalence
/approxequal
/ellipsis
/arrowvertex
/arrowhorizex
/carriagereturn
/aleph
/Ifraktur
/Rfraktur
/weierstrass
/circlemultiply
/circleplus
/emptyset
/intersection
/union
/propersuperset
/reflexsuperset
/notsubset
/propersubset
/reflexsubset
/element
/notelement
/angle
/gradient
/registerserif
/copyrightserif
/trademarkserif
/product
/radical
/dotmath
/logicalnot
/logicaland
/logicalor
/arrowdblboth
/arrowdblleft
/arrowdblup
/arrowdblright
/arrowdbldown
/lozenge
/angleleft
/registersans
/copyrightsans
/trademarksans
/summation
/parenlefttp
/parenleftex
/parenleftbt
/bracketlefttp
/bracketleftex
/bracketleftbt
/bracelefttp
/braceleftmid
/braceleftbt
/braceex
/.notdef
/angleright
/integral
/integraltp
/integralex
/integralbt
/parenrighttp
/parenrightex
/parenrightbt
/bracketrighttp
/bracketrightex
/bracketrightbt
/bracerighttp
/bracerightmid
/bracerightbt
/.notdef
/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 O
0 0 0 0.27 k
0 R
0 0 0 1 K
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
107 616 m
107 670 215 724 287 724 c
359 724 467 670 467 616 c
467 589 467 562 467 544 c
467 526 395 490 395 472 c
395 454 395 436 395 418 c
395 373 323 373 323 418 c
323 436 323 454 323 472 c
323 490 251 526 251 544 c
251 562 251 584.5 251 602.5 c
251 643 179 643 179 602.5 c
179 584.5 179 562 179 544 c
179 526 107 490 107 472 c
107 454 107 418 107 400 c
107 346 215 292 287 292 c
359 292 467 346 467 400 c
467 427 467 454 467 472 c
467 490 395 526 395 544 c
395 562 395 584.5 395 602.5 c
395 643 323 643 323 602.5 c
323 584.5 323 562 323 544 c
323 526 251 490 251 472 c
251 454 251 436 251 418 c
251 373 179 373 179 418 c
179 436 179 454 179 472 c
179 490 107 517 107 544 c
107 571 107 598 107 616 c
b
u
0 0 0 1 k
3 w
287 688.4033 m
287 328.4033 l
B
287 688.4033 m
260 688.4033 143 706.4033 143 508.4033 c
143 310.4033 260 328.4033 287 328.4033 c
S
287 328.4033 m
314 328.4033 431 310.0166 431 508.0166 c
431 706.0166 314 688.4033 287 688.4033 c
S
U
u
0.9333 0.0196 0.8314 0 K
12 w
251 472 m
251 454 251 436 251 418 c
251 373 179 373 179 418 c
179 436 179 454 179 472 c
179 490 107 517 107 544 c
107 571 107 598 107 616 c
S
0.0275 0.0118 0.6275 0 K
4 w
251 472 m
251 454 251 436 251 418 c
251 373 179 373 179 418 c
179 436 179 454 179 472 c
179 490 107 517 107 544 c
107 571 107 598 107 616 c
S
u
0.9333 0.0196 0.8314 0 K
12 w
107 472 m
107 454 107 418 107 400 c
107 346 215 292 287 292 c
359 292 467 346 467 400 c
467 427 467 454 467 472 c
467 490 395 526 395 544 c
395 562 395 584.5 395 602.5 c
395 643 323 643 323 602.5 c
323 584.5 323 562 323 544 c
S
0.0275 0.0118 0.6275 0 K
4 w
107 472 m
107 454 107 418 107 400 c
107 346 215 292 287 292 c
359 292 467 346 467 400 c
467 427 467 454 467 472 c
467 490 395 526 395 544 c
395 562 395 584.5 395 602.5 c
395 643 323 643 323 602.5 c
323 584.5 323 562 323 544 c
S
U
u
0.9333 0.0196 0.8314 0 K
12 w
179 544 m
179 526 107 490 107 472 c
S
0.0275 0.0118 0.6275 0 K
4 w
179 544 m
179 526 107 490 107 472 c
S
U
u
0.9333 0.0196 0.8314 0 K
12 w
395 472.125 m
395 454.125 395 436.125 395 418.125 c
395 373.125 323 373.125 323 418.125 c
323 436.125 323 454.125 323 472.125 c
323 490.125 251 526.125 251 544.125 c
251 562.125 251 584.625 251 602.625 c
251 643.125 179 643.125 179 602.625 c
179 584.625 179 562.125 179 544.125 c
S
0.0275 0.0118 0.6275 0 K
4 w
395 472.125 m
395 454.125 395 436.125 395 418.125 c
395 373.125 323 373.125 323 418.125 c
323 436.125 323 454.125 323 472.125 c
323 490.125 251 526.125 251 544.125 c
251 562.125 251 584.625 251 602.625 c
251 643.125 179 643.125 179 602.625 c
179 584.625 179 562.125 179 544.125 c
S
U
u
0.9333 0.0196 0.8314 0 K
12 w
467 544 m
466.998 525.9995 395 490 395 472 c
S
0.0275 0.0118 0.6275 0 K
4 w
467 544 m
466.998 525.9995 395 490 395 472 c
S
U
u
0.9333 0.0196 0.8314 0 K
12 w
107 616 m
107 670 215 724 287 724 c
359 724 467 670 467 616 c
467 589 467 562 467 544 c
467 544 l
S
0.0275 0.0118 0.6275 0 K
4 w
107 616 m
107 670 215 724 287 724 c
359 724 467 670 467 616 c
467 589 467 562 467 544 c
467 544 l
S
U
u
0.9333 0.0196 0.8314 0 K
12 w
323 544 m
323 526 251 490 251 472 c
251 472 l
S
0.0275 0.0118 0.6275 0 K
4 w
323 544 m
323 526 251 490 251 472 c
251 472 l
S
U
U
0 To
1 0 0 1 125 616 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Symbol 36 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(l) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 260 625 0 Tp
TP
0 Tr
(m) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 422 616 0 Tp
TP
0 Tr
(n) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
3 w
278 598 m
287 580 l
296 598 l
S
139.7559 577.8931 m
146.0093 558.7642 l
157.5601 575.2441 l
S
414.6299 584.2207 m
427.2402 568.5376 l
432.2197 588.0366 l
S
0 To
1 0 0 1 550 357 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
(lmnlmn) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 483 356 0 Tp
TP
0 Tr
/_Helvetica 36 Tf
(K) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 514 359.333 0 Tp
TP
0 Tr
( =) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 648.334 385 0 Tp
TP
0 Tr
(_) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 608.334 393 0 Tp
TP
0 Tr
(_) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 570 385 0 Tp
TP
0 Tr
(_) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 512.1621 351.5869 0 Tp
TP
0 Tr
/_Helvetica 21 Tf
(n) Tx 1 0 Tk
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1322 4086 a(Figure)27 b(11)100 4234 y Fl(K)171
4246 y Fi(n)244 4234 y Fp(cuts)h Fl(@)5 b(D)538 4246
y Fj(3)603 4234 y Fp(in)n(to)28 b(a)f(\(p)r(oten)n(tially)i(large\))e
(collection)g(of)h(arcs,)f(and)h(eac)n(h)g(of)g(these)g(arcs)0
4334 y(p)r(oten)n(tially)23 b(cob)r(ounds)f(an)h(outermost)f(arc)g(of)h
(\006)9 b Fm(\\)g Fl(D)1700 4346 y Fj(3)1737 4334 y Fp(.)36
b(W)-7 b(e)23 b(m)n(ust)g(therefore)f(c)n(hec)n(k)g(that)h(the)0
4433 y(ann)n(ulus)h(obtained)h(b)n(y)f(surgering)f Fl(T)1162
4445 y Fj(1)1224 4433 y Fp(or)h Fl(T)1372 4445 y Fj(2)1408
4433 y Fp(,)i(whic)n(hev)n(er)d(one)i(con)n(tains)f(the)h(arc,)f(along)
g(eac)n(h)0 4533 y(arc)c(do)r(es)i(not)f(ha)n(v)n(e)f(b)r(oundaries)h
(represen)n(ting)f(prop)r(er)h(p)r(o)n(w)n(ers.)33 b(But)22
b(under)f Fl(@)5 b Fp(-compression)0 4633 y(eac)n(h)21
b(arc)f(will)i(cut)f(across)f(one)h(of)g(the)h(three)f(strings)f(of)i
(rectangles,)f(resulting)g(in)g(an)g(ann)n(ulus)0 4732
y(made)f(up,)j(essen)n(tially)-7 b(,)21 b(of)g(the)g(other)f(t)n(w)n(o)
g(strings.)34 b(The)20 b(core)g(of)h(this)g(ann)n(ulus)f(will)h
(therefore)0 4832 y(b)r(e)30 b(a)g(curv)n(e)f(represen)n(ted)g(b)n(y)h
(one)f(of)h(the)h(w)n(ords)d Fl(\025)p 1658 4786 51 4
v(\026)q Fp(,)j Fl(\027)p 1809 4764 49 4 v 5 w(\025)p
Fp(,)g(or)e Fl(\026)p 2065 4786 47 4 v(\027)5 b Fp(,)31
b(dep)r(ending)g(up)r(on)f(whic)n(h)0 4932 y(string)25
b(w)n(as)f(cut.)37 b(W)-7 b(e)25 b(should)g(note)h(that)f(these)h(w)n
(ords)e(will)h(b)r(e)h(\(cyclically\))f(reduced;)h(if,)g(for)0
5031 y(example,)j Fl(\025)g Fp(b)r(egins)g(b)n(y)g(passing)f(through)g
Fl(D)1479 5043 y Fj(1)1545 5031 y Fp(\(so)g(starts)g(with)i
Fl(a)p Fp(\))f(and)g Fl(\026)g Fp(passes)f(through)p
eop
%%Page: 11 11
11 10 bop 750 42 a Fn(Unique)24 b(minimal)c(gen)n(us)25
b(Seifert)e(surfaces)h(and)g(depth)657 b(11)0 241 y Fl(D)69
253 y Fj(2)130 241 y Fp(\(so)23 b(starts)h(with)g Fl(b)p
Fp(\),)h(then)f Fl(\027)29 b Fp(m)n(ust)24 b(\014rst)g(pass)f(through)g
Fl(D)1971 253 y Fj(3)2032 241 y Fp(and)h(so)f(\014rst)h(passes)f
(through)0 340 y Fl(D)69 352 y Fj(1)147 340 y Fp(or)40
b Fl(D)331 352 y Fj(2)409 340 y Fp(in)h(the)h(opp)r(osite)e(direction,)
k(and)d(so)g(\(is)g(trivial)f(or\))g(starts)h(with)g
Fl(A)g Fp(or)g Fl(B)t Fp(.)0 440 y(Consequen)n(tly)-7
b(,)p 534 394 47 4 v 30 w Fl(\027)36 b Fk(ends)31 b Fp(with)g
Fl(a)f Fp(or)f Fl(b)p Fp(,)i(so)f Fl(\025)p 1416 394
V(\027)36 b Fp(and)30 b Fl(\026)p 1707 394 V(\027)36
b Fp(are)29 b(cyclically)h(reduced.)45 b(They)30 b(are,)0
540 y(as)i(sub)n(w)n(ords)f(of)i Fl(K)644 552 y Fi(n)688
540 y Fp(,)h(already)d(reduced.)52 b(All)33 b(other)f(com)n(binations)g
(of)h(initial)f(letters)h(are)0 639 y(similar.)100 742
y(In)e(the)h(end)g(it)g(will)g(not)g(b)r(e)g(necessary)e(to)h(do)g(so,)
h(but)h(as)e(a)g(practical)f(matter,)j(\014nding)0 841
y(the)i(w)n(ords)e Fl(\025;)14 b(\026;)g(\027)40 b Fp(is)34
b(fairly)g(straigh)n(tforw)n(ard.)55 b(It)35 b(can)f(b)r(e)h(done)f
(from)g(a)g(picture)h(of)f Fl(K)2921 853 y Fi(n)2966
841 y Fp(,)0 941 y(as)f(in)g(Figure)g(12)g(\(for)g(one)g(arc)f(eac)n(h)
h(of)g Fl(T)1404 953 y Fj(1)1474 941 y Fp(and)g Fl(T)1690
953 y Fj(2)1727 941 y Fp(\);)k(once)c(one)f(of)i(the)g(w)n(ords)e
(\(for)h(eac)n(h)0 1041 y(punctured)j(torus\))g(is)g(determined,)j(the)
d(others)f(can)h(easily)g(b)r(e)g(found,)j(since)d(the)g(w)n(ords)0
1140 y(found)25 b(will)g(t)n(ypically)f(o)r(ccur)g(only)g(t)n(wice)g
(\(once)h(forw)n(ard)e(and)h(once)g(bac)n(kw)n(ard\))f(in)i
Fl(K)2762 1152 y Fi(n)2807 1140 y Fp(,)g(and)0 1240 y(the)k(remaining)g
(t)n(w)n(o)f(pieces)h(will)g(ha)n(v)n(e)f(only)g(one)h(represen)n
(tation)e(as)i Fl(w)2329 1252 y Fj(1)p 2366 1194 97 4
v 2366 1240 a Fl(w)2425 1252 y Fj(2)2492 1240 y Fp(and)p
2655 1194 V 29 w Fl(w)2714 1252 y Fj(1)2752 1240 y Fl(w)2811
1252 y Fj(2)2848 1240 y Fp(.)42 b(In)0 1339 y(practice,)26
b(in)h(fact,)g(only)f(t)n(w)n(o)f(represen)n(tations)g(of)h
Fl(K)1693 1351 y Fi(n)1765 1339 y Fp(in)g(the)h(required)f(form)g(will)
g(t)n(ypically)0 1439 y(exist)h(at)h(all.)-6 2521 y @beginspecial
753 @llx -215 @lly 5313 @urx 1261 @ury 3600 @rwi @setspecial
%%BeginDocument: d_fig12.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig12.eps)
%%CreationDate: (9/10/2002) (10:22 AM)
%%BoundingBox: 753 -215 5313 1261
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%DocumentNeededFonts: Helvetica
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 18 16 594 778
%AI3_DocumentPreview: Header
%%PageOrigin:18 16
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 O
0 0 0 0.17 k
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
2345.2305 -63.4775 m
2261.3125 -63.4775 2185.3965 -48.0459 2118.7783 -18.4775 c
1921.0459 69.2861 1767.7783 281.584 1767.7783 584.5225 c
1767.7783 872.5225 1709.7783 1028.5225 1605.7783 1124.5225 c
1553.7783 1172.5225 1441.7773 1250.5225 1371.7783 1250.5225 c
1398.7783 1250.5225 l
1468.7773 1250.5225 1571.7783 1172.5225 1623.7783 1124.5225 c
1727.7783 1028.5225 1785.7783 872.5225 1785.7783 584.5225 C
1787.2305 584.5225 L
1787.2305 281.584 1948.0459 69.2861 2145.7783 -18.4775 c
2212.3965 -48.0459 2288.3125 -63.4775 2372.2305 -63.4775 c
F
0 R
0 0 0 1 K
1479.7471 1250.5225 m
1549.7471 1250.5225 1625.7471 1172.5225 1677.7471 1124.5225 c
1704.8691 1099.4863 1728.8633 1070.3696 1749.5156 1035.895 C
1747.8018 1035.0771 L
1767.7783 1109.9258 L
1767.5166 1108.7222 L
1741.3213 1102.3584 1716.9043 1105.481 1695.7471 1124.5225 c
1643.1465 1171.8633 1576.7471 1250.5225 1506.7471 1250.5225 c
B
2262.7783 -67.9775 m
2178.8594 -67.9775 2113.3965 -54.5459 2046.7783 -24.9775 C
2035.3262 -18.5 L
1837.5928 69.2617 1715.2305 277.084 1715.2305 580.0225 C
1713.7783 580.0225 L
1713.7783 868.0225 1655.7783 1024.0225 1551.7783 1120.0225 C
1552.2783 1123.5225 L
1453.2783 1195.5225 1391.9229 1147.4414 1354.2783 1105.5225 c
1239.4229 977.624 1255.2783 738.2891 1255.2783 574.5225 c
1255.2783 385.5225 1309.2783 340.5225 1498.2783 340.5225 c
1554.5283 340.5225 1593.2002 347.5537 1619.7871 362.9893 C
1621.7813 364.0986 L
1575.1309 367.5352 1548.0889 390.8936 1498.2783 390.6797 C
1497.7783 391.0225 L
1444.0156 390.791 1443.7783 364.0225 1389.7783 364.0225 c
1308.7783 364.0225 1290.7783 472.0225 1290.7783 580.0225 c
1290.7783 688.0225 1281.7783 850.0225 1497.7783 850.0225 c
1659.7783 850.0225 1695.7783 814.0225 1695.7783 598.0225 c
1695.7783 594.9961 1695.8906 582.999 1695.7783 580.0225 c
1685.7783 313.0225 1808.7783 66.0225 2010.7783 -19.9775 c
2077.8389 -48.5283 2151.8594 -67.9775 2235.7783 -67.9775 c
F
0 0 0 0.3 k
1940.5918 1216.3154 m
1971.2852 1236.3345 2000.2314 1251.0161 2025.2783 1251 c
2160.5127 886.8228 l
2088.4375 862.8882 2045.3965 807.457 2024.0469 729.6729 c
1830.3701 732.0732 l
1818.7559 865.0122 1790.2432 962.0039 1746.833 1035.0547 c
1766.8096 1109.9033 l
1821.6992 1124.5464 1884.1035 1179.4702 1940.5918 1216.3154 c
F
0 R
0 0 0 1 K
3 w
2630.7783 1250.5 m
2630.9336 1250.5 2630.623 1250.5 2630.7783 1250.5 c
2750.0723 1250.5 2864.7783 1135.7939 2864.7783 1016.5 c
2864.7783 152.5 l
2864.7783 33.2061 2750.0723 -63.5 2630.7783 -63.5 c
1118.7783 -63.5 l
999.4844 -63.5 902.7783 33.2061 902.7783 152.5 c
902.7783 1016.5 l
902.7783 1135.6387 999.6982 1250.248 1118.7783 1250.5 c
2630.7783 1250.5 l
s
1442.5449 395.2686 m
1382.8984 395.2686 1334.5449 443.6211 1334.5449 503.2686 c
1334.5498 665.2686 l
1334.5498 724.917 1382.9014 773.2686 1442.5449 773.2686 c
1550.541 773.2686 l
1550.5449 773.2686 l
1610.1924 773.2686 1658.5449 724.917 1658.5449 665.2686 c
1658.5449 503.2686 l
1658.5449 443.6211 1610.1924 395.2686 1550.5449 395.2686 c
1442.5449 395.2686 l
s
2198.5449 395.2686 m
2138.8965 395.2686 2090.5449 443.6211 2090.5449 503.2686 c
2090.5449 665.2686 l
2090.5449 724.917 2138.8965 773.2686 2198.5449 773.2686 c
2306.5449 773.2686 l
2306.5449 773.2686 l
2366.1934 773.2686 2414.5449 724.917 2414.5449 665.2686 c
2414.5449 503.2686 l
2414.5449 443.6211 2366.1875 395.2686 2306.5449 395.2686 c
2198.5449 395.2686 l
s
1 w
2090.5449 584.2686 m
2090.5449 524.6211 1993.8359 476.2686 1874.5449 476.2686 c
1755.252 476.2686 1658.5449 524.6211 1658.5449 584.2686 c
S
[6 8 ]0 d
1658.5449 584.2686 m
1658.5449 643.917 1755.252 692.2686 1874.5449 692.2686 c
1993.8359 692.2686 2090.5449 643.917 2090.5449 584.2686 c
S
[]0 d
1334.5449 584.2695 m
1334.5449 524.6211 1237.8359 476.2686 1118.5469 476.2686 c
999.2529 476.2686 902.5469 524.6211 902.5469 584.2695 c
S
[6 8 ]0 d
902.5469 584.2695 m
902.5469 643.917 999.2529 692.2686 1118.5469 692.2686 c
1237.8359 692.2686 1334.5449 643.917 1334.5449 584.2695 c
S
[]0 d
2864.7783 584.5 m
2864.7783 524.8516 2749.8359 476.2686 2630.5449 476.2686 c
2511.252 476.2686 2414.5449 524.6211 2414.5449 584.2695 c
S
[6 8 ]0 d
2414.5449 584.2695 m
2414.5449 643.917 2511.252 692.2686 2630.5449 692.2686 c
2749.8359 692.2686 2864.7783 644.1465 2864.7783 584.5 c
S
2 w []0 d
1343.7783 314.5 m
1271.7783 341.5 1271.7783 465.4014 1271.7783 575.5 c
1271.7783 818.5 1361.7783 872.5 1496.7783 872.5 c
1712.7783 872.5 1703.7783 746.5 1703.7783 557.5 c
1703.7783 422.5 1685.7783 368.5 1631.7783 368.5 c
1577.7783 368.5 1550.541 395.7314 1496.7783 395.5 c
S
1712.7783 -63.5 m
1545.5879 -63.6104 1550.7783 8.5 1316.7783 8.5 c
S
[6 8 ]0 d
1973.7783 -18.5 m
1865.7783 44.5 1748.7783 -63.5 1712.7783 -63.5 c
S
2252.7783 773.5 m
2306.5449 773.2686 2288.7783 800.5 2342.7783 800.5 c
2423.7783 800.5 2441.7783 692.5 2441.7783 611.5 c
2441.7783 449.5 2414.7783 350.5 2252.7783 350.5 c
2036.7783 350.5 2009.7783 395.5 2009.7783 584.5 c
2009.7783 773.5 2073.9102 899.5 2252.7783 899.5 c
2431.6465 899.5 2513.7783 854.5 2513.7783 557.5 c
2513.7783 343.1396 2315.7783 -99.5 2198.7783 -18.5 c
S
1694.7783 584.5 m
1694.6035 587.4736 1694.7783 599.4736 1694.7783 602.5 c
1694.7783 818.5 1658.7783 854.5 1496.7783 854.5 c
1280.7783 854.5 1289.7783 692.5 1289.7783 584.5 c
1289.7783 476.5 1307.7783 368.5 1388.7783 368.5 c
1442.7783 368.5 1443.0156 395.2686 1496.7783 395.5 c
S
2252.7783 395.5 m
2198.5449 395.7324 2198.7783 377.5 2144.7783 377.5 c
2063.7783 377.5 2045.7783 503.5 2045.7783 557.5 c
2045.7783 611.5 2036.7783 863.5 2252.7783 863.5 c
2441.7783 863.5 2477.7783 746.5 2477.7783 611.5 c
2477.7783 422.5 2441.7783 314.5 2252.7783 314.5 c
2066.7734 314.5 1849.5996 399.8115 1838.7783 584.5 c
S
[]0 d
2000.8291 611.5 m
2000.8291 800.5 2063.7783 881.5 2252.7783 881.5 c
2441.7783 881.5 2495.7783 800.5 2495.7783 584.5 c
2495.7783 449.5 2477.7783 332.5 2252.7783 332.5 c
2090.7783 332.5 2063.7783 476.5 2063.7783 611.5 c
2063.7783 665.5 2099.7783 800.5 2153.7783 800.5 c
2207.7783 800.5 2198.5449 773.2686 2252.7783 773.5 c
S
1496.7783 773.5 m
1443.0156 773.7314 1442.7783 800.5 1388.7783 800.5 c
1307.7783 800.5 1307.7783 692.5 1307.7783 584.5 c
1307.7783 476.5 1334.7783 323.5 1496.7783 323.5 c
1685.7783 323.5 1856.7783 422.5 1856.7783 611.5 c
S
[6 8 ]0 d
1550.7783 1124.5 m
1451.7783 1196.5 1390.4229 1148.4189 1352.7783 1106.5 c
1237.9229 978.6016 1253.7783 739.2666 1253.7783 575.5 c
1253.7783 386.5 1307.7783 341.5 1496.7783 341.5 c
1676.7783 341.5 1676.7783 413.5 1676.7783 602.5 c
1676.7783 737.5 1658.7783 800.5 1604.7783 800.5 c
1550.7783 800.5 1550.541 773.2686 1496.7783 773.5 c
S
2027.7783 1250.5 m
1933.7559 1250.5615 1784.7783 1043.5 1694.7783 1124.5 c
S
[]0 d
2549.7783 1214.5 m
2297.7783 1214.5 2157.3896 1250.4141 2027.7783 1250.5 c
S
2252.7783 395.5 m
2333.7783 395.5 2315.7783 368.5 2369.7783 368.5 c
2423.7783 368.5 2459.7783 476.5 2459.7783 557.5 c
2459.7783 773.5 2414.7783 845.5 2252.7783 845.5 c
2090.7783 845.5 2027.7783 773.5 2027.7783 584.5 c
2027.7783 395.5 2090.7783 296.5 2252.7783 296.5 c
2414.7783 296.5 2531.7783 395.5 2531.7783 611.5 c
2531.7783 730.6465 2486.7783 899.5 2342.7783 926.5 c
S
3 w
1316.7783 116.5 m
1158.0117 139.2793 1030.2783 271.293 1030.2783 583 c
1030.2783 970 1370.7783 1250.5 1478.7783 1250.5 c
S
2396.7783 1034.5 m
2538.4336 995.2197 2657.7783 853.499 2657.7783 611.5 c
2657.7783 372.4873 2477.7783 80.5 2234.7783 80.5 c
2001.3633 80.5 1677.5176 53.5 1532.7783 53.5 c
1506.5137 53.5 1355.1289 56.9971 1316.7783 62.5 c
S
1910.7783 611.5 m
1910.7783 935.5 2009.1836 1007.5 2189.7783 1007.5 c
2248.4707 1007.5 2314.9746 1016.1924 2378.7783 998.5 c
S
1343.7783 314.5 m
1406.9033 290.7461 1468.5908 296.5 1541.7783 296.5 c
1696.8828 296.5 1874.7275 395.3838 1874.7275 611.5 c
S
1316.7783 152.5 m
1354.9941 146.1309 1506.5137 143.5 1532.7783 143.5 c
1677.5176 143.5 1902.3633 170.5 2135.7783 170.5 c
2378.7783 170.5 2567.7783 341.3877 2567.7783 580.4004 c
2567.7783 822.3994 2468.7783 899.5 2351.7783 944.5 c
S
2 w
1244.7783 197.5 m
1262.7783 188.5 1262.7783 161.5 1316.7783 152.5 c
S
3 w
2540.7783 1196.5 m
2514.9902 1199.207 2208.9941 1214.5 2180.7783 1214.5 c
1829.7783 1214.5 1514.7783 1187.5 1352.7783 1106.5 c
1207.8809 1034.0508 1073.7783 827.5 1073.7783 584.5 c
1073.7783 414.6865 1118.7783 260.5 1244.7783 197.5 c
S
2207.7783 -63.5 m
2369.7783 -63.5 2711.7783 233.5 2711.7783 611.5 c
2711.7783 907.7939 2630.7783 1070.5 2486.7783 1088.5 c
S
[6 8 ]0 d
2008.3262 -18.5 m
2074.9434 -48.0684 2150.8594 -63.5 2234.7783 -63.5 c
S
1786.2305 584.5 m
1786.2305 281.5615 1947.0449 69.2617 2144.7783 -18.5 c
S
1658.7783 1124.5 m
1762.7783 1028.5 1820.7783 872.5 1820.7783 584.5 c
S
1424.7783 1250.5 m
1494.7773 1250.5 1588.7783 1172.5 1640.7783 1124.5 c
S
[]0 d
2234.7783 -63.5 m
2396.7783 -63.5 2729.7783 233.5 2729.7783 611.5 c
2729.7783 907.7939 2648.7783 1097.5 2495.7783 1106.5 c
S
2261.7783 -63.5 m
2423.7783 -63.5 2747.7793 242.5 2747.7793 620.5 c
2747.7793 916.7939 2684.7783 1097.5 2504.7783 1124.5 c
S
2288.7783 -63.5 m
2450.7783 -63.5 2765.7793 242.5 2765.7793 620.5 c
2765.7793 916.7939 2702.7783 1124.5 2513.7783 1142.5 c
S
2315.7783 -63.5 m
2477.7783 -63.5 2783.7793 246.6035 2783.7793 624.6035 c
2783.7793 872.8984 2720.7783 1133.5 2522.7783 1160.5 c
S
2342.7783 -63.5 m
2504.7783 -63.5 2801.7793 246.6035 2801.7793 624.6035 c
2801.7793 872.8984 2738.7783 1151.5 2531.7783 1178.5 c
S
2369.7783 -63.5 m
2531.7783 -63.5 2819.7803 255.6035 2819.7803 633.6035 c
2819.7803 881.8984 2756.7783 1169.5 2540.7783 1196.5 c
S
2396.7783 -63.5 m
2558.7783 -63.5 2837.7803 255.6035 2837.7803 633.6035 c
2837.7803 881.8984 2774.7783 1187.5 2549.7783 1214.5 c
S
2387.7783 1016.5 m
2529.4336 977.2197 2639.7783 844.499 2639.7783 602.5 c
2639.7783 363.4873 2468.7783 98.5 2225.7783 98.5 c
1992.3633 98.5 1677.5176 71.5 1532.7783 71.5 c
1506.5137 71.5 1355.1289 74.998 1316.7783 80.5 c
S
2414.7783 1070.5 m
2556.4336 1031.2197 2693.7783 862.499 2693.7783 620.5 c
2693.7783 381.4873 2504.7783 44.5 2261.7783 44.5 c
2028.3633 44.5 1686.5176 17.5 1541.7783 17.5 c
1515.5137 17.5 1355.1289 20.998 1316.7783 26.5 c
S
2405.7783 1052.5 m
2547.4336 1013.2197 2675.7783 853.499 2675.7783 611.5 c
2675.7783 372.4873 2477.7783 62.5 2234.7783 62.5 c
2001.3633 62.5 1677.5176 35.5 1532.7783 35.5 c
1506.5137 35.5 1355.1289 38.998 1316.7783 44.5 c
S
2360.7783 962.5 m
2502.4336 923.2197 2585.7783 831.3994 2585.7783 589.4004 c
2585.7783 350.3877 2396.7783 152.5 2153.7783 152.5 c
1920.3633 152.5 1677.5176 125.5 1532.7783 125.5 c
1506.5137 125.5 1355.1289 128.9971 1316.7783 134.5 c
S
2378.7783 998.5 m
2520.4336 959.2197 2621.7783 840.3994 2621.7783 598.4004 c
2621.7783 359.3877 2441.7783 116.5 2198.7783 116.5 c
1965.3633 116.5 1677.5176 89.5 1532.7783 89.5 c
1506.5137 89.5 1355.1289 92.998 1316.7783 98.5 c
S
2369.7783 980.5 m
2511.4336 941.2197 2603.7783 831.3994 2603.7783 589.4004 c
2603.7783 350.3877 2414.7783 130.4004 2171.7783 130.4004 c
1938.3633 130.4004 1677.5176 107.5 1532.7783 107.5 c
1506.5137 107.5 1355.1289 110.998 1316.7783 116.5 c
S
1316.7783 134.5 m
1158.0117 157.2803 1046.7783 272.793 1046.7783 584.5 c
1046.7783 971.5 1397.7783 1250.5 1505.7783 1250.5 c
S
1316.7783 80.5 m
1158.0117 103.2803 994.2783 271.293 994.2783 583 c
994.2783 970 1316.7783 1250.5 1424.7783 1250.5 c
S
1316.7783 98.5 m
1158.0117 121.2803 1010.7783 272.793 1010.7783 584.5 c
1010.7783 971.5 1343.7783 1250.5 1451.7783 1250.5 c
S
1316.7783 44.5 m
1158.0117 67.2793 958.2783 271.293 958.2783 583 c
958.2783 970 1262.7783 1250.5 1370.7783 1250.5 c
S
1316.7783 62.5 m
1158.0117 85.2803 974.7783 272.793 974.7783 584.5 c
974.7783 971.5 1289.7783 1250.5 1397.7783 1250.5 c
S
1316.7783 8.5 m
1163.7783 8.5 922.2783 271.293 922.2783 583 c
922.2783 970 1208.7783 1250.5 1316.7783 1250.5 c
S
1316.7783 26.5 m
1158.0117 49.2803 938.7783 272.793 938.7783 584.5 c
938.7783 971.5 1235.7783 1250.5 1343.7783 1250.5 c
S
2531.7783 1178.5 m
2505.9902 1181.207 2208.9941 1196.5 2180.7783 1196.5 c
1829.7783 1196.5 1532.7783 1178.5 1370.7783 1097.5 c
1225.8809 1025.0508 1091.7783 827.5 1091.7783 584.5 c
1091.7783 414.6865 1143.3115 243.6152 1289.7783 188.5 c
S
2522.7783 1160.5 m
2496.9902 1163.207 2208.9941 1178.5 2180.7783 1178.5 c
1829.7783 1178.5 1532.7783 1160.5 1388.7783 1088.5 c
1243.8809 1016.0508 1109.7783 827.5 1109.7783 584.5 c
1109.7783 414.6865 1154.7783 260.5 1289.7783 206.5 c
S
2513.7783 1142.5 m
2487.9902 1145.207 2208.9941 1160.5 2180.7783 1160.5 c
1829.7783 1160.5 1550.7783 1151.5 1406.7783 1079.5 c
1261.8809 1007.0508 1127.7783 827.5 1127.7783 584.5 c
1127.7783 414.6865 1163.7783 278.5 1289.7783 224.5 c
S
2504.7783 1124.5 m
2478.9902 1127.207 2208.9941 1142.5 2180.7783 1142.5 c
1829.7783 1142.5 1568.7783 1142.5 1424.7783 1070.5 c
1279.8809 998.0508 1145.7783 827.5 1145.7783 584.5 c
1145.7783 414.6865 1181.7783 287.5 1289.7783 242.5 c
S
2495.7783 1106.5 m
2469.9902 1109.207 2208.9941 1124.5 2180.7783 1124.5 c
1829.7783 1124.5 1586.7783 1124.5 1442.7783 1061.5 c
1294.3613 996.5674 1163.7783 827.5 1163.7783 584.5 c
1163.7783 414.6865 1190.7783 305.5 1289.7783 260.5 c
S
2486.7783 1088.5 m
2460.9902 1091.207 2208.9941 1106.5 2180.7783 1106.5 c
1829.7783 1106.5 1604.7783 1115.5 1460.7783 1052.5 c
1312.3613 987.5674 1181.7783 827.5 1181.7783 584.5 c
1181.7783 414.6865 1208.7783 323.5 1289.7783 278.5 c
S
2414.7783 1070.5 m
2333.7783 1088.5 2208.9941 1088.5 2180.7783 1088.5 c
1829.7783 1088.5 1622.7783 1106.5 1478.7783 1043.5 c
1330.3613 978.5674 1199.7783 827.5 1199.7783 584.5 c
1199.7783 414.6865 1235.7783 323.5 1289.7783 296.5 c
S
1289.7783 296.5 m
1352.9043 272.7461 1486.5908 278.5 1559.7783 278.5 c
1714.8828 278.5 1892.7275 395.3838 1892.7275 611.5 c
S
1289.7783 278.5 m
1352.9043 254.7461 1513.5908 260.5 1586.7783 260.5 c
1741.8828 260.5 1910.7783 395.3838 1910.7783 611.5 c
S
1289.7783 260.5 m
1352.9043 236.7461 1531.5908 242.5 1604.7783 242.5 c
1759.8828 242.5 1928.7783 395.3838 1928.7783 611.5 c
S
1289.7783 242.5 m
1352.9043 218.7461 1549.5908 224.5 1622.7783 224.5 c
1777.8828 224.5 1946.7783 395.3838 1946.7783 611.5 c
S
1289.7783 224.5 m
1352.9043 200.7461 1558.5908 206.5 1631.7783 206.5 c
1786.8828 206.5 1964.7783 395.3838 1964.7783 611.5 c
S
1289.7783 206.5 m
1352.9043 182.7461 1567.5908 188.5 1640.7783 188.5 c
1795.8828 188.5 1982.8291 395.3838 1982.8291 611.5 c
S
1289.7783 188.5 m
1352.9043 164.7461 1576.5908 170.5 1649.7783 170.5 c
1804.8828 170.5 2000.8291 395.3838 2000.8291 611.5 c
S
1892.7783 611.5 m
1892.7783 935.5 2000.1836 1025.5 2180.7783 1025.5 c
2239.4707 1025.5 2323.9746 1034.1924 2387.7783 1016.5 c
S
1874.7783 611.5 m
1874.7783 935.5 1991.1836 1043.5 2171.7783 1043.5 c
2230.4707 1043.5 2332.9746 1052.1924 2396.7783 1034.5 c
S
1856.7783 611.5 m
1856.7783 935.5 1973.1836 1061.5 2153.7783 1061.5 c
2212.4707 1061.5 2341.9746 1070.1924 2405.7783 1052.5 c
S
1982.7783 611.5 m
1982.7783 935.5 2054.1836 935.5 2234.7783 935.5 c
2293.4707 935.5 2306.7783 935.5 2342.7783 926.5 c
S
1964.7783 611.5 m
1964.7783 935.5 2045.1836 953.5 2225.7783 953.5 c
2284.4707 953.5 2315.7783 953.5 2351.7783 944.5 c
S
1946.7783 611.5 m
1946.7783 935.5 2036.1836 971.5 2216.7783 971.5 c
2275.4707 971.5 2324.7783 971.5 2360.7783 962.5 c
S
1928.7783 611.5 m
1928.7783 935.5 2018.1836 989.5 2198.7783 989.5 c
2257.4707 989.5 2333.7783 989.5 2369.7783 980.5 c
S
[6 8 ]0 d
1451.7783 1250.5 m
1521.7773 1250.5 1606.7783 1172.5 1658.7783 1124.5 c
S
1478.7783 1250.5 m
1548.7773 1250.5 1624.7783 1172.5 1676.7783 1124.5 c
S
1505.7783 1250.5 m
1575.7773 1250.5 1642.7783 1172.5 1694.7783 1124.5 c
S
1316.7783 1250.5 m
1386.7773 1250.5 1516.7783 1172.5 1568.7783 1124.5 c
S
1343.7783 1250.5 m
1413.7773 1250.5 1534.7783 1172.5 1586.7783 1124.5 c
S
1370.7783 1250.5 m
1440.7773 1250.5 1552.7783 1172.5 1604.7783 1124.5 c
S
1397.7783 1250.5 m
1467.7773 1250.5 1570.7783 1172.5 1622.7783 1124.5 c
S
1676.7783 1124.5 m
1780.7783 1028.5 1838.7783 872.5 1838.7783 584.5 c
S
1622.7783 1124.5 m
1726.7783 1028.5 1784.7783 872.5 1784.7783 584.5 c
S
1640.7783 1124.5 m
1744.7783 1028.5 1802.7783 872.5 1802.7783 584.5 c
S
1586.7783 1124.5 m
1690.7783 1028.5 1748.7783 872.5 1748.7783 584.5 c
S
1604.7783 1124.5 m
1708.7783 1028.5 1766.7783 872.5 1766.7783 584.5 c
S
1550.7783 1124.5 m
1654.7783 1028.5 1712.7783 872.5 1712.7783 584.5 c
S
1568.7783 1124.5 m
1672.7783 1028.5 1730.7783 872.5 1730.7783 584.5 c
S
1766.7783 584.5 m
1766.7783 281.5615 1920.0449 69.2617 2117.7783 -18.5 c
S
1822.2305 584.5 m
1822.2305 281.5615 2001.0449 69.2617 2198.7783 -18.5 c
S
1802.7783 584.5 m
1802.7783 281.5615 1974.0449 69.2617 2171.7783 -18.5 c
S
1714.2305 584.5 m
1714.2305 281.5615 1839.0449 69.2617 2036.7783 -18.5 c
S
2 w
1694.7783 584.5 m
1694.7783 281.5615 1810.5928 69.2617 2008.3262 -18.5 c
S
3 w
1750.2305 584.5 m
1750.2305 281.5615 1893.0449 69.2617 2090.7783 -18.5 c
S
1730.7783 584.5 m
1730.7783 281.5615 1866.0449 69.2617 2063.7783 -18.5 c
S
1979.874 -18.5 m
2046.4922 -48.0684 2122.4082 -63.5 2206.3262 -63.5 c
S
2063.7783 -18.5 m
2130.3965 -48.0684 2206.3125 -63.5 2290.2305 -63.5 c
S
2035.3262 -18.5 m
2101.9434 -48.0684 2177.8594 -63.5 2261.7783 -63.5 c
S
2117.7783 -18.5 m
2184.3965 -48.0684 2260.3125 -63.5 2344.2305 -63.5 c
S
2089.3262 -18.5 m
2155.9434 -48.0684 2231.8594 -63.5 2315.7783 -63.5 c
S
2173.2305 -18.5 m
2239.8477 -48.0684 2315.7637 -63.5 2399.6826 -63.5 c
S
2144.7783 -18.5 m
2211.3965 -48.0684 2287.3125 -63.5 2371.2305 -63.5 c
S
0 O
0 0 0 0.3 k
1 w []0 d
1846.2773 159.5225 m
1937.083 165.1484 2034.9766 170.0498 2134.4248 170.0498 c
2168.5664 170.0498 2201.6426 173.4238 2233.2783 179.8848 c
2233.2793 296.4824 l
2121.626 301.9434 2060.9688 358.9395 2037.7148 464.0723 c
1971.5176 464.0723 l
1937.9941 373.9102 1877.8096 292.1602 1810.2783 237.8799 c
1846.2773 159.5225 l
f
0 0 0 0.71 k
0 R
0 0 0 1 K
2262.7783 -64.9775 m
2424.7783 -64.9775 2748.7793 241.0225 2748.7793 619.0225 c
2748.7793 915.3164 2686.7969 1104.02 2505.7783 1123.0225 c
2479.9902 1125.7295 2209.9941 1141.0225 2181.7783 1141.0225 c
1830.7783 1141.0225 1569.7783 1141.0225 1425.7783 1069.0225 c
1280.8809 996.5732 1146.7783 826.0225 1146.7783 583.0225 c
1146.7783 413.209 1181.2744 282.2285 1290.7783 241.0225 c
1353.9043 217.2686 1550.5908 223.0225 1623.7783 223.0225 c
1778.8828 223.0225 1947.7783 393.9063 1947.7783 610.0225 c
1947.7783 934.0225 2037.1836 970.0225 2217.7783 970.0225 c
2276.4707 970.0225 2325.7783 970.0225 2361.7783 961.0225 c
2504.3896 925.3696 2586.7783 829.9219 2586.7783 587.9229 c
2586.7783 348.9102 2397.7783 151.0225 2154.7783 151.0225 c
1921.3633 151.0225 1678.5176 124.0225 1533.7783 124.0225 c
1507.5137 124.0225 1356.1289 127.5195 1317.7783 133.0225 c
1159.0127 155.8037 1047.7783 271.3154 1047.7783 583.0225 c
1047.7783 970.0225 1398.7783 1249.0225 1506.7783 1249.0225 c
1479.7783 1249.0225 l
1371.7783 1249.0225 1031.2783 968.5225 1031.2783 581.5225 c
1031.2783 269.8154 1159.0117 137.7998 1317.7783 115.0225 c
1356.1289 109.5205 1507.5137 106.0225 1533.7783 106.0225 c
1678.5176 106.0225 1939.3633 128.9229 2172.7783 128.9229 c
2415.7783 128.9229 2604.7783 348.9102 2604.7783 587.9229 c
2604.7783 829.9219 2513.3896 943.3696 2370.7783 979.0225 c
2334.7783 988.0225 2258.4707 988.0225 2199.7783 988.0225 c
2019.1836 988.0225 1929.7783 934.0225 1929.7783 610.0225 c
1929.7783 393.9063 1760.8828 241.0225 1605.7783 241.0225 c
1532.5908 241.0225 1353.9043 235.2686 1290.7783 259.0225 c
1188.998 297.3223 1164.7783 413.209 1164.7783 583.0225 c
1164.7783 826.0225 1295.3613 995.0898 1443.7783 1060.0225 c
1587.7783 1123.0225 1830.7783 1123.0225 2181.7783 1123.0225 c
2209.9941 1123.0225 2470.9902 1107.7295 2496.7783 1105.0225 c
2649.2051 1089.0215 2730.7783 906.3164 2730.7783 610.0225 c
2730.7783 232.0225 2397.7783 -64.9775 2235.7783 -64.9775 c
B
2369.2764 -63.4775 m
2531.2764 -63.4775 2819.2783 255.626 2819.2783 633.626 c
2819.2783 881.9209 2756.7676 1173.7964 2540.2764 1196.5225 c
2514.4883 1199.2295 2208.4922 1214.5225 2180.2764 1214.5225 c
1829.2764 1214.5225 1514.2764 1187.5225 1352.2764 1106.5225 c
1207.3789 1034.0732 1073.2764 827.5225 1073.2764 584.5225 c
1073.2764 414.709 1118.2764 260.5225 1244.2764 197.5225 c
1262.2764 188.5225 1262.2764 161.5215 1316.2764 152.5225 c
1354.4922 146.1533 1506.0117 143.5225 1532.2764 143.5225 c
1614.9102 143.5225 1723.6553 152.3232 1845.1973 159.875 C
1845.7754 159.5449 L
1809.7764 237.9023 L
1809.9297 237.3906 L
1757.7256 195.7363 1701.2109 170.5225 1649.2764 170.5225 c
1576.0889 170.5225 1352.4023 164.7686 1289.2764 188.5225 c
1142.8096 243.6367 1091.2764 414.709 1091.2764 584.5225 c
1091.2764 827.5225 1225.3789 1025.0732 1370.2764 1097.5225 c
1532.2764 1178.5225 1829.2764 1196.5225 2180.2764 1196.5225 c
2208.4922 1196.5225 2505.4883 1181.2295 2531.2764 1178.5225 c
2738.8887 1156.7285 2801.2773 872.9209 2801.2773 624.626 c
2801.2773 246.626 2504.2764 -63.4775 2342.2764 -63.4775 c
2369.2764 -63.4775 l
b
1368.2783 1250.0225 m
1260.2783 1250.0225 955.7783 969.5225 955.7783 582.5225 c
955.7783 270.8154 1155.5117 66.8018 1314.2783 44.0225 c
1352.6289 38.5195 1504.0137 35.0225 1530.2783 35.0225 c
1675.0176 35.0225 1998.8633 62.0225 2232.2783 62.0225 c
2475.2783 62.0225 2673.2783 372.0098 2673.2783 611.0225 c
2673.2783 853.0215 2544.9336 1012.7422 2403.2783 1052.0225 c
2339.4746 1069.7148 2209.9707 1061.0225 2151.2783 1061.0225 c
1970.6836 1061.0225 1854.2783 935.0225 1854.2783 611.0225 c
1854.2783 422.0225 1683.2783 323.0225 1494.2783 323.0225 c
1332.2783 323.0225 1305.2783 476.0225 1305.2783 584.0225 c
1305.2783 692.0225 1305.2783 800.0225 1386.2783 800.0225 c
1440.2783 800.0225 1440.5156 773.2539 1494.2783 773.0225 C
1495.2773 772.791 L
1548.041 772.791 l
1548.0449 772.791 l
1607.6924 772.791 1656.0449 724.4395 1656.0449 664.791 c
1656.0449 502.791 l
1656.0449 443.1436 1607.6924 394.791 1548.0449 394.791 c
1490.7773 394.791 L
1494.2783 395.0225 L
1548.041 395.2539 1575.2783 368.0225 1629.2783 368.0225 c
1683.2783 368.0225 1701.2783 422.0225 1701.2783 557.0225 c
1701.2783 746.0225 1710.2783 872.0225 1494.2783 872.0225 c
1359.2783 872.0225 1269.2783 818.0225 1269.2783 575.0225 c
1269.2783 464.9238 1269.3086 341.1045 1341.2783 314.0225 c
1404.4033 290.2686 1466.0908 296.0225 1539.2783 296.0225 c
1694.3828 296.0225 1872.2275 394.9063 1872.2275 611.0225 C
1872.2783 611.0225 L
1872.2783 935.0225 1988.6836 1043.0225 2169.2783 1043.0225 c
2227.9707 1043.0225 2330.4746 1051.7148 2394.2783 1034.0225 c
2535.9336 994.7422 2655.2783 853.0215 2655.2783 611.0225 c
2655.2783 372.0098 2475.2783 80.0225 2232.2783 80.0225 c
1998.8633 80.0225 1675.0176 53.0225 1530.2783 53.0225 c
1504.0137 53.0225 1352.6289 56.5195 1314.2783 62.0225 c
1155.5117 84.8027 972.2783 272.3154 972.2783 584.0225 c
972.2783 971.0225 1287.2783 1250.0225 1395.2783 1250.0225 c
B
0 0 0 1 k
5 w
774 684 m
774 549 l
B
756 567 m
774 513 l
792 567 l
S
0 O
0 0 0 1 k
2988 684 m
2988 549 l
B
2970 567 m
2988 513 l
3006 567 l
S
0 To
1 0 0 1 1683 -189 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 72 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(\(aBAb\)) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1926 -189 0 Tp
TP
0 Tr
(a) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2007 -189 0 Tp
TP
0 Tr
(\(bABa\)) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2223 -153 0 Tp
TP
2 Tr
0 R
0 0 0 1 K
/_Helvetica 60 Tf
(n) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1899 -153 0 Tp
TP
2 Tr
(n) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1962 -153 0 Tp
TP
2 Tr
(p) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 810 589.4219 0 Tp
TP
0 Tr
/_Helvetica 72 Tf
(a) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2925 589.4219 0 Tp
TP
0 Tr
(b) Tx 1 0 Tk
(\r) TX 
TO
0 0 0 0.17 k
4679.1621 -55 m
4595.2441 -55 4519.3281 -39.5684 4452.71 -10 c
4254.9766 77.7617 4101.71 290.0625 4101.71 593 c
4101.71 881 4043.71 1037 3939.71 1133 c
3887.71 1181 3775.709 1259 3705.71 1259 c
3678.71 1259 l
3748.709 1259 3869.71 1181 3921.71 1133 c
4025.71 1037 4083.71 881 4083.71 593 C
4085.1621 593 L
4085.1621 290.0625 4227.9766 77.7617 4425.71 -10 C
4424.2578 -10 L
4490.875 -39.5684 4566.791 -55 4650.71 -55 c
4679.1621 -55 l
f
4590.2822 404.9995 m
4536.0488 405.2319 4536.2822 387 4482.2822 387 c
4401.2822 387 4383.2822 513 4383.2822 567 c
4383.2822 621 4374.2822 873 4590.2822 873 c
4779.2822 873 4815.2822 756 4815.2822 621 c
4815.2822 431.9995 4779.2822 324 4590.2822 324 c
4404.2773 324 4176.2822 408.9937 4176.2822 594 c
4176.2822 882 4118.2822 1038 4014.2822 1134 c
3962.2822 1182 3886.2813 1260 3816.2822 1260 c
3789.2822 1260 l
3859.2813 1260 3944.2822 1182 3996.2822 1134 c
4100.2822 1038 4158.2822 882 4158.2822 594 C
4159.7344 594 L
4159.7344 291.0625 4338.5488 78.7617 4536.2822 -9 C
4533.8545 -8.5 L
4650.8545 -89.5 4851.2822 352.6406 4851.2822 567 c
4851.2822 864 4769.1504 909 4590.2822 909 c
4411.4141 909 4347.2822 783 4347.2822 594 c
4347.2822 404.9995 4374.2822 360 4590.2822 360 c
4752.2822 360 4779.2822 458.9995 4779.2822 621 c
4779.2822 702 4761.2822 810 4680.2822 810 c
4626.2822 810 4644.0488 782.7686 4590.2822 783 C
4644.2822 783 l
4644.2822 783 l
4703.9307 783 4752.2822 734.6484 4752.2822 675 c
4752.2822 513 l
4752.2822 453.353 4703.9248 404.9995 4644.2822 404.9995 c
4590.2822 404.9995 L
f
4346.3301 -12.166 m
4412.9473 -41.7344 4488.8633 -57.166 4572.7822 -57.166 c
4544.3301 -57.166 l
4460.4121 -57.166 4384.4961 -41.7344 4317.8779 -12.166 C
4311.7822 -12.166 L
4308.7236 -10.3828 4305.6582 -8.7363 4302.5869 -7.2188 c
4308.7813 6.5371 l
4320.9453 -0.2188 4333.4639 -6.457 4346.3301 -12.166 c
F
0 0 0 0.3 k
3891.1963 353.9629 m
3972.2402 364.9629 3998.8164 402.8062 4007.5303 476.6479 c
4035.5205 480.5815 l
4059.2725 255.1641 4155.8047 91.8066 4307.2236 8.4063 c
4300.9141 -5.2148 l
4226.123 32.6504 4148.085 -7.6895 4096.374 -34.5586 c
3891.1963 353.9629 l
f
0 R
0 0 0 1 K
3 w
4966.2822 1259 m
4966.4375 1259 4966.127 1259 4966.2822 1259 c
5085.5762 1259 5200.2822 1144.2939 5200.2822 1025 c
5200.2822 161 l
5200.2822 41.707 5085.5762 -55 4966.2822 -55 c
3454.2822 -55 l
3334.9883 -55 3238.2822 41.707 3238.2822 161 c
3238.2822 1025 l
3238.2822 1144.1387 3335.2021 1258.748 3454.2822 1259 c
4966.2822 1259 l
s
3778.0488 403.769 m
3718.4023 403.769 3670.0488 452.1206 3670.0488 511.7686 c
3670.0537 673.7686 l
3670.0537 733.417 3718.4053 781.7686 3778.0488 781.7686 c
3886.0449 781.7686 l
3886.0488 781.7686 l
3945.6963 781.7686 3994.0488 733.417 3994.0488 673.7686 c
3994.0488 511.7686 l
3994.0488 452.1206 3945.6963 403.769 3886.0488 403.769 c
3778.0488 403.769 l
s
4534.0488 403.769 m
4474.4004 403.769 4426.0488 452.1206 4426.0488 511.7686 c
4426.0488 673.7686 l
4426.0488 733.417 4474.4004 781.7686 4534.0488 781.7686 c
4642.0488 781.7686 l
4642.0488 781.7686 l
4701.6973 781.7686 4750.0488 733.417 4750.0488 673.7686 c
4750.0488 511.7686 l
4750.0488 452.1206 4701.6914 403.769 4642.0488 403.769 c
4534.0488 403.769 l
s
1 w
4426.0488 592.7686 m
4426.0488 533.1211 4329.3398 484.7686 4210.0488 484.7686 c
4090.7559 484.7686 3994.0488 533.1211 3994.0488 592.7686 c
S
[6 8 ]0 d
3994.0488 592.7686 m
3994.0488 652.417 4090.7559 700.7686 4210.0488 700.7686 c
4329.3398 700.7686 4426.0488 652.417 4426.0488 592.7686 c
S
[]0 d
3670.0488 592.7695 m
3670.0488 533.1211 3573.3398 484.7686 3454.0508 484.7686 c
3334.7568 484.7686 3238.0508 533.1211 3238.0508 592.7695 c
S
[6 8 ]0 d
3238.0508 592.7695 m
3238.0508 652.417 3334.7568 700.7686 3454.0508 700.7686 c
3573.3398 700.7686 3670.0488 652.417 3670.0488 592.7695 c
S
[]0 d
5200.2822 593 m
5200.2822 533.3516 5085.3398 484.7686 4966.0488 484.7686 c
4846.7559 484.7686 4750.0488 533.1211 4750.0488 592.7695 c
S
[6 8 ]0 d
4750.0488 592.7695 m
4750.0488 652.417 4846.7559 700.7686 4966.0488 700.7686 c
5085.3398 700.7686 5200.2822 652.6465 5200.2822 593 c
S
2 w []0 d
3679.2822 323 m
3607.2822 350 3607.2822 473.9019 3607.2822 584 c
3607.2822 827 3697.2822 881 3832.2822 881 c
4048.2822 881 4039.2822 755 4039.2822 566 c
4039.2822 430.9995 4021.2822 377 3967.2822 377 c
3913.2822 377 3886.0449 404.2319 3832.2822 403.9995 c
S
4048.2822 -55 m
3881.0918 -55.1094 3886.2822 17 3652.2822 17 c
S
[6 8 ]0 d
4309.2822 -10 m
4201.2822 53 4084.2822 -55 4048.2822 -55 c
S
4588.2822 782 m
4642.0488 781.7686 4624.2822 809 4678.2822 809 c
4759.2822 809 4777.2822 701 4777.2822 620 c
4777.2822 457.9995 4750.2822 359 4588.2822 359 c
4372.2822 359 4345.2822 403.9995 4345.2822 593 c
4345.2822 782 4409.4141 908 4588.2822 908 c
4767.1504 908 4849.2822 863 4849.2822 566 c
4849.2822 351.6406 4649.4492 -90.834 4532.4492 -9.834 c
S
4030.2822 593 m
4030.1074 595.9736 4030.2822 607.9736 4030.2822 611 c
4030.2822 827 3994.2822 863 3832.2822 863 c
3616.2822 863 3625.2822 701 3625.2822 593 c
3625.2822 485 3643.2822 377 3724.2822 377 c
3778.2822 377 3778.5195 403.769 3832.2822 403.9995 c
S
4588.2822 403.9995 m
4534.0488 404.2319 4534.2822 386 4480.2822 386 c
4399.2822 386 4381.2822 512 4381.2822 566 c
4381.2822 620 4372.2822 872 4588.2822 872 c
4777.2822 872 4813.2822 755 4813.2822 620 c
4813.2822 430.9995 4777.2822 323 4588.2822 323 c
4402.2773 323 4185.1035 408.312 4174.2822 593 c
S
[]0 d
4336.333 620 m
4336.333 809 4399.2822 890 4588.2822 890 c
4777.2822 890 4831.2822 809 4831.2822 593 c
4831.2822 457.9995 4813.2822 341 4588.2822 341 c
4426.2822 341 4399.2822 485 4399.2822 620 c
4399.2822 674 4435.2822 809 4489.2822 809 c
4543.2822 809 4534.0488 781.7686 4588.2822 782 c
S
3832.2822 782 m
3778.5195 782.2314 3778.2822 809 3724.2822 809 c
3643.2822 809 3643.2822 701 3643.2822 593 c
3643.2822 485 3670.2822 332 3832.2822 332 c
4021.2822 332 4192.2822 430.9995 4192.2822 620 c
S
[6 8 ]0 d
3886.2822 1133 m
3787.2822 1205 3725.9268 1156.9189 3688.2822 1115 c
3573.4268 987.1016 3589.2822 747.7666 3589.2822 584 c
3589.2822 395 3643.2822 350 3832.2822 350 c
4012.2822 350 4012.2822 421.9995 4012.2822 611 c
4012.2822 746 3994.2822 809 3940.2822 809 c
3886.2822 809 3886.0449 781.7686 3832.2822 782 c
S
4363.2822 1259 m
4269.2598 1259.0615 4120.2822 1052 4030.2822 1133 c
S
[]0 d
4885.2822 1223 m
4633.2822 1223 4492.8936 1258.9141 4363.2822 1259 c
S
4588.2822 403.9995 m
4669.2822 403.9995 4651.2822 377 4705.2822 377 c
4759.2822 377 4795.2822 485 4795.2822 566 c
4795.2822 782 4750.2822 854 4588.2822 854 c
4426.2822 854 4363.2822 782 4363.2822 593 c
4363.2822 403.9995 4426.2822 305 4588.2822 305 c
4750.2822 305 4867.2822 403.9995 4867.2822 620 c
4867.2822 739.1465 4822.2822 908 4678.2822 935 c
S
3 w
3652.2822 125 m
3493.5156 147.7793 3365.7822 279.793 3365.7822 591.5 c
3365.7822 978.5 3706.2822 1259 3814.2822 1259 c
S
4732.2822 1043 m
4873.9375 1003.7197 4993.2822 861.999 4993.2822 620 c
4993.2822 380.9883 4813.2822 89 4570.2822 89 c
4336.8672 89 4013.0215 62 3868.2822 62 c
3842.0176 62 3690.6328 65.498 3652.2822 71 c
S
4246.2822 620 m
4246.2822 944 4344.6875 1016 4525.2822 1016 c
4583.9746 1016 4650.4785 1024.6924 4714.2822 1007 c
S
3679.2822 323 m
3742.4072 299.2461 3804.0947 305 3877.2822 305 c
4032.3867 305 4210.2314 403.8843 4210.2314 620 c
S
3652.2822 161 m
3690.498 154.6309 3842.0176 152 3868.2822 152 c
4013.0215 152 4237.8672 179 4471.2822 179 c
4714.2822 179 4903.2822 349.8887 4903.2822 588.9004 c
4903.2822 830.8994 4804.2822 908 4687.2822 953 c
S
2 w
3580.2822 206 m
3598.2822 197 3598.2822 170 3652.2822 161 c
S
3 w
4876.2822 1205 m
4850.4941 1207.707 4544.498 1223 4516.2822 1223 c
4165.2822 1223 3850.2822 1196 3688.2822 1115 c
3543.3848 1042.5508 3409.2822 836 3409.2822 593 c
3409.2822 423.187 3454.2822 269 3580.2822 206 c
S
4543.2822 -55 m
4705.2822 -55 5047.2822 242 5047.2822 620 c
5047.2822 916.2939 4966.2822 1079 4822.2822 1097 c
S
[6 8 ]0 d
4343.8301 -10 m
4410.4473 -39.5684 4486.3633 -55 4570.2822 -55 c
S
4121.7344 593 m
4121.7344 290.0625 4282.5488 77.7617 4480.2822 -10 c
S
3994.2822 1133 m
4098.2822 1037 4156.2822 881 4156.2822 593 c
S
3760.2822 1259 m
3830.2813 1259 3924.2822 1181 3976.2822 1133 c
S
[]0 d
4570.2822 -55 m
4732.2822 -55 5065.2822 242 5065.2822 620 c
5065.2822 916.2939 4984.2822 1106 4831.2822 1115 c
S
4597.2822 -55 m
4759.2822 -55 5083.2832 251 5083.2832 629 c
5083.2832 925.2939 5020.2822 1106 4840.2822 1133 c
S
4624.2822 -55 m
4786.2822 -55 5101.2832 251 5101.2832 629 c
5101.2832 925.2939 5038.2822 1133 4849.2822 1151 c
S
4651.2822 -55 m
4813.2822 -55 5119.2832 255.1035 5119.2832 633.1035 c
5119.2832 881.3984 5056.2822 1142 4858.2822 1169 c
S
4678.2822 -55 m
4840.2822 -55 5137.2832 255.1035 5137.2832 633.1035 c
5137.2832 881.3984 5074.2822 1160 4867.2822 1187 c
S
4705.2822 -55 m
4867.2822 -55 5155.2842 264.1035 5155.2842 642.1035 c
5155.2842 890.3984 5092.2822 1178 4876.2822 1205 c
S
4732.2822 -55 m
4894.2822 -55 5173.2842 264.1035 5173.2842 642.1035 c
5173.2842 890.3984 5110.2822 1196 4885.2822 1223 c
S
4723.2822 1025 m
4864.9375 985.7197 4975.2822 852.999 4975.2822 611 c
4975.2822 371.9883 4804.2822 107 4561.2822 107 c
4327.8672 107 4013.0215 80 3868.2822 80 c
3842.0176 80 3690.6328 83.498 3652.2822 89 c
S
4750.2822 1079 m
4891.9375 1039.7197 5029.2822 870.999 5029.2822 629 c
5029.2822 389.9883 4840.2822 53 4597.2822 53 c
4363.8672 53 4022.0215 26 3877.2822 26 c
3851.0176 26 3690.6328 29.498 3652.2822 35 c
S
4741.2822 1061 m
4882.9375 1021.7197 5011.2822 861.999 5011.2822 620 c
5011.2822 380.9883 4813.2822 71 4570.2822 71 c
4336.8672 71 4013.0215 44 3868.2822 44 c
3842.0176 44 3690.6328 47.498 3652.2822 53 c
S
4696.2822 971 m
4837.9375 931.7197 4921.2822 839.8994 4921.2822 597.9004 c
4921.2822 358.8887 4732.2822 161 4489.2822 161 c
4255.8672 161 4013.0215 134 3868.2822 134 c
3842.0176 134 3690.6328 137.498 3652.2822 143 c
S
4714.2822 1007 m
4855.9375 967.7197 4957.2822 848.8994 4957.2822 606.9004 c
4957.2822 367.8887 4777.2822 125 4534.2822 125 c
4300.8672 125 4013.0215 98 3868.2822 98 c
3842.0176 98 3690.6328 101.498 3652.2822 107 c
S
4705.2822 989 m
4846.9375 949.7197 4939.2822 839.8994 4939.2822 597.9004 c
4939.2822 358.8887 4750.2822 138.9004 4507.2822 138.9004 c
4273.8672 138.9004 4013.0215 116 3868.2822 116 c
3842.0176 116 3690.6328 119.498 3652.2822 125 c
S
3652.2822 143 m
3493.5156 165.7813 3382.2822 281.293 3382.2822 593 c
3382.2822 980 3733.2822 1259 3841.2822 1259 c
S
3652.2822 89 m
3493.5156 111.7813 3329.7822 279.793 3329.7822 591.5 c
3329.7822 978.5 3652.2822 1259 3760.2822 1259 c
S
3652.2822 107 m
3493.5156 129.7813 3346.2822 281.293 3346.2822 593 c
3346.2822 980 3679.2822 1259 3787.2822 1259 c
S
3652.2822 53 m
3493.5156 75.7793 3293.7822 279.793 3293.7822 591.5 c
3293.7822 978.5 3598.2822 1259 3706.2822 1259 c
S
3652.2822 71 m
3493.5156 93.7813 3310.2822 281.293 3310.2822 593 c
3310.2822 980 3625.2822 1259 3733.2822 1259 c
S
3652.2822 17 m
3499.2822 17 3257.7822 279.793 3257.7822 591.5 c
3257.7822 978.5 3544.2822 1259 3652.2822 1259 c
S
3652.2822 35 m
3493.5156 57.7813 3274.2822 281.293 3274.2822 593 c
3274.2822 980 3571.2822 1259 3679.2822 1259 c
S
4867.2822 1187 m
4841.4941 1189.707 4544.498 1205 4516.2822 1205 c
4165.2822 1205 3868.2822 1187 3706.2822 1106 c
3561.3848 1033.5508 3427.2822 836 3427.2822 593 c
3427.2822 423.187 3478.8154 252.1152 3625.2822 197 c
S
4858.2822 1169 m
4832.4941 1171.707 4544.498 1187 4516.2822 1187 c
4165.2822 1187 3868.2822 1169 3724.2822 1097 c
3579.3848 1024.5508 3445.2822 836 3445.2822 593 c
3445.2822 423.187 3490.2822 269 3625.2822 215 c
S
4849.2822 1151 m
4823.4941 1153.707 4544.498 1169 4516.2822 1169 c
4165.2822 1169 3886.2822 1160 3742.2822 1088 c
3597.3848 1015.5508 3463.2822 836 3463.2822 593 c
3463.2822 423.187 3499.2822 287 3625.2822 233 c
S
4840.2822 1133 m
4814.4941 1135.707 4544.498 1151 4516.2822 1151 c
4165.2822 1151 3904.2822 1151 3760.2822 1079 c
3615.3848 1006.5508 3481.2822 836 3481.2822 593 c
3481.2822 423.187 3517.2822 296 3625.2822 251 c
S
4831.2822 1115 m
4805.4941 1117.707 4544.498 1133 4516.2822 1133 c
4165.2822 1133 3922.2822 1133 3778.2822 1070 c
3629.8652 1005.0674 3499.2822 836 3499.2822 593 c
3499.2822 423.187 3526.2822 314 3625.2822 269 c
S
4822.2822 1097 m
4796.4941 1099.707 4544.498 1115 4516.2822 1115 c
4165.2822 1115 3940.2822 1124 3796.2822 1061 c
3647.8652 996.0674 3517.2822 836 3517.2822 593 c
3517.2822 423.187 3544.2822 332 3625.2822 287 c
S
4750.2822 1079 m
4669.2822 1097 4544.498 1097 4516.2822 1097 c
4165.2822 1097 3958.2822 1115 3814.2822 1052 c
3665.8652 987.0674 3535.2822 836 3535.2822 593 c
3535.2822 423.187 3571.2822 332 3625.2822 305 c
S
3625.2822 305 m
3688.4082 281.2461 3822.0947 287 3895.2822 287 c
4050.3867 287 4228.2314 403.8843 4228.2314 620 c
S
3625.2822 287 m
3688.4082 263.2461 3849.0947 269 3922.2822 269 c
4077.3867 269 4246.2822 403.8843 4246.2822 620 c
S
3625.2822 269 m
3688.4082 245.2461 3867.0947 251 3940.2822 251 c
4095.3867 251 4264.2822 403.8843 4264.2822 620 c
S
3625.2822 251 m
3688.4082 227.2461 3885.0947 233 3958.2822 233 c
4113.3867 233 4282.2822 403.8843 4282.2822 620 c
S
3625.2822 233 m
3688.4082 209.2461 3894.0947 215 3967.2822 215 c
4122.3867 215 4300.2822 403.8843 4300.2822 620 c
S
3625.2822 215 m
3688.4082 191.2461 3903.0947 197 3976.2822 197 c
4131.3867 197 4318.333 403.8843 4318.333 620 c
S
3625.2822 197 m
3688.4082 173.2461 3912.0947 179 3985.2822 179 c
4140.3867 179 4336.333 403.8843 4336.333 620 c
S
4228.2822 620 m
4228.2822 944 4335.6875 1034 4516.2822 1034 c
4574.9746 1034 4659.4785 1042.6924 4723.2822 1025 c
S
4210.2822 620 m
4210.2822 944 4326.6875 1052 4507.2822 1052 c
4565.9746 1052 4668.4785 1060.6924 4732.2822 1043 c
S
4192.2822 620 m
4192.2822 944 4308.6875 1070 4489.2822 1070 c
4547.9746 1070 4677.4785 1078.6924 4741.2822 1061 c
S
4318.2822 620 m
4318.2822 944 4389.6875 944 4570.2822 944 c
4628.9746 944 4642.2822 944 4678.2822 935 c
S
4300.2822 620 m
4300.2822 944 4380.6875 962 4561.2822 962 c
4619.9746 962 4651.2822 962 4687.2822 953 c
S
4282.2822 620 m
4282.2822 944 4371.6875 980 4552.2822 980 c
4610.9746 980 4660.2822 980 4696.2822 971 c
S
4264.2822 620 m
4264.2822 944 4353.6875 998 4534.2822 998 c
4592.9746 998 4669.2822 998 4705.2822 989 c
S
[6 8 ]0 d
3787.2822 1259 m
3857.2813 1259 3942.2822 1181 3994.2822 1133 c
S
3814.2822 1259 m
3884.2813 1259 3960.2822 1181 4012.2822 1133 c
S
3841.2822 1259 m
3911.2813 1259 3978.2822 1181 4030.2822 1133 c
S
3652.2822 1259 m
3722.2813 1259 3852.2822 1181 3904.2822 1133 c
S
3679.2822 1259 m
3749.2813 1259 3870.2822 1181 3922.2822 1133 c
S
3706.2822 1259 m
3776.2813 1259 3888.2822 1181 3940.2822 1133 c
S
3733.2822 1259 m
3803.2813 1259 3906.2822 1181 3958.2822 1133 c
S
4012.2822 1133 m
4116.2822 1037 4174.2822 881 4174.2822 593 c
S
3958.2822 1133 m
4062.2822 1037 4120.2822 881 4120.2822 593 c
S
3976.2822 1133 m
4080.2822 1037 4138.2822 881 4138.2822 593 c
S
3922.2822 1133 m
4026.2822 1037 4084.2822 881 4084.2822 593 c
S
3940.2822 1133 m
4044.2822 1037 4102.2822 881 4102.2822 593 c
S
3886.2822 1133 m
3990.2822 1037 4048.2822 881 4048.2822 593 c
S
3904.2822 1133 m
4008.2822 1037 4066.2822 881 4066.2822 593 c
S
4102.2822 593 m
4102.2822 290.0625 4255.5488 77.7617 4453.2822 -10 c
S
4157.7344 593 m
4157.7344 290.0625 4336.5488 77.7617 4534.2822 -10 c
S
4138.2822 593 m
4138.2822 290.0625 4309.5488 77.7617 4507.2822 -10 c
S
4049.7344 593 m
4049.7344 290.0625 4174.5488 77.7617 4372.2822 -10 c
S
4030.2822 593 m
4030.2822 290.0625 4146.0967 77.7617 4343.8301 -10 c
S
4085.7344 593 m
4085.7344 290.0625 4228.5488 77.7617 4426.2822 -10 c
S
4066.2822 593 m
4066.2822 290.0625 4201.5488 77.7617 4399.2822 -10 c
S
4315.3779 -10 m
4381.9961 -39.5684 4457.9121 -55 4541.8301 -55 c
S
4399.2822 -10 m
4465.9004 -39.5684 4541.8164 -55 4625.7344 -55 c
S
4370.8301 -10 m
4437.4473 -39.5684 4513.3633 -55 4597.2822 -55 c
S
4453.2822 -10 m
4519.9004 -39.5684 4595.8164 -55 4679.7344 -55 c
S
4424.8301 -10 m
4491.4473 -39.5684 4567.3633 -55 4651.2822 -55 c
S
4508.7344 -10 m
4575.3516 -39.5684 4651.2676 -55 4735.1865 -55 c
S
4480.2822 -10 m
4546.9004 -39.5684 4622.8164 -55 4706.7344 -55 c
S
0 O
0 0 0 0.71 k
1 w []0 d
4543.9492 -54.332 m
4550.8105 -54.332 4557.9961 -53.8008 4565.4639 -52.75 c
4734.3076 -29.0273 5047.9492 258.6777 5047.9492 620.667 c
5047.9492 916.9609 4967.2754 1082.5137 4822.9492 1097.667 c
4797.1611 1100.374 4545.165 1115.667 4516.9492 1115.667 c
4165.9492 1115.667 3940.9492 1124.667 3796.9492 1061.667 c
3648.5313 996.7344 3517.9492 836.667 3517.9492 593.667 c
3517.9492 423.853 3539.2246 320.3008 3625.9492 287.668 c
3689.0742 263.9141 3849.7617 269.668 3922.9492 269.668 c
4078.0537 269.668 4246.9492 404.5503 4246.9492 620.667 c
4246.9492 944.667 4345.3535 1016.667 4525.9492 1016.667 c
4584.6416 1016.667 4651.1445 1025.3594 4714.9492 1007.667 c
4856.6035 968.3867 4957.9492 849.5664 4957.9492 607.5674 c
4957.9492 368.5547 4777.9492 125.668 4534.9492 125.668 c
4301.5332 125.668 4013.6885 98.668 3868.9492 98.668 c
3842.6836 98.668 3691.2988 102.166 3652.9492 107.668 c
3494.1816 130.4453 3346.9492 281.9609 3346.9492 593.667 c
3346.9492 980.667 3679.9492 1259.667 3787.9492 1259.667 c
3814.9492 1259.667 l
3706.9492 1259.667 3366.4492 979.167 3366.4492 592.167 c
3366.4492 280.4609 3494.1816 148.4453 3652.9492 125.668 c
3691.2988 120.166 3842.6836 116.668 3868.9492 116.668 c
4013.6885 116.668 4274.5332 139.5684 4507.9492 139.5684 c
4750.9492 139.5684 4939.9492 359.5547 4939.9492 598.5674 c
4939.9492 840.5664 4848.5596 954.0137 4705.9492 989.667 c
4669.9492 998.667 4593.6406 998.667 4534.9492 998.667 c
4354.3535 998.667 4264.9492 944.667 4264.9492 620.667 c
4264.9492 404.5503 4096.0537 251.668 3940.9492 251.668 c
3867.7617 251.668 3689.0742 245.9141 3625.9492 269.668 c
3524.1689 307.9668 3499.9492 423.853 3499.9492 593.667 c
3499.9492 836.667 3630.5313 1005.7344 3778.9492 1070.667 c
3922.9492 1133.667 4165.9492 1133.667 4516.9492 1133.667 c
4545.165 1133.667 4806.1611 1118.374 4831.9492 1115.667 c
4984.375 1099.6631 5065.9492 916.9609 5065.9492 620.667 c
5065.9492 242.668 4732.9492 -54.332 4570.9492 -54.332 c
B
4678.2822 -55 m
4840.2822 -55 5137.2832 255.1035 5137.2832 633.1035 c
5137.2832 881.3984 5074.8945 1165.2021 4867.2822 1187 c
4841.4941 1189.707 4544.498 1205 4516.2822 1205 c
4165.2822 1205 3868.2822 1187 3706.2822 1106 c
3561.3848 1033.5508 3427.2822 836 3427.2822 593 c
3427.2822 423.187 3478.8154 252.1152 3625.2822 197 c
3688.4082 173.2461 3912.0947 179 3985.2822 179 c
4140.3867 179 4336.333 403.8843 4336.333 620 c
4336.333 809 4399.2822 890 4588.2822 890 c
4777.2822 890 4831.2822 809 4831.2822 593 c
4831.2822 457.9995 4813.2822 341 4588.2822 341 c
4426.2822 341 4399.2822 485 4399.2822 620 c
4399.2822 674 4435.2822 809 4489.2822 809 c
4543.2822 809 4534.0488 781.7686 4588.2822 782 C
4588.2842 782 L
4642.2842 782 l
4642.2842 782 l
4701.9326 782 4750.2842 733.6484 4750.2842 674 c
4750.2842 512 l
4750.2842 452.353 4701.9268 403.9995 4642.2842 403.9995 c
4588.2842 403.9995 L
4588.2822 403.9995 L
4669.2822 403.9995 4651.2822 377 4705.2822 377 c
4759.2822 377 4795.2822 485 4795.2822 566 c
4795.2822 782 4750.2822 854 4588.2822 854 c
4426.2822 854 4363.2822 782 4363.2822 593 c
4363.2822 403.9995 4426.2822 305 4588.2822 305 c
4750.2822 305 4867.2822 403.9995 4867.2822 620 c
4867.2822 739.1465 4822.2822 908 4678.2822 935 c
4641.8105 941.8389 4628.9746 944 4570.2822 944 c
4389.6875 944 4318.2822 944 4318.2822 620 C
4318.333 620 L
4318.333 403.8843 4131.3867 197 3976.2822 197 c
3903.0947 197 3688.4082 191.2461 3625.2822 215 c
3489.1992 266.209 3445.2822 423.187 3445.2822 593 c
3445.2822 836 3579.3848 1024.5508 3724.2822 1097 c
3868.2822 1169 4165.2822 1187 4516.2822 1187 c
4544.498 1187 4832.4941 1171.707 4858.2822 1169 c
5057.0225 1148.1338 5119.2832 881.3984 5119.2832 633.1035 c
5119.2832 255.1035 4813.2822 -55 4651.2822 -55 c
4678.2822 -55 l
b
3706.4492 1258.166 m
3598.4492 1258.166 3293.9492 977.666 3293.9492 590.666 c
3293.9492 278.9609 3493.6816 74.9434 3652.4492 52.166 c
3690.7988 46.6641 3842.1836 43.166 3868.4492 43.166 c
4013.1885 43.166 4337.0332 70.166 4570.4492 70.166 c
4813.4492 70.166 5011.4492 380.1543 5011.4492 619.166 c
5011.4492 861.165 4883.1035 1020.8867 4741.4492 1060.166 c
4677.6445 1077.8584 4548.1406 1069.166 4489.4492 1069.166 c
4457.0918 1069.166 4426.7949 1065.1216 4398.8594 1056.6182 c
4396.6973 1096.7681 l
4434.6523 1096.4229 4474.5234 1096.166 4516.4492 1096.166 c
4544.665 1096.166 4669.4492 1096.166 4750.4492 1078.166 c
4893.9482 1046.2773 5029.4492 870.165 5029.4492 628.166 c
5029.4492 389.1543 4840.4492 52.166 4597.4492 52.166 c
4364.0332 52.166 4022.1885 25.166 3877.4492 25.166 c
3851.1836 25.166 3690.7988 28.6641 3652.4492 34.166 c
3493.6816 56.9434 3274.4492 280.459 3274.4492 592.166 c
3274.4492 979.166 3571.4492 1258.166 3679.4492 1258.166 c
3706.4492 1258.166 l
b
0 0 0 0.3 k
4195.9219 713.7891 m
4212.7549 918.1182 4287.0537 1023.8047 4399.376 1057.6582 c
4397.2822 1097.5947 l
4117.0449 1100.1309 3941.1953 1107.5244 3814.2822 1052 c
3753.5752 1025.4404 3695.8525 984.4707 3648.8291 928.6934 c
3714.2285 858.1426 l
3747.5059 875.0332 3787.4082 881 3832.2822 881 c
3984.2529 881 4024.8467 818.6289 4035.5596 715.8281 c
4195.9219 713.7891 l
f
0 To
1 0 0 1 3168 584.2246 0 Tp
TP
0 Tr
0 0 0 1 k
(a) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
5 w
3132 683.2246 m
3132 548.2246 l
B
3114 566.2246 m
3132 512.2246 l
3150 566.2246 l
S
0 O
0 0 0 1 k
5292 692.2246 m
5292 557.2246 l
B
5274 575.2246 m
5292 521.2246 l
5310 575.2246 l
S
0 To
1 0 0 1 5229 584.2246 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
(b) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 4590 -162 0 Tp
TP
0 Tr
/_Helvetica 60 Tf
(n) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 4248 -162 0 Tp
TP
0 Tr
(n) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 4329 -162 0 Tp
TP
0 Tr
(q) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 4023 -198 0 Tp
TP
0 Tr
/_Helvetica 72 Tf
(\(bABa\)  b  \(aBAb\)) Tx 1 0 Tk
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1322 2620 a(Figure)f(12)100 2778 y(In)g(the)h(example)g
(of)f(Figure)g(6\(a\),)g(for)g(example,)h(w)n(e)f(\014nd)h(that)0
2908 y Fl(K)71 2920 y Fi(n)143 2908 y Fp(=)g([)p Fl(A)321
2878 y Fi(p)359 2908 y Fp(][)p Fl(A)p Fp(\()p Fl(B)t(abA)p
Fp(\))740 2878 y Fi(n)786 2908 y Fp(\()p Fl(baB)t(A)p
Fp(\))1059 2878 y Fi(n)1105 2908 y Fp(][\()p Fl(bAB)t(a)p
Fp(\))1424 2878 y Fi(n)1470 2908 y Fl(b)1506 2878 y Fi(q)r
Fj(+1)1626 2908 y Fp(\()p Fl(aB)t(Ab)p Fp(\))1899 2878
y Fi(n)1945 2908 y Fp(][)p Fl(a)2035 2878 y Fi(p)2073
2908 y Fp(][)p Fl(a)p Fp(\()p Fl(bAB)t(a)p Fp(\))2436
2878 y Fi(n)2482 2908 y Fp(\()p Fl(B)t(Aba)p Fp(\))2755
2878 y Fi(n)2801 2908 y Fp(])700 3011 y([\()p Fl(B)t(abA)p
Fp(\))996 2981 y Fi(n)1041 3011 y Fl(B)1108 2981 y Fi(q)r
Fj(+1)1229 3011 y Fp(\()p Fl(AbaB)t Fp(\))1502 2981 y
Fi(n)1548 3011 y Fp(])0 3117 y(=)f Fl(\025)p 140 3071
51 4 v(\026)q(\027)p 237 3049 49 4 v 5 w(\025\026)p 335
3071 47 4 v(\027)0 3219 y Fp(and)0 3322 y Fl(K)71 3334
y Fi(n)143 3322 y Fp(=)h([\()p Fl(AbaB)t Fp(\))532 3292
y Fi(n)577 3322 y Fl(A)639 3292 y Fi(p)p Fj(+1)762 3322
y Fp(\()p Fl(B)t(abA)p Fp(\))1035 3292 y Fi(n)1081 3322
y Fp(][\()p Fl(baB)t(A)p Fp(\))1400 3292 y Fi(n)1446
3322 y Fp(\()p Fl(bAB)t(a)p Fp(\))1719 3292 y Fi(n)1764
3322 y Fl(b)p Fp(][)p Fl(b)1882 3292 y Fi(q)1918 3322
y Fp(][\()p Fl(aB)t(Ab)p Fp(\))2237 3292 y Fi(n)2283
3322 y Fl(a)2327 3292 y Fi(p)p Fj(+1)2449 3322 y Fp(\()p
Fl(bAB)t(a)p Fp(\))2722 3292 y Fi(n)2768 3322 y Fp(])700
3424 y([\()p Fl(B)t(Aba)p Fp(\))996 3394 y Fi(n)1041
3424 y Fp(\()p Fl(B)t(abA)p Fp(\))1314 3394 y Fi(n)1360
3424 y Fl(B)t Fp(][)p Fl(B)1540 3394 y Fi(q)1577 3424
y Fp(])0 3530 y(=)f Fl(\025)p 140 3484 51 4 v(\026)q(\027)p
237 3463 49 4 v 5 w(\025\026)p 335 3484 47 4 v(\027)0
3660 y Fp(represen)n(ting)f(the)i(t)n(w)n(o)f(di\013eren)n(t)h(viewp)r
(oin)n(ts)f(of)g Fl(K)1675 3672 y Fi(n)1748 3660 y Fp(as)g
Fl(@)5 b(T)1948 3672 y Fi(i)1975 3660 y Fp(.)100 3763
y(As)27 b(further)h(examples,)f(the)h(reader)e(can)h(v)n(erify)g(that)h
(in)g(Figure)f(3)g(w)n(e)g(ha)n(v)n(e)100 3865 y Fl(K)171
3877 y Fi(n)243 3865 y Fp(=)g([)p Fl(A)420 3835 y Fi(p)p
Fj(+1)543 3865 y Fp(][)p Fl(b)p Fp(][\()p Fl(aB)t(Ab)p
Fp(\))944 3835 y Fi(n)990 3865 y Fl(b)1026 3835 y Fi(q)1062
3865 y Fp(\()p Fl(bAB)t(a)p Fp(\))1335 3835 y Fi(n)1381
3865 y Fp(][)p Fl(a)1471 3835 y Fi(p)p Fj(+1)1593 3865
y Fp(][)p Fl(B)t Fp(][\()p Fl(AbaB)t Fp(\))2025 3835
y Fi(n)2071 3865 y Fl(B)2138 3835 y Fi(q)2175 3865 y
Fp(\()p Fl(B)t(abA)p Fp(\))2448 3835 y Fi(n)2494 3865
y Fp(])220 3967 y(so)g Fl(\025)c Fp(=)g Fl(A)543 3937
y Fi(p)p Fj(+1)665 3967 y Fp(,)28 b Fl(\026)23 b Fp(=)g
Fl(B)t Fp(,)28 b(and)f Fl(\027)i Fp(=)22 b(\()p Fl(aB)t(Ab)p
Fp(\))1586 3937 y Fi(n)1632 3967 y Fl(b)1668 3937 y Fi(q)1704
3967 y Fp(\()p Fl(bAB)t(a)p Fp(\))1977 3937 y Fi(n)100
4070 y Fl(K)171 4082 y Fi(n)243 4070 y Fp(=)27 b([)p
Fl(a)p Fp(][)p Fl(B)515 4040 y Fi(q)r Fj(+1)636 4070
y Fp(][\()p Fl(B)t(abA)p Fp(\))955 4040 y Fi(n)1001 4070
y Fl(A)1063 4040 y Fi(p)1102 4070 y Fp(\()p Fl(AbaB)t
Fp(\))1375 4040 y Fi(n)1420 4070 y Fp(][)p Fl(A)p Fp(][)p
Fl(b)1610 4040 y Fi(q)r Fj(+1)1731 4070 y Fp(][\()p Fl(bAB)t(a)p
Fp(\))2050 4040 y Fi(n)2096 4070 y Fl(a)2140 4040 y Fi(p)2178
4070 y Fp(\()p Fl(aB)t(Ab)p Fp(\))2451 4040 y Fi(n)2497
4070 y Fp(])220 4172 y(so)g Fl(\025)c Fp(=)g Fl(a)p Fp(,)k
Fl(\026)c Fp(=)g Fl(b)772 4142 y Fi(q)r Fj(+1)892 4172
y Fp(,)28 b(and)g Fl(\027)g Fp(=)23 b(\()p Fl(B)t(abA)p
Fp(\))1535 4142 y Fi(n)1580 4172 y Fl(A)1642 4142 y Fi(p)1681
4172 y Fp(\()p Fl(AbaB)t Fp(\))1954 4142 y Fi(n)100 4330
y Fp(Our)28 b(goal)h(no)n(w)f(is)i(to)f(sho)n(w)g(that)h(none)f(of)g
(the)h(resulting)f(six)g(w)n(ords)g(\(three)g(for)g(eac)n(h)g(of)0
4433 y(the)e Fl(T)191 4445 y Fi(i)218 4433 y Fp(\))g
Fl(\025)p 325 4388 51 4 v(\026)q Fp(,)g Fl(\027)p 472
4366 49 4 v 5 w(\025)p Fp(,)g(or)f Fl(\026)p 721 4388
47 4 v(\027)32 b Fp(are)25 b(prop)r(er)h(p)r(o)n(w)n(ers)f(in)i
Fl(F)12 b Fp(\()p Fl(a;)i(b)p Fp(\).)37 b(T)-7 b(o)26
b(do)g(this)h(w)n(e)f(use)h(the)g(fact)g(that)0 4533
y(the)c(normal)g(form)f(of)h(the)h Fl(n)p Fp(th)f(p)r(o)n(w)n(er)f(of)h
(a)g(\(cyclically)f(reduced\))h(w)n(ord)f Fl(w)k Fp(in)e(a)e(free)h
(group)f(is)0 4633 y(the)28 b(concatenation)e(of)h Fl(n)g
Fp(copies)g(of)g Fl(w)r Fp(.)37 b(This)27 b(is)g(b)r(ecause)g(the)h
(concatenation)e(of)h Fl(w)r Fp('s)h(is,)f(b)n(y)0 4732
y(our)21 b(assumptions,)h(already)f(in)h(normal)f(form)g(and)h
(cyclically)f(reduced,)h(and)g(w)n(ords)f(in)h(a)f(free)0
4832 y(group)29 b(ha)n(v)n(e)h(unique)h(normal)e(form)i([MKS].)f(Con)n
(v)n(ersely)-7 b(,)30 b(if)h Fl(v)j Fp(is)c(cyclically)g(reduced,)h
(and)0 4932 y Fl(v)f Fp(=)c Fl(w)222 4901 y Fi(n)268
4932 y Fp(,)k(then)g(the)g(normal)f(form)g(for)g Fl(w)k
Fp(m)n(ust)c(b)r(e)h(cyclically)f(reduced)g(\(otherwise)g
Fl(w)2820 4901 y Fi(n)2866 4932 y Fp(,)i(in)0 5031 y(normal)c(form,)g
(is)h(not)p 585 5044 120 4 v -1 w(\),)h(and)e(so)g Fl(w)1112
5001 y Fi(n)1186 5031 y Fp(is)g(already)f(in)i(normal)f(form,)g(so)g
Fl(v)k Fp(is)d(a)f(concatenation)p eop
%%Page: 12 12
12 11 bop 0 42 a Fn(12)1152 b(Mark)24 b(Brittenham)0
241 y Fp(of)35 b Fl(w)r Fp('s.)61 b(So)35 b(w)n(e)g(need)h(only)f(sho)n
(w)f(that)i(for)f(eac)n(h)g(of)g(the)h(six)f(w)n(ords)f
Fl(w)2372 253 y Fi(j)2443 241 y Fp(that)h(the)h(ab)r(o)n(v)n(e)0
340 y(pro)r(cess)26 b(creates,)h Fl(w)649 352 y Fi(j)712
340 y Fp(is)g(not)h(a)f(concatenation)g(of)g(a)g(sub)n(w)n(ord)g(of)g
Fl(w)2188 352 y Fi(j)2224 340 y Fp(.)100 440 y(This)e(is)h(where)f(w)n
(e)g(will)h(put)g(the)g(condition)g Fl(p;)14 b(q)26 b
Fm(\025)c Fp(2)k(to)f(further)h(use.)36 b(The)26 b(basic)f(idea)g(is)0
540 y(that)e(there)g(is)g(only)g(one)g(o)r(ccurrence)e(of)i
Fl(a)1330 510 y Fi(p)p Fj(+1)1476 540 y Fp(and)g Fl(b)1669
510 y Fi(q)r Fj(+1)1812 540 y Fp(in)h Fl(K)1976 552 y
Fi(n)2020 540 y Fp(,)g(and)f(therefore)f(at)h(most)g(one)0
639 y(o)r(ccurrence)h(of)h(a)g(high)g(p)r(o)n(w)n(er)f(of)h
Fl(a;)14 b(b;)g(A)25 b Fp(or)f Fl(B)t Fp(,)i(in)g(eac)n(h)e(of)h(the)h
(sub)n(w)n(ords)d Fl(\025)p 2458 594 51 4 v(\026)q Fp(,)i
Fl(\027)p 2603 572 49 4 v 5 w(\025)q Fp(,)h(or)e Fl(\026)p
2850 594 47 4 v(\027)31 b Fp(of)0 739 y Fl(K)71 751 y
Fi(n)116 739 y Fp(.)37 b(Here)27 b(\\high")f(means)h(\\)p
Fm(\025)22 b Fp(2".)36 b(F)-7 b(or)27 b Fl(K)1385 751
y Fi(p;q)1502 739 y Fp(itself,)h(the)g(sub)n(w)n(ords)e
Fl(\025;)14 b(\026;)g(\027)33 b Fp(are)26 b Fl(a;)14
b(A)2757 709 y Fi(p)2796 739 y Fl(;)g(b)2869 709 y Fi(q)r
Fj(+1)0 839 y Fp(resp)r(ectiv)n(ely)-7 b(,)27 b(for)g(one)g(punctured)h
(torus,)f(and)g Fl(a)1586 808 y Fi(p)p Fj(+1)1709 839
y Fl(;)14 b(B)1813 808 y Fi(q)1849 839 y Fl(;)g(b)28
b Fp(for)f(the)h(other)f(\(Figure)g(13a\).)100 938 y(The)c(in)n
(tersections)f(of)i Fl(\015)k Fp(with)c Fl(K)1158 950
y Fi(p;q)1271 938 y Fp(can)f(b)r(e)h(view)n(ed)f(\(from)g(the)h(p)r
(oin)n(t)f(of)h(view)f(of)g(eac)n(h)g(of)0 1038 y(the)29
b Fl(T)193 1050 y Fi(i)220 1038 y Fp(\),)h(in)f(pairs,)f(as)g
(crossings)f(of)i(the)g(strings)f(of)h(rectangles)e(for)h
Fl(T)2255 1050 y Fi(i)2311 1038 y Fp(\(since)h(w)n(e)g(can)f(view)0
1137 y Fl(\015)38 b Fp(as)33 b(missing)h(a)f(pair)g(of)h(\\v)n(ery)e
(thin")h(hexagons)f(in)i Fl(T)1813 1149 y Fi(i)1841 1137
y Fp(\).)55 b(The)34 b(e\013ect)g(then)g(on)g Fl(\025;)14
b(\026;)g(\027)39 b Fp(of)0 1237 y(spinning)28 b Fl(K)404
1249 y Fi(p;q)523 1237 y Fp(around)f Fl(\015)33 b Fp(is)28
b(to)g(app)r(end)h(cyclic)f(conjugates)f(of)h Fl(\015)33
b Fp(and)p 2332 1191 48 4 v 28 w Fl(\015)g Fp(b)r(efore)28
b(and)g(after)0 1337 y(the)h(v)-5 b(alues)28 b(of)h Fl(\025;)14
b(\026;)g(\027)34 b Fp(for)28 b Fl(K)934 1349 y Fi(p;q)1053
1337 y Fp(\(Figure)g(13b\).)40 b(The)29 b(conjugates)e(are)h(not)h
(inserted)f(within)0 1436 y(these)22 b(high)g(p)r(o)n(w)n(ers;)g(this)h
(is)e(b)r(ecause)h Fl(\015)27 b Fp(is)21 b(disjoin)n(t)i(from)e
Fl(\013)i Fp(and)e Fl(\014)t Fp(,)j(and)e(so)f(the)h(high)g(p)r(o)n(w)n
(ers)0 1536 y(in)31 b(the)g(strings)e(of)h(rectangles)f(for)h
Fl(@)5 b(X)i Fp(\()p Fl(F)1345 1548 y Fi(p;q)1456 1536
y Fm(n)20 b Fl(K)1589 1548 y Fi(p;q)1710 1536 y Fp(can)30
b(b)r(e)g(though)n(t)h(of)f(as)g(originating)f(in)0 1636
y(a)d(small)g(neigh)n(b)r(orho)r(o)r(d)f(of)i Fl(\013;)14
b(\014)t Fp(,)27 b(when)g Fl(K)32 b Fp(is)26 b(spun)h(ab)r(out)f(them)h
(to)g(pro)r(duce)f Fl(K)2622 1648 y Fi(p;q)2712 1636
y Fp(.)37 b(Those)0 1735 y(regions)26 b(of)i(the)g(strings)e(of)i
(rectangles)e(are)h(consequen)n(tly)f(also)h(disjoin)n(t)g(from)h
Fl(\015)5 b Fp(.)-6 2524 y @beginspecial 26 @llx 91 @lly
1316 @urx 384 @ury 3600 @rwi @setspecial
%%BeginDocument: d_fig13.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig13.eps)
%%CreationDate: (9/10/2002) (10:25 AM)
%%BoundingBox: 26 91 1316 384
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: Helvetica
%%+ Symbol
%%DocumentNeededFonts: Helvetica
%%+ Symbol
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 18 16 594 778
%AI3_DocumentPreview: Header
%%PageOrigin:18 16
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
 end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_cmykcolor eq
	{
 end
	} if
} def
/setcmykcolor
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
%%IncludeFont: Symbol
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/space
/exclam
/universal
/numbersign
/existential
/percent
/ampersand
/suchthat
/parenleft
/parenright
/asteriskmath
/plus
/comma
/minus
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/congruent
/Alpha
/Beta
/Chi
/Delta
/Epsilon
/Phi
/Gamma
/Eta
/Iota
/theta1
/Kappa
/Lambda
/Mu
/Nu
/Omicron
/Pi
/Theta
/Rho
/Sigma
/Tau
/Upsilon
/sigma1
/Omega
/Xi
/Psi
/Zeta
/bracketleft
/therefore
/bracketright
/perpendicular
/underscore
/radicalex
/alpha
/beta
/chi
/delta
/epsilon
/phi
/gamma
/eta
/iota
/phi1
/kappa
/lambda
/mu
/nu
/omicron
/pi
/theta
/rho
/sigma
/tau
/upsilon
/omega1
/omega
/xi
/psi
/zeta
/braceleft
/bar
/braceright
/similar
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Euro
/Upsilon1
/minute
/lessequal
/fraction
/infinity
/florin
/club
/diamond
/heart
/spade
/arrowboth
/arrowleft
/arrowup
/arrowright
/arrowdown
/degree
/plusminus
/second
/greaterequal
/multiply
/proportional
/partialdiff
/bullet
/divide
/notequal
/equivalence
/approxequal
/ellipsis
/arrowvertex
/arrowhorizex
/carriagereturn
/aleph
/Ifraktur
/Rfraktur
/weierstrass
/circlemultiply
/circleplus
/emptyset
/intersection
/union
/propersuperset
/reflexsuperset
/notsubset
/propersubset
/reflexsubset
/element
/notelement
/angle
/gradient
/registerserif
/copyrightserif
/trademarkserif
/product
/radical
/dotmath
/logicalnot
/logicaland
/logicalor
/arrowdblboth
/arrowdblleft
/arrowdblup
/arrowdblright
/arrowdbldown
/lozenge
/angleleft
/registersans
/copyrightsans
/trademarksans
/summation
/parenlefttp
/parenleftex
/parenleftbt
/bracketlefttp
/bracketleftex
/bracketleftbt
/bracelefttp
/braceleftmid
/braceleftbt
/braceex
/.notdef
/angleright
/integral
/integraltp
/integralex
/integralbt
/parenrighttp
/parenrightex
/parenrightbt
/bracketrighttp
/bracketrightex
/bracketrightbt
/bracerighttp
/bracerightmid
/bracerightbt
/.notdef
/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 O
0 0 0 0.15 k
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
990 153 m
918 198 864 333 864 378 c
828 378 l
828 333.1992 792.3184 204.1504 729.8359 153.6699 c
729.5576 153.4453 729.2793 153.2217 729 153 c
747 126 l
783 162 936 162 972 126 c
F
u
1308.3359 234 m
1277.4727 209.75 L
1251.0488 218.7529 L
1212.7373 275.8574 1188 347.543 1188 378 c
1152 378 l
1152 333 1116 203 1053 153 c
1071 126 l
1088.8516 143.8516 1135.4746 152.8516 1182.335 152.998 C
1227.3359 172.9785 L
1251.2266 191.75 L
1283.1367 200.75 L
1314 225 l
F
1314 153 m
1302.6143 160.1162 1291.6787 169.4824 1281.3359 180.3877 c
1260.2275 182.75 L
1236.3359 163.9785 L
1191.3359 146.75 L
1170 129.9863 l
1188 126 l
1209.3359 142.7637 L
1236.335 149.0098 l
1262.7578 144.75 1284.9199 137.0801 1296 126 c
F
U
0 R
0 0 0 1 K
4 w
828 378 m
828 333 792 203 729 153 c
S
864 378 m
864 333 918 198 990 153 c
S
747 126 m
783 162 936 162 972 126 c
S
0.1098 0.6627 0.9569 0.0196 K
5 w
990 225 m
864 126 l
S
0 To
1 0 0 1 774 324 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 36 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(K) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
3 w
972 297 m
981 297 981 288 990 288 c
999 288 999 297 1008 297 c
1017 297 1017 288 1026 288 c
1035 288 1035 297 1044 297 c
1053 297 1053 297 y
S
4 w
828 378 m
828 333 792 203 729 153 c
S
864 378 m
864 333 918 198 990 153 c
S
747 126 m
783 162 936 162 972 126 c
S
0.1098 0.6627 0.9569 0.0196 K
5 w
990 225 m
864 126 l
S
0 To
1 0 0 1 774 324 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
(K) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
3 w
972 297 m
981 297 981 288 990 288 c
999 288 999 297 1008 297 c
1017 297 1017 288 1026 288 c
1035 288 1035 297 1044 297 c
1053 297 1053 297 y
S
4 w
828 378 m
828 333 792 203 729 153 c
S
864 378 m
864 333 918 198 990 153 c
S
747 126 m
783 162 936 162 972 126 c
S
0.1098 0.6627 0.9569 0.0196 K
5 w
990 225 m
864 126 l
S
0 To
1 0 0 1 960 232.501 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Symbol 36 Tf
(g) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 774 324 0 Tp
TP
0 Tr
/_Helvetica 36 Tf
(K) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
3 w
972 297 m
981 297 981 288 990 288 c
999 288 999 297 1008 297 c
1017 297 1017 288 1026 288 c
1035 288 1035 297 1044 297 c
1053 297 1053 297 y
S
4 w
828 378 m
828 333 792 203 729 153 c
S
864 378 m
864 333 918 198 990 153 c
S
747 126 m
783 162 936 162 972 126 c
S
0 To
1 0 0 1 774 324 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
(K) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
3 w
972 297 m
981 297 981 288 990 288 c
999 288 999 297 1008 297 c
1017 297 1017 288 1026 288 c
1035 288 1035 297 1044 297 c
1053 297 1053 297 y
S
1044 306 m
1071 297 l
1044 288 l
S
4 w
1152 378 m
1152 333 1116 203 1053 153 c
S
5 w
1188 126 m
1209.3359 142.7637 L
1236.335 149.0098 l
1262.7578 144.75 1284.9199 137.0801 1296 126 c
S
0 To
1 0 0 1 1215 333 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
(K) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
5 w
1308.3359 234 m
1277.4727 209.75 L
1251.0488 218.7529 L
1212.7373 275.8574 1188 347.543 1188 378 c
S
1314 225 m
1283.1367 200.75 L
1251.2266 191.75 L
1227.3359 172.9785 L
1182.335 152.998 L
1135.4746 152.8516 1088.8516 143.8516 1071 126 c
S
1170 129.9863 m
1191.3359 146.75 L
1236.3359 163.9785 L
1260.2275 182.75 L
1281.3359 180.3877 l
1291.6787 169.4824 1302.6143 160.1162 1314 153 c
S
0 To
1 0 0 1 1240.667 328 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 24 Tf
(n) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
3 w
846 225 m
845.5 377 l
B
846 225 m
738.5 140 l
B
846 225 m
981 139 l
B
5 w
990 225 m
864 126 l
S
0 O
0 0 0 1 k
1 w
850.333 224.834 m
850.333 222.3486 848.3184 220.334 845.833 220.334 c
843.3477 220.334 841.333 222.3486 841.333 224.834 c
841.333 227.3193 843.3477 229.334 845.833 229.334 c
848.3184 229.334 850.333 227.3193 850.333 224.834 c
f
0 To
1 0 0 1 155.8516 237.5234 0 Tp
TP
0 Tr
/_Symbol 36 Tf
(a) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 442 217 0 Tp
TP
0 Tr
(b) Tx 1 0 Tk
(\r) TX 
TO
0 0 0 0.18 k
171.0903 380.2031 m
171.0903 380.2031 l
91.561 380.0029 27.2524 315.3682 27.4517 235.8408 c
27.6528 156.3125 92.2876 92.0029 171.8149 92.2031 c
171.8149 92.2031 l
306.5923 92.543 L
306.4517 92.9287 L
400.1445 92.9287 462.084 108.2979 500.582 138.2744 c
510.4922 145.9902 518.8496 154.6748 525.7949 164.3135 c
533.875 175.5273 540.6426 188.8828 545.9512 206.4287 c
546.8359 209.3496 551.0918 225.6934 551.5918 228.4287 c
552.1855 231.6797 553.0469 237.0098 552.9512 240.4287 c
551.4512 294.4287 530.4512 317.9287 506.9512 319.4287 c
495.9473 320.1309 493.5605 318.1875 486.0625 315.1611 c
474.957 310.6797 466.8516 303.3799 459.1641 294.7422 c
450.8574 285.4082 443.0371 274.5146 432.4512 263.9287 C
437.209 265.2363 L
443.3086 270.0352 450.998 272.9063 459.3613 272.9277 c
479.2422 272.9785 495.4004 256.9004 495.4512 237.0186 c
495.4551 235.3779 495.3496 233.7627 495.1406 232.1797 C
495.4512 236.9287 L
495.4512 220.165 491.0762 200.7275 479.0879 185.3281 c
474.4668 179.3906 468.7129 174.0527 461.6406 169.7002 c
449.8574 162.4473 434.4141 157.9287 414.4512 157.9287 c
391.4395 157.9287 373.1367 168.5186 357.1328 184.2832 c
349.9766 191.332 343.2813 199.415 336.8301 208.0479 c
332.6582 213.6309 308.7363 249.085 305.8618 253.2012 c
281.4448 288.1592 254.6411 308.4287 214.9517 308.4287 c
151.9517 308.4287 135.4517 274.9287 135.4517 236.9287 C
135.8081 241.2861 L
138.2729 258.7236 153.2358 272.1582 171.3618 272.2031 c
191.2427 272.2529 207.4028 256.1758 207.4517 236.2939 c
207.4741 227.5156 204.3521 219.4629 199.147 213.2021 C
201.9771 217.125 L
191.5493 206.1172 180.2017 188.1406 171.7407 179.1426 c
164.3911 171.3262 156.561 164.8545 146.1235 160.7471 c
141.6587 158.9902 136.7153 157.666 131.1274 156.8545 c
126.9517 156.248 122.4165 155.9287 117.4517 155.9287 c
114.0142 155.9287 110.4321 156.3984 106.7974 157.3301 c
106.5142 157.4023 106.229 157.4775 105.9458 157.5557 c
88.4536 162.3711 69.9067 177.8164 60.5767 202.9717 c
57.688 210.7588 55.6821 219.4766 54.8638 229.0977 c
54.5933 232.2764 54.4517 235.5537 54.4517 238.9287 c
54.4517 253.5752 57.8013 266.9961 63.8267 279.2324 c
68.1431 287.9951 73.8325 296.1514 80.6509 303.7158 c
81.23 304.3584 81.8169 304.998 82.4126 305.6328 c
95.6958 319.7813 112.9517 331.8096 132.5083 341.8223 c
184.7349 368.5615 253.3579 380.9287 306.4517 380.9287 c
309.4609 380.9287 312.4609 380.8623 315.4512 380.7314 C
311.0957 380.5566 L
171.0903 380.2031 l
F
0 0 0 0.43 k
108.0884 238.1055 m
108.0884 273.8936 134.1431 301.2256 172.5884 301.2256 c
211.0337 301.2256 234.0884 273.8936 234.0884 238.1055 c
234.0884 202.3184 210.6489 192.5723 188.7427 190.793 c
156.1958 188.1504 136.5884 203.3379 136.5884 237.3379 c
136.9751 241.9102 l
139.5327 259.2422 154.4468 272.5664 172.4985 272.6123 c
192.3794 272.6621 208.5396 256.585 208.5884 236.7031 c
208.6099 228.1738 205.6636 220.3281 200.7212 214.1475 C
203.1138 217.5352 L
222.5024 236.9238 220.5884 267.8379 187.8149 284.4668 c
181.7778 287.5313 123.1958 297.3379 123.1958 236.4453 c
123.1958 175.5527 180.8384 176.8379 190.8384 176.8379 c
200.9575 176.8379 250.0884 185.3115 250.0884 245.3379 c
250.0884 305.3643 188.7563 314.0039 166.0884 314.0039 c
143.4224 314.0039 91.3032 301.3379 93.4224 234.0039 c
95.5396 166.6709 156.5884 146.6719 179.4224 146.6719 c
220.0884 146.6719 235.0884 159.6709 255.7544 175.0049 c
314.1523 218.3359 343.2012 262.9092 389.9219 298.3379 c
426.1309 325.7959 485.2129 315.0234 504.0879 286.8379 c
528.5547 250.3047 512.7227 174.8379 469.4883 174.8379 c
418.0879 174.8379 411.1777 209.0752 411.1777 227.3232 c
411.1777 245.3232 424.5879 255.3379 433.5879 264.3379 c
438.3809 265.6738 l
444.4746 270.4561 452.1523 273.3164 460.498 273.3369 c
480.3789 273.3877 496.5371 257.3096 496.5879 237.4277 C
496.5879 237.3379 L
496.5879 256.8379 491.8926 280.2793 468.5879 287.8379 c
450.0879 293.8379 395.3379 293.5879 392.5879 224.8379 c
391.5098 197.8594 409.5879 153.8379 458.5879 153.8379 c
513.5879 153.8379 538.1719 210.7539 538.1719 238.7539 c
538.1719 342.8311 411.9766 376.9609 316.5879 381.1406 C
312.5918 380.9658 L
172.2271 380.6123 l
172.2271 380.6123 l
92.6978 380.4121 28.3892 315.7773 28.5884 236.25 c
28.7896 156.7217 93.4243 92.4121 172.9517 92.6123 c
172.9517 92.6123 l
307.5918 92.9512 L
307.5879 93.3379 L
226.5884 93.3379 76.0884 131.3379 76.0884 237.3379 c
76.0884 297.3145 127.9478 328.0879 176.0063 328.0879 c
240.1724 328.0879 270.7563 286.0723 270.7563 241.3379 c
270.7563 196.6035 237.479 164.0039 189.4224 164.0039 c
141.3638 164.0039 108.0884 193.3711 108.0884 238.1055 c
F
0 R
0 0 0 1 K
4 w
172.1831 200.5244 m
152.3003 200.4746 136.1421 216.5508 136.0923 236.4336 c
136.0425 256.3154 152.1196 272.4746 172.0015 272.5244 c
191.8833 272.5742 208.0425 256.4971 208.0923 236.6152 c
208.1421 216.7324 192.0649 200.5742 172.1831 200.5244 c
s
460.1836 201.249 m
440.3008 201.1992 424.1426 217.2764 424.0918 237.1582 c
424.041 257.041 440.1191 273.1992 460.002 273.249 c
479.8828 273.2998 496.041 257.2217 496.0918 237.3398 c
496.1426 217.458 480.0645 201.2988 460.1836 201.249 c
s
3 w [4 6 ]0 d
114.229 253.7246 m
127.479 249.8223 136.0747 243.54 136.0923 236.4336 c
S
1 w []0 d
95.0972 257.2939 m
102.1157 256.6143 108.5933 255.3848 114.229 253.7246 c
N
0 R
0 0 0 1 K
3 w [4 6 ]0 d
86.4253 257.8379 m
89.3892 257.75 92.2866 257.5664 95.0972 257.2939 c
S
28.0923 236.1621 m
28.0688 245.6367 43.2993 253.7256 64.5103 256.6904 c
70.0054 257.458 75.9009 257.8818 82.0376 257.8975 c
83.5142 257.9014 84.978 257.8809 86.4253 257.8379 c
S
[]0 d
136.0923 236.4336 m
136.1226 224.5039 111.9692 214.7725 82.147 214.6973 c
52.3237 214.623 28.1226 224.2324 28.0923 236.1621 c
28.0923 236.1621 l
S
2 w
171.73 380.5244 m
459.7305 381.25 l
539.2578 381.4502 603.8926 317.1396 604.0918 237.6113 c
604.293 158.084 539.9824 93.4492 460.4551 93.25 c
172.4546 92.5244 l
172.4546 92.5244 l
92.9272 92.3242 28.2925 156.6338 28.0923 236.1621 c
27.8921 315.6895 92.2017 380.3242 171.73 380.5244 c
171.73 380.5244 l
S
3 w [4 6 ]0 d
591.8477 251.2607 m
599.4883 247.5547 604.0781 242.8027 604.0918 237.6113 c
S
574.9863 256.7021 m
580.4883 255.5684 585.4375 254.0645 589.625 252.2734 c
590.3926 251.9453 591.1328 251.6074 591.8477 251.2607 c
S
537.1211 258.4219 m
541.2598 258.8389 545.5859 259.0654 550.0371 259.0762 c
555.4551 259.0898 560.6875 258.7842 565.623 258.2031 c
568.8848 257.8193 572.0156 257.3145 574.9863 256.7021 c
S
517.6152 254.666 m
523.3379 256.4043 529.9473 257.6992 537.1211 258.4219 c
S
496.0918 237.3398 m
496.0742 244.4004 504.5293 250.6914 517.6152 254.666 c
S
[]0 d
496.0918 237.3398 m
496.123 225.4102 520.3242 215.8008 550.1465 215.876 c
579.9688 215.9512 604.123 225.6826 604.0918 237.6113 c
S
u
0.9098 0 1 0 K
[4 6 ]0 d
208.0923 236.6152 m
208.0913 237.0859 208.145 237.5527 208.2524 238.0176 c
S
424.0918 237.1582 m
S
424.0918 237.1582 m
424.0938 236.6875 424.0391 236.2197 423.9316 235.7539 c
S
[]0 d
423.9316 235.7539 m
S
U
0 0 0 1 K
4 w [4 6 ]0 d
142.9888 273.2969 m
137.9985 262.5605 136.0923 250.165 136.0923 237.25 c
S
1 w []0 d
154.6147 289.7061 m
149.6128 284.9033 145.8081 279.3652 142.9888 273.2969 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
161.4194 295.252 m
158.938 293.5371 156.6753 291.6836 154.6147 289.7061 c
S
1 w []0 d
182.0776 304.6719 m
173.9282 302.376 167.1021 299.1787 161.4194 295.252 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
188.7808 306.291 m
186.4526 305.8164 184.2192 305.2754 182.0776 304.6719 c
S
1 w []0 d
215.5923 308.75 m
205.5044 308.75 196.6079 307.8906 188.7808 306.291 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
230.3433 307.7617 m
225.6206 308.418 220.7104 308.75 215.5923 308.75 c
S
1 w []0 d
255.9097 300.3584 m
247.9995 303.9951 239.5269 306.4883 230.3433 307.7617 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
306.5024 253.5225 m
291.5952 275.3701 275.4741 291.3633 255.9097 300.3584 c
S
1 w []0 d
325.2051 225.6768 m
318.9375 234.8828 312.7754 244.3291 306.5024 253.5225 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
418.834 158.3037 m
417.6055 158.2676 416.3574 158.25 415.0918 158.25 c
392.0801 158.25 373.7773 168.8398 357.7734 184.6045 c
350.6172 191.6533 343.9219 199.7363 337.4707 208.3691 c
333.2988 213.9521 333.2559 213.8525 329.2305 219.7646 c
S
444.0762 162.0547 m
436.6523 159.8984 428.2715 158.5791 418.834 158.3037 c
S
460.6934 169.0742 m
455.7813 166.2305 450.2617 163.8516 444.0762 162.0547 c
S
462.2813 170.0215 m
461.7598 169.7002 461.2305 169.3848 460.6934 169.0742 c
S
477.4473 182.875 m
473.252 178.0459 468.2324 173.6846 462.2813 170.0215 c
S
496.0918 237.25 m
496.0918 220.4863 491.7168 201.0488 479.7285 185.6494 c
478.9961 184.709 478.2363 183.7832 477.4473 182.875 c
S
[]0 d
316.0918 381.0527 m
411.4805 376.873 537.6758 342.7432 537.6758 238.666 c
537.6758 210.666 513.0918 153.75 458.0918 153.75 c
409.0918 153.75 391.0137 197.7715 392.0918 224.75 c
394.8418 293.5 449.5918 293.75 468.0918 287.75 c
491.3965 280.1914 496.0918 256.75 496.0918 237.25 c
S
[4 6 ]0 d
81.2905 304.0371 m
81.8696 304.6807 82.4575 305.3193 83.0532 305.9541 c
96.3354 320.1025 113.5923 332.1309 133.1489 342.1436 c
185.3755 368.8828 253.9985 381.25 307.0918 381.25 c
310.1016 381.25 313.1016 381.1836 316.0918 381.0527 c
S
55.5034 229.4189 m
55.2329 232.5977 55.0923 235.875 55.0923 239.25 c
55.0923 253.8965 58.4409 267.3174 64.4673 279.5537 c
68.7837 288.3164 74.4731 296.4727 81.2905 304.0371 c
S
1 w []0 d
61.2163 203.293 m
58.3276 211.0801 56.3218 219.7979 55.5034 229.4189 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
99.9976 160.1797 m
84.6021 166.7051 69.3813 181.2822 61.2163 203.293 c
S
1 w []0 d
124.0688 156.4141 m
122.147 156.3047 120.1567 156.25 118.0923 156.25 c
114.6548 156.25 111.0728 156.7197 107.437 157.6514 c
107.1538 157.7246 106.8696 157.7988 106.5864 157.877 c
104.3999 158.4785 102.1968 159.2471 99.9976 160.1797 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
131.2261 157.0996 m
128.9507 156.7842 126.5679 156.5547 124.0688 156.4141 c
S
1 w []0 d
146.7642 161.0684 m
142.2983 159.3115 137.356 157.9873 131.7681 157.1758 c
131.5884 157.1494 131.4077 157.124 131.2261 157.0996 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
152.8081 163.8496 m
150.8892 162.8301 148.8804 161.9004 146.7642 161.0684 c
S
1 w []0 d
164.3198 171.7305 m
160.7876 168.7373 157.0132 166.0801 152.8081 163.8496 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
167.2485 174.334 m
166.2886 173.4414 165.314 172.5723 164.3198 171.7305 c
S
1 w []0 d
174.6411 181.9922 m
173.8677 181.0898 173.1138 180.2422 172.3813 179.4639 c
170.7036 177.6797 169.0015 175.9668 167.2485 174.334 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
177.4536 185.4111 m
176.4917 184.2031 175.5532 183.0586 174.6411 181.9922 c
S
1 w []0 d
186.2759 197.0488 m
183.2114 192.9229 180.2378 188.9063 177.4536 185.4111 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
202.6167 217.4473 m
197.2407 211.7715 191.6196 204.2441 186.2759 197.0488 c
S
[]0 d
202.6167 217.4473 m
222.0063 236.8359 220.0923 267.75 187.3188 284.3789 c
181.2808 287.4434 122.6987 297.25 122.6987 236.3574 c
122.6987 175.4648 180.3423 176.75 190.3423 176.75 c
200.4614 176.75 249.5923 185.2236 249.5923 245.25 c
249.5923 305.2764 188.2593 313.916 165.5923 313.916 c
142.9253 313.916 90.8071 301.25 92.9253 233.916 c
95.0435 166.583 156.0923 146.584 178.9253 146.584 c
219.5923 146.584 234.5923 159.583 255.2583 174.917 c
313.6563 218.248 342.7051 262.8213 389.4258 298.25 c
425.6348 325.708 484.7168 314.9355 503.5918 286.75 c
528.0586 250.2168 512.2266 174.75 468.9922 174.75 c
417.5918 174.75 410.6816 208.9873 410.6816 227.2354 c
410.6816 245.2354 424.0918 255.25 433.0918 264.25 c
S
[4 6 ]0 d
450.1641 283.6016 m
445.0117 277.3203 439.5703 270.7275 433.0918 264.25 c
S
1 w []0 d
460.6211 295.9746 m
460.3496 295.6719 460.0762 295.3691 459.8047 295.0635 c
456.582 291.4414 453.4316 287.584 450.1641 283.6016 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
468.0762 303.5176 m
465.4883 301.1689 463.0313 298.6387 460.6211 295.9746 c
S
1 w []0 d
481.4961 313.0703 m
476.5059 310.4453 472.1328 307.2031 468.0762 303.5176 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
493.873 318.4072 m
491.7188 317.6523 489.5898 316.6475 486.7031 315.4824 c
484.8906 314.751 483.1602 313.9453 481.4961 313.0703 c
S
1 w []0 d
513.5098 318.8877 m
511.5625 319.3369 509.5859 319.623 507.5918 319.75 c
500.8242 320.1816 497.3164 319.6133 493.873 318.4072 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
552.5918 228.75 m
552.8281 232.0459 553.6875 237.3311 553.5918 240.75 c
552.2188 290.1689 534.5156 314.043 513.5098 318.8877 c
S
307.0918 93.25 m
400.7852 93.25 462.7246 108.6191 501.2227 138.5957 c
511.1328 146.3125 519.4902 154.9961 526.4355 164.6348 c
534.5156 175.8486 541.4473 189.1563 546.5918 206.75 c
S
[]0 d
75.5923 237.25 m
75.5923 131.25 226.0923 93.25 307.0918 93.25 c
S
0.0157 0.749 0.9137 0 K
[4 6 ]0 d
540.0918 118.25 m
S
0 0 0 1 K
[]0 d
270.2593 241.25 m
270.2593 196.5156 236.9819 163.916 188.9253 163.916 c
140.8677 163.916 107.5923 193.2832 107.5923 238.0176 c
S
75.5923 237.25 m
75.5923 297.2266 127.4517 328 175.5093 328 c
239.6763 328 270.2593 285.9844 270.2593 241.25 c
S
233.5923 238.0176 m
233.5923 202.2305 210.1528 192.4844 188.2466 190.7051 c
155.6997 188.0625 136.0923 203.25 136.0923 237.25 c
S
107.5923 238.0176 m
107.5923 273.8057 133.646 301.1377 172.0923 301.1377 c
210.5376 301.1377 233.5923 273.8057 233.5923 238.0176 c
S
0 To
1 0 0 1 340.2441 337.041 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 36 Tf
(K) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 366.5 332.5 0 Tp
TP
0 Tr
/_Helvetica 21 Tf
(p) Tx 1 35 Tk
(,q) Tx 1 0 Tk
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1322 2624 a(Figure)27 b(13)100 2765 y(Because)f(eac)n(h)g
(of)h(the)g(sub)n(w)n(ords)e Fl(w)30 b Fp(=)c Fl(\025)p
1427 2719 51 4 v(\026)q Fp(,)h Fl(\027)p 1574 2697 49
4 v 5 w(\025)h Fp(and)f Fl(\026)p 1861 2719 47 4 v(\027)32
b Fp(con)n(tain,)26 b(b)n(y)h(insp)r(ection)g(ab)r(o)n(v)n(e,)0
2865 y(at)33 b(least)f(one)g(\(and)h(therefore)f(exactly)g(one\))h
(high)f(p)r(o)n(w)n(er)g(of)g Fl(a;)14 b(b;)g(A)33 b
Fp(or)e Fl(B)t Fp(,)k(the)e(only)f(w)n(a)n(y)0 2964 y(that)25
b(the)g(sub)n(w)n(ord)e Fl(w)k Fp(can)d(b)r(e)h(a)f(prop)r(er)g(p)r(o)n
(w)n(er)f(is)h(if)h(it)g(con)n(tains)f Fk(no)j(other)g(letters)p
Fp(,)e(b)r(ecause)0 3064 y(otherwise)h(suc)n(h)g(a)h(p)r(o)n(w)n(er)e
(w)n(ould)i(b)r(e)g(a)g(concatenation)e(of)i(a)f(sub)n(w)n(ord)g(of)h
Fl(w)r Fp(,)g(and)g(so)f(w)n(ould)0 3164 y(require)20
b(more)h(than)g(one)g(o)r(ccurrence)f(of)i(this)f(high)g(p)r(o)n(w)n
(er.)34 b(This)21 b(immediately)h(rules)f(out)g Fl(\027)p
2940 3096 49 4 v 5 w(\025)0 3263 y Fp(and)28 b Fl(\026)p
212 3218 47 4 v(\027)34 b Fp(for)27 b(the)i(\014rst)f(punctured)h
(torus,)e(and)h Fl(\025)p 1574 3218 51 4 v(\026)h Fp(and)f
Fl(\026)p 1865 3218 47 4 v(\027)34 b Fp(for)27 b(the)i(second,)f(as)g
(candidates)0 3363 y(for)c(prop)r(er)g(p)r(o)n(w)n(ers.)34
b(The)25 b(remaining)e(t)n(w)n(o)h(cases,)g Fl(\025)p
1676 3317 51 4 v(\026)h Fp(for)f(the)h(\014rst)g(and)f
Fl(\027)p 2388 3295 49 4 v 5 w(\025)h Fp(for)f(the)h(second,)0
3462 y(can)k(b)r(e)h(prop)r(er)f(p)r(o)n(w)n(ers)f(only)h(if)i
Fl(\015)j Fp(do)r(es)29 b(not)h(cross)e(the)i(strings)f(of)g
(rectangles)g(making)g(up)0 3562 y(these)23 b(t)n(w)n(o)f(ann)n(uli.)36
b(But)23 b(this)g(is)g(imp)r(ossible;)i(the)f(cores)d(of)i(these)g(ann)
n(uli)g(eac)n(h)g(in)n(tersect)f(one)0 3662 y(of)31 b
Fl(\013;)14 b(\014)37 b Fp(once)31 b(\(Figure)g(13a\),)g(and)h(so)e(if)
i Fl(\015)37 b Fp(misses)31 b(one)g(of)g(the)h(cores)e
Fl(C)38 b Fp(\(whic)n(h)32 b(in)n(tersects)0 3761 y Fl(\013)p
Fp(,)40 b(sa)n(y\),)e(then)f Fl(\015)42 b Fp(lies)37
b(in,)i(and)e(is)f(n)n(ull-homologous)f(in,)k Fl(@)5
b(X)i Fp(\()p Fl(F)12 b Fp(\))25 b Fm(n)f Fp(\()p Fl(\013)h
Fm([)g Fl(C)6 b Fp(\),)40 b(whic)n(h)d(is)f(a)0 3861
y(punctured)c(torus)f(isotopic)g(to)h(the)g(righ)n(t)f(half)h(of)f
Fl(@)5 b(X)i Fp(\()p Fl(F)12 b Fp(\))32 b(in)g(Figure)f(13a.)48
b Fl(\015)36 b Fp(is)c(therefore)0 3961 y(isotopic)22
b(to)g(the)h(b)r(oundary)f(of)g(this)h(punctured)g(torus,)g(and)f(so)g
(is)h(n)n(ull-homotopic)e(in)i Fl(X)7 b Fp(\()p Fl(F)12
b Fp(\),)0 4060 y(con)n(tradicting)26 b(our)h(second)g(condition)g(on)h
Fl(\015)5 b Fp(.)36 b(Consequen)n(tly)-7 b(,)27 b(w)n(e)g(ha)n(v)n(e)0
4201 y Fr(Prop)s(osition)32 b(2.)47 b Fk(F)-6 b(or)32
b(every)g(curve)g Fl(\015)k Fk(satisfying)d(the)e(c)l(onditions)i(of)f
(Se)l(ction)f(1,)i(and)f(for)0 4301 y(every)g Fl(p;)14
b(q)30 b Fm(\025)c Fp(2)p Fk(,)32 b(the)f(knots)h Fl(K)988
4313 y Fi(n)1064 4301 y Fk(c)l(onstructe)l(d)f(ab)l(ove)i(have)f
(unique)g(minimal)g(genus)f(Seifert)0 4400 y(surfac)l(e)f
Fl(F)336 4412 y Fi(n)382 4400 y Fk(;)g(this)g(surfac)l(e)g(is)g(genus)g
(1)g(and)g(fr)l(e)l(e.)1453 4583 y Fm(x)p Fq(4)1192 4682
y(Hyperbolicity)100 4832 y Fp(W)-7 b(e)36 b(no)n(w)g(sho)n(w)f(that)i
(for)f(eac)n(h)f(c)n(hoice)h(of)g Fl(\015)41 b Fp(giv)n(en)36
b(in)g(section)g(1,)i(in\014nitely)f(man)n(y)f(of)0 4932
y(the)c(resulting)f(knots)h Fl(K)793 4944 y Fi(n)869
4932 y Fp(are)f(h)n(yp)r(erb)r(olic.)49 b(T)-7 b(o)32
b(do)f(this)h(w)n(e)g(demonstrate)f(that)h(for)f(ev)n(ery)0
5031 y Fl(p;)14 b(q)31 b Fm(\025)d Fp(2)j(the)g(t)n(w)n(o)f(comp)r
(onen)n(t)h(link)g Fl(L)f Fp(=)h Fl(K)1468 5043 y Fi(p;q)1579
5031 y Fm([)21 b Fl(\015)35 b Fp(has)c(h)n(yp)r(erb)r(olic)f(complemen)
n(t.)47 b(Then)p eop
%%Page: 13 13
13 12 bop 750 42 a Fn(Unique)24 b(minimal)c(gen)n(us)25
b(Seifert)e(surfaces)h(and)g(depth)657 b(13)0 241 y Fp(b)n(y)28
b(Th)n(urston's)e(Hyp)r(erb)r(olic)i(Dehn)g(Surgery)f(Theorem)g([Th2],)
h(all)f(but)h(\014nitely)h(man)n(y)e(1)p Fl(=n)0 340
y Fp(Dehn)h(\014llings)e(along)g Fl(\015)32 b Fp(yield)27
b(h)n(yp)r(erb)r(olic)g(knot)f(complemen)n(ts.)37 b(Since)27
b(the)g(v)n(olumes)g(of)f(the)0 440 y(complemen)n(ts)d(of)h(these)g
(knots)f Fl(K)1083 452 y Fi(n)1128 440 y Fp(,)h(for)g(high)f(v)-5
b(alues)24 b(of)f Fl(n)p Fp(,)i(are)d(less)i(than,)g(but)h(con)n(v)n
(erge)c(to,)0 540 y(the)k(v)n(olume)g(of)g(the)g(complemen)n(t)g(of)g
Fl(K)1280 552 y Fi(p;q)1395 540 y Fp(\(whose)g(v)n(olumes,)f(in)i
(turn,)f(con)n(v)n(erge)e(to)i(that)g(of)0 639 y(the)i(three)g(comp)r
(onen)n(t)g(link)g Fl(K)22 b Fm([)17 b Fl(\013)h Fm([)f
Fl(\014)t Fp(\),)28 b(in\014nitely)f(man)n(y)g(of)f(the)i(knot)e
(complemen)n(ts)h(are)0 739 y(distinct.)38 b(Therefore)26
b([GL])i(in\014nitely)g(man)n(y)f(of)h(the)g(knots)f(are)f(distinct.)
100 839 y(Hyp)r(erb)r(olicit)n(y)42 b(can)f(b)r(e)i(v)n(eri\014ed)e(b)n
(y)h(sho)n(wing)f(that)h(the)h(top)r(ological)d(h)n(yp)r(otheses)i(of)0
938 y(Th)n(urston's)e(Geometrization)h(Theorem)f([Th3])i(hold,)i(that)e
(is,)j(that)d Fl(L)f Fp(is)g(not)g(a)g(split,)0 1038
y(satellite,)34 b(or)e(torus)h(link.)53 b(The)33 b(basic)f(outline)i
(of)f(the)g(pro)r(of)f(of)h(this)h(follo)n(ws)e(section)g(3)h(of)0
1138 y([Br1].)40 b(W)-7 b(e)29 b(let)h Fl(F)562 1150
y Fi(p;q)682 1138 y Fp(denote)e(the)i(gen)n(us)e(1)g(Seifert)i(surface)
e(of)g Fl(K)2105 1150 y Fi(p;q)2225 1138 y Fp(obtained)g(b)n(y)h
(spinning)0 1237 y Fl(F)40 b Fp(along)26 b Fl(\013)i
Fp(and)g Fl(\014)t Fp(.)0 1388 y Fr(Prop)s(osition)i(3.)47
b Fk(The)31 b(link)f Fl(L)f Fk(is)h(not)g(split.)100
1589 y Fr(Pro)s(of:)68 b Fp(The)43 b(lo)r(op)g Fl(\015)54
b Fm(\022)49 b Fl(X)7 b Fp(\()p Fl(F)1183 1601 y Fi(p;q)1323
1589 y Fm(\022)49 b Fl(X)7 b Fp(\()p Fl(K)1616 1601 y
Fi(p;q)1706 1589 y Fp(\))44 b(represen)n(ts)e(a)h(non-trivial)f(w)n
(ord)h(in)0 1688 y Fl(\031)47 1700 y Fj(1)85 1688 y Fp(\()p
Fl(X)7 b Fp(\()p Fl(F)278 1700 y Fi(p;q)368 1688 y Fp(\)\))36
b(=)f Fl(F)12 b Fp(\()p Fl(a;)i(b)p Fp(\),)37 b(b)n(y)d(the)i(second)e
(condition)g(imp)r(osed)h(on)g Fl(\015)k Fp(ab)r(o)n(v)n(e.)58
b(Since)35 b Fl(F)2898 1700 y Fi(p;q)0 1788 y Fp(is)j(incompressible)e
(in)i Fl(X)7 b Fp(\()p Fl(K)944 1800 y Fi(p;q)1034 1788
y Fp(\),)41 b Fl(\031)1177 1800 y Fj(1)1214 1788 y Fp(\()p
Fl(X)7 b Fp(\()p Fl(F)1407 1800 y Fi(p;q)1498 1788 y
Fp(\)\))39 b(injects)f(in)n(to)f Fl(\031)2097 1800 y
Fj(1)2135 1788 y Fp(\()p Fl(X)7 b Fp(\()p Fl(K)2346 1800
y Fi(p;q)2436 1788 y Fp(\)\),)41 b(and)c(so)h Fl(\015)k
Fp(is)0 1888 y(non-trivial)22 b(in)i Fl(\031)544 1900
y Fj(1)581 1888 y Fp(\()p Fl(X)7 b Fp(\()p Fl(K)792 1900
y Fi(p;q)882 1888 y Fp(\)\).)37 b Fl(\015)28 b Fp(is)23
b(therefore)f(not)i(con)n(tained)e(in)i(a)f(3-ball)f(in)i
Fl(X)7 b Fp(\()p Fl(K)2671 1900 y Fi(p;q)2761 1888 y
Fp(\).)36 b(But)0 1987 y(then)f(for)g(an)n(y)f(2-sphere)g
Fl(S)887 1957 y Fj(2)959 1987 y Fp(in)h Fl(X)7 b Fp(\()p
Fl(L)p Fp(\))35 b Fm(\022)g Fl(S)1451 1957 y Fj(3)1488
1987 y Fp(,)i(whic)n(hev)n(er)c(3-ball)h(complemen)n(tary)g(region)0
2087 y(\(in)h Fl(S)192 2057 y Fj(3)229 2087 y Fp(\))f(of)g
Fl(S)452 2057 y Fj(2)524 2087 y Fp(con)n(tains)f Fl(K)927
2099 y Fi(p;q)1051 2087 y Fp(also)g(con)n(tains)g Fl(\015)5
b Fp(.)57 b(The)34 b(other)g(3-ball)f(region)g(is)h(therefore)0
2187 y(con)n(tained)27 b(in)h Fl(X)7 b Fp(\()p Fl(L)p
Fp(\).)36 b(So)27 b Fl(L)h Fp(is)f(not)h(split.)p 1377
2210 36 60 v 0 2337 a Fr(Prop)s(osition)i(4.)47 b Fk(The)31
b(link)f Fl(L)f Fk(is)h(not)g(a)g(torus)f(link.)100 2488
y Fr(Pro)s(of:)47 b Fp(The)33 b(knot)g Fl(K)850 2500
y Fi(p;q)940 2488 y Fp(,)h(since)f Fl(p;)14 b(q)35 b
Fm(\025)d Fp(2,)i(is)f(a)g(non-torus)e(alternating)h(knot,)j(and)e(so)0
2587 y(b)n(y)g(Menasco)g([Me])g(is)h(h)n(yp)r(erb)r(olic.)54
b Fl(L)33 b Fp(therefore)f(con)n(tains)h(a)g(non-torus)f(knot,)j(and)e
(so)g(is)0 2687 y(non-torus.)p 407 2710 V 0 2837 a Fr(Lemma)h(5.)47
b Fk(Ther)l(e)34 b(is)f(no)g(essential)h(annulus)e Fl(Q)h
Fk(in)g Fl(X)7 b Fp(\()p Fl(F)1940 2849 y Fi(p;q)2031
2837 y Fp(\))p Fm(n)p Fk(int)32 b Fl(N)9 b Fp(\()p Fl(\015)c
Fp(\))33 b Fk(=)g Fl(M)42 b Fk(with)33 b(one)0 2937 y(b)l(oundary)d(c)l
(omp)l(onent)g(on)g Fl(N)9 b Fp(\()p Fl(\015)c Fp(\))30
b Fk(and)g(the)g(other)g(on)g Fl(@)5 b(X)i Fp(\()p Fl(F)1951
2949 y Fi(p;q)2041 2937 y Fp(\))19 b Fm(n)f Fl(@)5 b(N)k
Fp(\()p Fl(K)d Fp(\))22 b(=)h Fl(F)2581 2949 y Fj(0)2637
2937 y Fm([)c Fl(F)2764 2949 y Fj(1)2831 2937 y Fk(.)100
3138 y Fr(Pro)s(of:)33 b Fp(F)-7 b(or)20 b(an)n(y)g(suc)n(h)h(ann)n
(ulus)f Fl(Q)p Fp(,)j Fl(Q)5 b Fm(\\)g Fl(@)g(N)k Fp(\()p
Fl(\015)c Fp(\))21 b(=)f Fl(!)k Fp(is)d(a)g(lo)r(op)f(represen)n(ting)g
(some)g(slop)r(e)0 3238 y Fl(u=v)36 b Fp(on)d(the)g(b)r(oundary)g
(torus)g(\(using)g(the)h(standard)e(meridian/longitude)g(co)r
(ordinates\).)0 3337 y(The)37 b(other)f(b)r(oundary)g(comp)r(onen)n(t)h
(is)f(on)h Fl(F)1493 3349 y Fi(i)1521 3337 y Fp(,)i Fl(i)e
Fp(=)f(0)h(or)e(1.)65 b Fl(v)41 b Fm(6)p Fp(=)d(0)f(since)f(otherwise)g
Fl(Q)0 3437 y Fp(capp)r(ed)31 b(o\013)f(with)h(a)g(meridian)f(disk)g
(is)h(a)f(disk)h Fl(D)h Fp(in)f Fl(M)9 b Fp(,)31 b(with)g(b)r(oundary)f
(in)h Fl(F)2600 3449 y Fj(1)2638 3437 y Fp(,)g(whic)n(h)g(is)0
3536 y(incompressible.)48 b Fl(@)5 b(D)33 b Fp(therefore)e(b)r(ounds)g
(a)h(disk)f(in)h Fl(F)1800 3548 y Fj(1)1837 3536 y Fp(,)h(and)e(so)g
Fl(D)j Fp(is)d Fl(@)5 b Fp(-parallel,)31 b(b)n(y)g(the)0
3636 y(irreducibilit)n(y)d(of)h Fl(M)9 b Fp(.)40 b(In)29
b(particular)f Fl(D)j Fp(separates)c Fl(M)9 b Fp(,)29
b(but)h(in)n(tersects)e(the)h(curv)n(e)f Fl(\015)33 b
Fp(once,)0 3736 y(a)j(con)n(tradiction.)61 b(Therefore)35
b Fl(v)41 b Fm(\025)c Fp(1)e(and)h Fl(Q)g Fp(ma)n(y)g(then)g(b)r(e)h
(capp)r(ed)f(of)g(b)n(y)g(an)g(ann)n(ulus)0 3835 y(in)d
Fl(N)9 b Fp(\()p Fl(\015)c Fp(\))32 b(to)g(\(p)r(ossibly)g(a)g(p)r(o)n
(w)n(er)g(of)6 b(\))33 b(the)f(core)g(of)g(this)h(solid)f(torus,)g(and)
h(so)e(represen)n(ts)g(a)0 3935 y(homotop)n(y)26 b(b)r(et)n(w)n(een)i
Fl(\015)756 3905 y Fi(v)823 3935 y Fp(and)f(a)g(simple)h(lo)r(op)f(on)h
Fl(F)1663 3947 y Fj(1)1700 3935 y Fp(.)100 4035 y(The)d(manifolds)g
Fl(X)7 b Fp(\()p Fl(F)803 4047 y Fi(p;q)893 4035 y Fp(\))26
b(are)e(all)h(handleb)r(o)r(dies,)h(as)e(w)n(e)h(ha)n(v)n(e)f(seen,)i
(and)f(w)n(e)f(can)h(in)h(fact)0 4134 y(think)g(of)g(them)g(as)f(the)h
(same)p 761 4147 181 4 v 25 w(handleb)r(o)r(dy)-7 b(,)26
b(with)h(a)e(di\013eren)n(t)h(curv)n(e)e Fl(K)2302 4146
y Fi(p;q)2418 4134 y Fp(dra)n(wn)h(on)g(them,)0 4234
y(obtained)e(b)n(y)h(spinning)f(our)g(orginal)f Fl(K)6
b Fp(,)24 b(in)g(our)f(picture)h(of)g Fl(X)7 b Fp(\()p
Fl(F)12 b Fp(\),)24 b(around)f Fl(\013)h Fp(and)f Fl(\014)t
Fp(.)36 b(F)-7 b(rom)0 4334 y(this)32 b(p)r(oin)n(t)g(of)g(view)f(the)i
(curv)n(e)e Fl(\015)36 b Fp(represen)n(ts)30 b(the)j(same)e(w)n(ord)f
(in)j(all)e(of)h(the)g Fl(\031)2612 4346 y Fj(1)2650
4334 y Fp(\()p Fl(X)7 b Fp(\()p Fl(F)2843 4346 y Fi(p;q)2933
4334 y Fp(\),)0 4433 y(and)30 b(via)f Fl(Q)h Fp(is)g(conjugate)f(to)h
(a)g(w)n(ord)f(in)h Fl(i)1374 4445 y Fh(\003)1412 4433
y Fp(\()p Fl(\031)1491 4445 y Fj(1)1529 4433 y Fp(\()p
Fl(F)1614 4445 y Fj(0)1652 4433 y Fp(\)\))h(or)e Fl(i)1880
4445 y Fh(\003)1917 4433 y Fp(\()p Fl(\031)1996 4445
y Fj(1)2034 4433 y Fp(\()p Fl(F)2119 4445 y Fj(1)2157
4433 y Fp(\)\))i(in)f Fl(\031)2398 4445 y Fj(1)2436 4433
y Fp(\()p Fl(X)7 b Fp(\()p Fl(F)2629 4445 y Fi(p;q)2720
4433 y Fp(\)\).)45 b(But)0 4533 y(from)25 b(Figure)f(13a)g(w)n(e)g(ma)n
(y)h(compute)g(that)g(these)g(t)n(w)n(o)f(subgroups)g(are)g(freely)g
(generated)g(b)n(y)0 4633 y(the)g(w)n(ords)f Fm(f)p Fl(a)460
4602 y Fi(p)p Fj(+1)582 4633 y Fl(;)14 b(b)655 4602 y
Fi(q)r Fj(+1)775 4633 y Fl(A)p Fm(g)24 b Fp(and)f Fm(f)p
Fl(a)1146 4602 y Fi(p)p Fj(+1)1268 4633 y Fl(B)t(;)14
b(b)1408 4602 y Fi(q)r Fj(+1)1528 4633 y Fm(g)p Fp(,)25
b(resp)r(ectiv)n(ely)-7 b(.)35 b(Consequen)n(tly)-7 b(,)23
b(if)i Fl(p;)14 b(q)26 b Fm(\025)c Fp(2,)0 4732 y(then)30
b(w)n(ords)d(in)j(normal)e(form)h(in)g Fl(i)1137 4744
y Fh(\003)1175 4732 y Fp(\()p Fl(\031)1254 4744 y Fj(1)1292
4732 y Fp(\()p Fl(F)1377 4744 y Fj(0)1414 4732 y Fp(\)\))h(ha)n(v)n(e)e
Fl(b)p Fp('s)h(o)r(ccurring)e(in)j(clumps;)g(no)f(w)n(ord)f(in)0
4832 y(normal)i(form)g(can)g(ha)n(v)n(e)f(a)h(single)g
Fl(b)h Fp(or)e Fl(B)35 b Fp(surrounded)30 b(b)n(y)g(a)g(com)n(bination)
g(of)g Fl(a)p Fp('s)g(and/or)0 4932 y Fl(A)p Fp('s.)67
b(Similarly)-7 b(,)39 b(no)f(w)n(ord)e(in)i(normal)e(form)h(in)h
Fl(i)1670 4944 y Fh(\003)1708 4932 y Fp(\()p Fl(\031)1787
4944 y Fj(1)1825 4932 y Fp(\()p Fl(F)1910 4944 y Fj(1)1948
4932 y Fp(\)\))g(can)f(ha)n(v)n(e)f(a)h(single)g Fl(a)h
Fp(or)f Fl(A)0 5031 y Fp(surrounded)26 b(b)n(y)h(a)f(com)n(bination)h
(of)g Fl(b)p Fp('s)f(and/or)g Fl(B)t Fp('s.)36 b(But)28
b(for)e(an)n(y)g(curv)n(e)g Fl(\015)32 b Fp(satisfying)26
b(the)p eop
%%Page: 14 14
14 13 bop 0 42 a Fn(14)1152 b(Mark)24 b(Brittenham)0
241 y Fp(conditions)35 b(of)g(Section)h(1,)h(the)f(w)n(ord)e(represen)n
(ting)g Fl(\015)5 b Fp(,)38 b(b)n(y)d(the)h(commen)n(t)f(at)g(the)h
(end)g(of)0 340 y(Section)30 b(1,)h(will)g(b)r(e)f(cyclically)g
(reduced)g(and)g(will)h(not)f(ha)n(v)n(e)f(an)h(o)r(ccurrence)f(of)h
Fl(a)2682 310 y Fj(2)2720 340 y Fl(;)14 b(A)2819 310
y Fj(2)2856 340 y Fl(;)g(b)2929 310 y Fj(2)2966 340 y
Fp(,)0 440 y(or)33 b Fl(B)175 410 y Fj(2)246 440 y Fp(in)h(an)n(y)e
(cyclic)i(conjugate.)54 b(The)34 b(same)f(will)g(therefore)g(b)r(e)h
(true)g(of)f Fl(\015)2529 410 y Fi(v)2568 440 y Fp(,)i(and)f(so)f
Fl(\015)2950 410 y Fi(v)0 540 y Fp(cannot)27 b(b)r(e)h(conjugate)f(to)h
(a)f(w)n(ord)f(in)i(either)f(of)h(these)g(t)n(w)n(o)e(subgroups.)p
2359 563 36 60 v 0 712 a Fr(Prop)s(osition)k(6.)47 b
Fl(L)29 b Fk(is)h(not)g(a)g(satel)t(lite)h(link.)100
948 y Fr(Pro)s(of:)k Fp(The)27 b(argumen)n(t)e(parallels)g(m)n(uc)n(h)h
(of)g(the)h(argumen)n(t)e(of)i(Prop)r(osition)e(3)g(of)i([Br1];)0
1048 y(where)j(the)h(details)f(are)g(iden)n(tical,)h(w)n(e)f(omit)g
(them.)47 b(F)-7 b(or)29 b(ease)h(of)g(notation,)h(w)n(e)f(will)h
(write)0 1147 y Fl(K)38 b Fp(for)31 b Fl(K)311 1159 y
Fi(p;q)433 1147 y Fp(and)h Fl(F)44 b Fp(for)32 b Fl(F)881
1159 y Fi(p;q)972 1147 y Fp(.)50 b(In)32 b(the)h(discussion)e(ab)r(o)n
(v)n(e,)h Fl(\015)37 b Fp(w)n(as)31 b(p)r(ortra)n(y)n(ed)f(as)h(lying)h
(on)0 1247 y Fl(@)5 b(X)i Fp(\()p Fl(F)12 b Fp(\);)44
b(in)39 b(the)g(presen)n(t)f(discussion,)j(w)n(e)e(think)g(of)g(it)g
(rather)f(as)g(lying)g(sligh)n(tly)g(in)h(the)0 1347
y(in)n(terior)26 b(of)i Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\).)100
1486 y(Supp)r(ose)28 b(that)g Fl(T)39 b Fp(is)28 b(an)f(incompressible)
g(torus)g(in)h Fl(X)7 b Fp(\()p Fl(L)p Fp(\))28 b(that)g(is)g(not)g
Fl(@)5 b Fp(-parallel.)36 b(Then)0 1586 y(since)22 b
Fl(F)35 b Fm(\022)23 b Fl(X)7 b Fp(\()p Fl(L)p Fp(\))21
b(is)h(incompressible,)g(after)g(disk)g(sw)n(apping)f(w)n(e)h(ma)n(y)f
(assume)h(that)g Fl(T)c Fm(\\)7 b Fl(F)36 b Fm(\022)0
1685 y Fl(F)k Fp(consists)28 b(of)g(t)n(w)n(o)g(families)g(of)h
(parallel)e(lo)r(ops,)h(one)g(parallel)f(to)h Fl(@)5
b(F)12 b Fp(,)29 b(and)f(one)g(parallel)f(to)0 1785 y(a)f
(non-separating)f(lo)r(op)h(in)h Fl(F)12 b Fp(.)36 b(Rep)r(eatedly)27
b(pushing)f Fl(T)38 b Fp(across)25 b(the)i(ann)n(ulus)f(b)r(et)n(w)n
(een)g(the)0 1885 y(outermost)21 b(lo)r(op)g(of)g(the)h(\014rst)f
(family)g(and)h Fl(@)5 b(F)33 b Fp(yields)21 b(a)g(new)h(essen)n(tial)e
(torus)h(\(using)g(Lemma)0 1984 y(5)29 b(ab)r(o)n(v)n(e)f(in)i(place)f
(of)h(Lemma)f(1)g(of)g([Br1]\),)h(whic)n(h)f(w)n(e)g(still)h(call)f
Fl(T)12 b Fp(;)30 b(after)f(these)h(isotopies,)0 2084
y(w)n(e)d(ma)n(y)f(assume)g(that)i(the)f(\014rst)g(family)g(of)g(lo)r
(ops)f(is)h(empt)n(y)-7 b(.)37 b(All)28 b(lo)r(ops)e(of)h
Fl(T)i Fm(\\)17 b Fl(F)39 b Fp(are)26 b(then)0 2184 y(parallel)g(to)i
(a)f(single)g(non-separating)f(lo)r(op)h(on)g Fl(F)12
b Fp(.)100 2291 y(Supp)r(ose)35 b(that)h(w)n(e)e(still)i(ha)n(v)n(e)e
Fl(T)h Fm(\\)24 b Fl(F)47 b Fm(6)p Fp(=)36 b Fm(;)p Fp(.)59
b(F)-7 b(or)35 b(homological)e(reasons)h(\()p Fl(T)47
b Fp(separates)0 2390 y Fl(X)7 b Fp(\()p Fl(K)f Fp(\)\))34
b(there)f(m)n(ust)h(b)r(e)h(an)e(ev)n(en)h(n)n(um)n(b)r(er)f(of)h(lo)r
(ops)f(of)h Fl(T)g Fm(\\)23 b Fl(F)12 b Fp(,)35 b(cutting)g
Fl(F)45 b Fp(in)n(to)34 b(an)g(o)r(dd)0 2490 y(n)n(um)n(b)r(er)d(of)h
(ann)n(uli)f Fl(A)722 2502 y Fj(1)759 2490 y Fl(;)14
b(:)g(:)g(:)g(A)969 2502 y Fi(k)1042 2490 y Fp(and)31
b(a)g(single)g(punctured)h(ann)n(ulus)f Fl(P)12 b Fp(.)49
b(Because)30 b Fl(X)7 b Fp(\()p Fl(K)f Fp(\))31 b(is)0
2590 y(h)n(yp)r(erb)r(olic,)26 b Fl(T)36 b Fp(m)n(ust)26
b(b)r(e)g(compressible)f(or)g Fl(@)5 b Fp(-parallel)24
b(in)i Fl(X)7 b Fp(\()p Fl(K)f Fp(\).)35 b(It)26 b(cannot)g(b)r(e)g
Fl(@)5 b Fp(-parallel,)0 2689 y(b)r(ecause)22 b(then)h
Fl(P)34 b Fp(w)n(ould)22 b(lie)g(in)h(the)g(pro)r(duct)f(region)f(b)r
(et)n(w)n(een)h Fl(T)34 b Fp(and)22 b Fl(@)5 b(X)i Fp(\()p
Fl(K)f Fp(\),)22 b(so)g Fl(P)34 b Fp(cannot)0 2789 y(inject)c(in)n(to)f
(the)h(pro)r(duct,)g(on)f(the)h(lev)n(el)f(of)h Fl(\031)1479
2801 y Fj(1)1516 2789 y Fp(,)g(implying)g(that)g Fl(F)41
b Fp(is)29 b(compressible.)42 b(Since)0 2888 y Fl(T)34
b Fm(\022)23 b Fl(X)7 b Fp(\()p Fl(K)f Fp(\))22 b Fm(\022)h
Fl(S)554 2858 y Fj(3)591 2888 y Fp(,)i Fl(T)36 b Fp(b)r(ounds)25
b(a)g(solid)f(torus)g Fl(M)1559 2900 y Fj(0)1621 2888
y Fp(in)h Fl(S)1771 2858 y Fj(3)1833 2888 y Fp(on)f(at)h(least)f(one)h
(side.)36 b Fl(T)g Fp(therefore)0 2988 y(either)g(b)r(ounds)h(the)f
(solid)g(torus)g Fl(M)1199 3000 y Fj(0)1272 2988 y Fp(in)h
Fl(X)7 b Fp(\()p Fl(K)f Fp(\),)38 b(if)f Fl(K)29 b Fm(\\)c
Fl(M)2002 3000 y Fj(0)2076 2988 y Fp(=)38 b Fm(;)p Fp(,)g(or)d
Fl(K)43 b Fm(\022)38 b Fl(M)2690 3000 y Fj(0)2763 2988
y Fp(and)e(is)0 3088 y(disjoin)n(t)29 b(from)f(a)h(meridian)f(disk)h
Fl(D)i Fp(of)e Fl(M)1364 3100 y Fj(0)1430 3088 y Fp(\(whic)n(h)g(is)g
(the)g(only)f(compressing)g(disk)g Fl(T)40 b Fp(has,)0
3187 y(unless)27 b Fl(T)39 b Fp(b)r(ounds)28 b(a)f(solid)g(torus)g(on)g
(b)r(oth)h(sides\).)804 4162 y @beginspecial 58 @llx
372 @lly 564 @urx 687 @ury 1656 @rwi @setspecial
%%BeginDocument: d_fig14.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig14.eps)
%%CreationDate: (9/10/2002) (10:25 AM)
%%BoundingBox: 58 372 564 687
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%DocumentNeededFonts: Helvetica
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%%CMYKCustomColor: 1 0 0.55 0 (Aqua)
%%+ 1 0.5 0 0 (Blue)
%%+ 0.5 0.4 0.3 0 (Blue Gray)
%%+ 0.8 0.05 0 0 (Blue Sky)
%%+ 0.5 0.85 1 0 (Brown)
%%+ 1 0.9 0.1 0 (Dark Blue)
%%+ 1 0.55 1 0 (Forest Green)
%%+ 0.05 0.2 0.95 0 (Gold)
%%+ 0.75 0.05 1 0 (Grass Green)
%%+ 0 0.45 1 0 (Orange)
%%+ 0.15 1 1 0 (Red)
%%+ 0.45 0.9 0 0 (Violet)
%AI3_TemplateBox: 304 390 304 390
%AI3_TileBox: 16 10 592 772
%AI3_DocumentPreview: Header
%%PageOrigin:16 10
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Arrow1.2.out/in)
(Arrow1.2.out/in) 1 1 39.4039 39.4039 [
%AI3_Tile
(0 O 0 R 0.75 0.75 0.375 0 k
 0.75 0.75 0.375 0 K
) @
(
%AI6_BeginPatternLayer
0 i
1 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
33.9039 15.6187 m
39.4247 20.202 L
39.4247 20.202 L
33.8869 24.6252 L
S
39.2997 20.202 m
24.5706 20.202 l
20.4039 20.4792 20.4039 16.8125 v
20.4039 13.1458 20.4039 12.5625 y
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Arrow1.2.side)
(Arrow1.2.side) 1 1 39.404 39.4039 [
%AI3_Tile
(0 O 0 R 0.75 0.75 0.375 0 k
 0.75 0.75 0.375 0 K
) @
(
%AI6_BeginPatternLayer
0 i
1 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
20.202 20.202 m
39.404 20.202 l
S
33.904 15.6187 m
39.4248 20.202 L
39.4248 20.202 L
33.887 24.6252 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Bricks)
(Bricks) 1.6 1.6 73.6 73.6 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
1.6 1.6 m
1.6 73.6 L
73.6 73.6 L
73.6 1.6 L
1.6 1.6 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
1.6 70.01 m
73.6 70.01 l
S
1.6 62.809 m
73.6 62.809 L
S
1.6 55.609 m
73.6 55.609 L
S
1.6 48.408 m
73.6 48.408 L
S
1.6 41.208 m
73.6 41.208 L
S
1.6 34.007 m
73.6 34.007 L
S
1.6 26.807 m
73.6 26.807 L
S
1.6 19.606 m
73.6 19.606 L
S
1.6 12.406 m
73.6 12.406 L
S
1.6 5.206 m
73.6 5.206 L
S
70.01 70.01 m
70.01 62.822 l
S
55.61 70.01 m
55.61 62.822 L
S
41.21 70.01 m
41.21 62.822 L
S
26.81 70.01 m
26.81 62.822 L
S
12.41 70.01 m
12.41 62.822 L
S
70.01 55.572 m
70.01 48.385 l
S
55.61 55.572 m
55.61 48.385 L
S
41.21 55.572 m
41.21 48.385 L
S
26.81 55.572 m
26.81 48.385 L
S
12.41 55.572 m
12.41 48.385 L
S
70.01 41.197 m
70.01 34.01 l
S
55.61 41.197 m
55.61 34.01 L
S
41.21 41.197 m
41.21 34.01 L
S
26.81 41.197 m
26.81 34.01 L
S
12.41 41.197 m
12.41 34.01 L
S
70.01 26.822 m
70.01 19.635 l
S
55.61 26.822 m
55.61 19.635 L
S
41.21 26.822 m
41.21 19.635 L
S
26.81 26.822 m
26.81 19.635 L
S
12.41 26.822 m
12.41 19.635 L
S
70.01 12.385 m
70.01 5.197 l
S
55.61 12.385 m
55.61 5.197 L
S
41.21 12.385 m
41.21 5.197 L
S
26.81 12.385 m
26.81 5.197 L
S
12.41 12.385 m
12.41 5.197 L
S
62.797 5.197 m
62.797 1.6 L
S
48.397 5.197 m
48.397 1.6 L
S
33.997 5.197 m
33.997 1.6 L
S
19.597 5.197 m
19.597 1.6 L
S
5.197 5.197 m
5.197 1.6 l
S
62.797 19.635 m
62.797 12.447 L
S
48.397 19.635 m
48.397 12.447 L
S
33.997 19.635 m
33.997 12.447 L
S
19.597 19.635 m
19.597 12.447 L
S
5.197 19.635 m
5.197 12.447 l
S
62.797 34.01 m
62.797 26.822 L
S
48.397 34.01 m
48.397 26.822 L
S
19.597 34.01 m
19.597 26.822 L
S
5.197 34.01 m
5.197 26.822 l
S
62.797 48.385 m
62.797 41.197 L
S
48.397 48.385 m
48.397 41.197 L
S
33.997 48.385 m
33.997 41.197 L
S
19.597 48.385 m
19.597 41.197 L
S
5.197 48.385 m
5.197 41.197 l
S
62.797 62.822 m
62.797 55.635 L
S
48.397 62.822 m
48.397 55.635 L
S
33.997 62.822 m
33.997 55.635 L
S
19.597 62.822 m
19.597 55.635 L
S
5.197 62.822 m
5.197 55.635 l
S
62.797 73.5589 m
62.797 70.072 L
S
48.397 73.5589 m
48.397 70.072 L
S
33.997 73.5589 m
33.997 70.072 L
S
19.597 73.5589 m
19.597 70.072 L
S
5.197 73.5589 m
5.197 70.072 l
S
33.997 34.01 m
33.997 26.822 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Checks)
(Checks) 1 1 31.3995 31.3995 [
%AI3_Tile
(0 O 0 R 0 0.9 1 0 k
 0 0.9 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
19.9995 4.8 m
27.5995 4.8 L
27.5995 12.3995 L
19.9995 12.3995 L
19.9995 4.8 L
f
31.3995 27.5995 m
31.3995 31.3995 L
27.5995 31.3995 L
27.5995 27.5995 L
31.3995 27.5995 L
f
19.9995 27.5995 m
19.9995 19.9995 L
27.5995 19.9995 L
27.5995 27.5995 L
19.9995 27.5995 L
f
12.3995 12.3995 m
19.9995 12.3995 L
19.9995 19.9995 L
12.3995 19.9995 L
12.3995 12.3995 L
f
12.3995 27.5995 m
4.8 27.5995 L
4.8 19.9995 L
12.3995 19.9995 L
12.3995 27.5995 L
f
4.8 12.3995 m
4.8 4.8 L
12.3995 4.8 L
12.3995 12.3995 L
4.8 12.3995 L
f
19.9995 27.5995 m
19.9995 31.3995 L
12.3995 31.3995 L
12.3995 27.5995 L
19.9995 27.5995 L
f
12.3995 4.8 m
12.3995 1 L
19.9995 1 L
19.9995 4.8 L
12.3995 4.8 L
f
4.8 19.9995 m
1 19.9995 L
1 12.3995 L
4.8 12.3995 L
4.8 19.9995 L
f
27.5995 19.9995 m
27.5995 12.3995 L
31.3995 12.3995 L
31.3995 19.9995 L
27.5995 19.9995 L
f
4.8 31.3995 m
1 31.3995 L
1 27.5995 L
4.8 27.5995 L
4.8 31.3995 L
f
27.5995 1 m
31.3995 1 L
31.3995 4.8 L
27.5995 4.8 L
27.5995 1 L
f
1 4.8 m
1 1 L
4.8 1 L
4.8 4.8 L
1 4.8 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.05 0.2 0 k
 0 0.05 0.2 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.8 4.8 m
4.8 1 L
12.3995 1 L
12.3995 4.8 L
4.8 4.8 L
f
4.8 12.3995 m
1 12.3995 L
1 4.8 L
4.8 4.8 L
4.8 12.3995 L
f
19.9995 4.8 m
19.9995 1 L
27.5995 1 L
27.5995 4.8 L
19.9995 4.8 L
f
12.3995 12.3995 m
12.3995 4.8 L
19.9995 4.8 L
19.9995 12.3995 L
12.3995 12.3995 L
f
27.5995 4.8 m
31.3995 4.8 L
31.3995 12.3995 L
27.5995 12.3995 L
27.5995 4.8 L
f
12.3995 19.9995 m
4.8 19.9995 L
4.8 12.3995 L
12.3995 12.3995 L
12.3995 19.9995 L
f
4.8 27.5995 m
1 27.5995 L
1 19.9995 L
4.8 19.9995 L
4.8 27.5995 L
f
19.9995 12.3995 m
27.5995 12.3995 L
27.5995 19.9995 L
19.9995 19.9995 L
19.9995 12.3995 L
f
19.9995 19.9995 m
19.9995 27.5995 L
12.3995 27.5995 L
12.3995 19.9995 L
19.9995 19.9995 L
f
27.5995 19.9995 m
31.3995 19.9995 L
31.3995 27.5995 L
27.5995 27.5995 L
27.5995 19.9995 L
f
12.3995 27.5995 m
12.3995 31.3995 L
4.8 31.3995 L
4.8 27.5995 L
12.3995 27.5995 L
f
27.5995 27.5995 m
27.5995 31.3995 L
19.9995 31.3995 L
19.9995 27.5995 L
27.5995 27.5995 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (DblLine1.2.inner)
(DblLine1.2.inner) 1 1 39.2705 39.2706 [
%AI3_Tile
(0 O 0 R 1 0.14 0.09 0 k
 1 0.14 0.09 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
39.2702 22.175 m
39.2702 13.6108 L
26.66 13.6108 L
26.66 1.0003 L
18.0958 1.0003 L
18.0948 22.175 L
18.0958 22.175 L
18.0958 22.1752 L
39.2702 22.175 L
f
39.2708 24.6929 m
15.5779 24.6929 L
15.5779 1.0003 L
14.9037 1.0003 L
14.9032 25.3675 L
39.2708 25.3675 L
39.2708 24.6929 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (DblLine1.2.outer)
(DblLine1.2.outer) 1 1.0003 39.2706 39.271 [
%AI3_Tile
(0 O 0 R 1 0.14 0.09 0 k
 1 0.14 0.09 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
39.2708 26.6602 m
13.6111 26.6602 L
13.6111 1.0005 L
22.1751 1 L
22.1751 18.096 L
39.2708 18.096 L
39.2708 26.6602 L
f
39.2708 15.578 m
24.6928 15.578 L
24.6928 1 L
25.367 1 L
25.367 14.9038 L
39.2708 14.9038 L
39.2708 15.578 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (DblLine1.2.side)
(DblLine1.2.side) 1 1 39.2706 39.2706 [
%AI3_Tile
(0 O 0 R 1 0.14 0.09 0 k
 1 0.14 0.09 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
39.2704 18.0958 m
39.2704 26.6598 L
1.0001 26.6598 L
1.0001 18.0958 L
39.2704 18.0958 L
f
39.2704 14.9037 m
39.2704 15.5776 L
1.0001 15.5776 L
1.0001 14.9037 L
39.2704 14.9037 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Diamonds)
(Diamonds) 1 1 37.1865 41.9411 [
%AI3_Tile
(0 O 0 R 0.2 0 1 0 k
 0.2 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
1.0002 1.0004 m
1.0002 41.9411 L
37.1865 41.9411 L
37.1865 1.0004 L
1.0002 1.0004 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
19.0936 41.9408 m
19.0929 41.9408 L
19.0933 41.9402 L
19.0936 41.9408 L
f
7.0311 41.9408 m
7.0304 41.9408 L
7.0308 41.9402 L
7.0311 41.9408 L
f
31.1556 41.9408 m
31.1548 41.9408 L
31.1552 41.9402 L
31.1556 41.9408 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.75 0.9 0 0 k
 0.75 0.9 0 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
37.1865 1 m
37.1865 11.2349 L
31.1552 1 L
37.1865 1 L
f
19.0933 1 m
31.1552 1 L
25.124 11.2349 L
19.0933 1 L
f
7.0308 1 m
19.0933 1 L
13.062 11.2349 L
7.0308 1 L
f
1 1 m
7.0308 1 L
1 11.2349 L
1 1 L
f
37.1859 11.2349 m
37.1865 11.236 L
37.1865 31.7059 L
31.1552 21.4704 L
37.1859 11.2349 L
f
19.0933 21.4704 m
25.124 11.2349 L
31.1552 21.4704 L
25.124 31.7059 L
19.0933 21.4704 L
f
7.0308 21.4704 m
13.062 11.2349 L
19.0933 21.4704 L
13.062 31.7059 L
7.0308 21.4704 L
f
1 31.7059 m
1 11.2349 L
7.0308 21.4704 L
1 31.7059 L
f
37.1859 31.7059 m
37.1865 31.707 L
37.1865 41.9408 L
31.1556 41.9408 L
31.1552 41.9402 L
37.1859 31.7059 L
f
25.124 31.7059 m
31.1552 41.9402 L
31.1548 41.9408 L
19.0936 41.9408 L
19.0933 41.9402 L
25.124 31.7059 L
f
13.062 31.7059 m
19.0933 41.9402 L
19.0929 41.9408 L
7.0311 41.9408 L
7.0308 41.9402 L
13.062 31.7059 L
f
7.0304 41.9408 m
1 41.9408 L
1 31.7059 L
7.0308 41.9402 L
7.0304 41.9408 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Hexagon)
(Hexagon) 4 1.6 70.151 77.983 [
%AI3_Tile
(0 O 0 R 0 1 0.35 0 k
 0 1 0.35 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
70.151 77.983 m
70.151 1.6 L
4 1.6 L
4 77.983 L
70.151 77.983 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.9921 1 0 0 k
 0.9921 1 0 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
20.538 30.244 m
S
26.05 20.696 m
15.025 20.696 L
9.513 30.244 L
15.025 39.792 L
26.05 39.792 L
31.564 30.244 L
26.05 20.696 L
s
20.537 11.148 m
S
26.05 1.6 m
15.024 1.6 L
9.512 11.148 L
15.024 20.696 L
26.05 20.696 L
31.563 11.148 L
26.05 1.6 L
s
53.614 30.244 m
S
59.126 20.696 m
48.101 20.696 L
42.589 30.244 L
48.101 39.792 L
59.126 39.792 L
64.639 30.244 L
59.126 20.696 L
s
53.614 11.148 m
S
59.126 1.6 m
48.101 1.6 L
42.588 11.148 L
48.101 20.696 L
59.126 20.696 L
64.638 11.148 L
59.126 1.6 L
s
20.538 68.436 m
S
26.051 58.888 m
15.025 58.888 L
9.513 68.436 L
15.025 77.984 L
26.051 77.984 L
31.564 68.436 L
26.051 58.888 L
s
20.538 49.34 m
S
26.051 39.792 m
15.025 39.792 L
9.513 49.34 L
15.025 58.888 L
26.05 58.888 L
31.564 49.34 L
26.051 39.792 L
s
53.614 68.436 m
S
59.127 58.888 m
48.102 58.888 L
42.589 68.436 L
48.101 77.985 L
59.127 77.985 L
64.639 68.436 L
59.127 58.888 L
s
53.614 49.34 m
S
59.127 39.792 m
48.101 39.792 L
42.589 49.34 L
48.101 58.888 L
59.127 58.888 L
64.639 49.341 L
59.127 39.792 L
s
4 20.696 m
S
3.876 30.244 m
9.512 30.244 L
15.024 20.696 L
9.512 11.147 L
3.876 11.147 L
S
37.075 20.696 m
S
42.588 11.148 m
31.563 11.148 L
26.05 20.696 L
31.563 30.244 L
42.589 30.244 L
48.101 20.696 L
42.588 11.148 L
s
37.076 58.888 m
S
42.589 49.34 m
31.564 49.34 L
26.05 58.888 L
31.564 68.436 L
42.589 68.436 L
48.101 58.888 L
42.589 49.34 L
s
70.151 20.696 m
S
70.2094 11.147 m
64.639 11.147 L
59.127 20.696 L
64.639 30.244 L
70.2094 30.244 L
S
70.152 58.888 m
S
70.0427 49.34 m
64.639 49.34 L
59.127 58.888 L
64.639 68.436 L
70.0427 68.436 L
S
4 58.888 m
S
3.876 68.436 m
9.513 68.436 L
15.025 58.888 L
9.513 49.34 L
3.876 49.34 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Laurel.inner)
(Laurel.inner) 1 1 28.5392 28.5392 [
%AI3_Tile
(0 O 0 R 0 0.55 1 0.12 k
 0 0.55 1 0.12 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
19.2768 15.3585 m
28.9144 15.3585 L
28.9144 14.2335 L
19.2768 14.2335 L
19.2768 15.3585 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.55 1 0.3 k
 0 0.55 1 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
14.7461 18.9624 m
13.0264 17.8486 11.3273 14.4193 11.3273 10.0362 c
11.3273 5.6547 12.9768 2.1518 14.744 1.1112 C
14.7443 1.1112 L
16.4707 2.1518 18.1679 5.6547 18.1679 10.0362 c
18.1679 14.4143 16.432 17.8633 14.7461 18.9624 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Laurel.outer)
(Laurel.outer) 1 1.3751 28.5393 28.9143 [
%AI3_Tile
(0 O 0 R 0 0.55 1 0.12 k
 0 0.55 1 0.12 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
14.2395 10.6375 m
14.2395 1 L
15.3645 1 L
15.3645 10.6375 L
14.2395 10.6375 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.55 1 0.3 k
 0 0.55 1 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.5769 15.124 m
11.6906 16.8438 15.1198 18.5429 19.503 18.5429 c
23.8844 18.5429 27.3874 16.8935 28.428 15.1262 C
28.428 15.1259 L
27.3874 13.3995 23.8844 11.7023 19.503 11.7023 c
15.1249 11.7023 11.676 13.4382 10.5769 15.124 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Laurel.side)
(Laurel.side) 1.3972 1 28.9364 28.5392 [
%AI3_Tile
(0 O 0 R 0 0.55 1 0.12 k
 0 0.55 1 0.12 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
29.1571 15.2998 m
1 15.2998 L
1 14.1748 L
29.1571 14.1748 L
29.1571 15.2998 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.55 1 0.3 k
 0 0.55 1 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
2.0183 27.4787 m
1.5899 25.4751 2.8132 21.8488 5.9125 18.7494 c
9.0107 15.6513 12.654 14.3407 14.6395 14.8545 C
14.6398 14.8547 L
15.1246 16.8113 13.8478 20.4883 10.7496 23.5865 c
7.6538 26.6824 3.9876 27.8936 2.0183 27.4787 C
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.39 0.7 0.12 k
 0 0.39 0.7 0.12 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
2.0183 2.0091 m
1.5899 4.0126 2.8132 7.6389 5.9125 10.7382 c
9.0107 13.8365 12.654 15.147 14.6395 14.6332 C
14.6398 14.633 L
15.1246 12.6765 13.8478 8.9993 10.7496 5.9011 c
7.6538 2.8054 3.9876 1.5941 2.0183 2.0091 C
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.55 1 0.3 k
 0 0.55 1 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
15.821 2.0091 m
15.3925 4.0126 16.6159 7.6389 19.7152 10.7382 c
22.8134 13.8365 26.4567 15.147 28.4422 14.6332 C
28.4424 14.633 L
28.9273 12.6765 27.6505 8.9993 24.5523 5.9011 c
21.4565 2.8054 17.7903 1.5941 15.821 2.0091 C
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.39 0.7 0.12 k
 0 0.39 0.7 0.12 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
15.821 27.4787 m
15.3925 25.4751 16.6159 21.8488 19.7152 18.7494 c
22.8134 15.6513 26.4567 14.3407 28.4422 14.8545 C
28.4424 14.8547 L
28.9273 16.8113 27.6505 20.4883 24.5523 23.5865 c
21.4565 26.6824 17.7903 27.8936 15.821 27.4787 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves-fall)
(Leaves-fall) 1 1 52.733 89.816 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
52.733 89.816 m
52.733 1 L
1 1 L
1 89.816 L
52.733 89.816 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
25.317 2.083 m
25.994 2.283 26.284 2.435 V
24.815 5.147 29.266 9.428 30.186 10.168 C
30.787 9.943 30.907 7.41 30.23 6.073 C
31.073 6.196 33.262 4.818 34.02 3.529 C
34.085 4.217 35.655 7.158 36.481 7.535 C
35.561 7.933 34.896 9.406 34.134 10.854 C
35.156 11.021 36.555 10.1 38.026 9.195 C
38.541 9.996 39.915 10.968 41.174 11.484 C
40.086 12.171 39.591 12.912 39.094 14.372 C
38.052 13.806 35.865 13.657 35.336 13.944 C
35.85 15.057 38.096 15.6 38.827 15.547 C
38.573 16.409 38.425 18.562 38.598 21.155 C
36.939 19.839 35.393 18.522 33.734 18.58 C
34.003 17.158 33.367 15.353 32.99 14.86 C
32.417 15.604 32.006 16.431 32.361 18.408 C
30.908 18.893 29.671 19.439 28.297 20.697 C
28.297 18.866 27.725 17.664 26.857 16.388 C
28.117 15.9 29.389 14.697 29.385 13.658 C
28.537 13.81 26.845 14.554 26.352 15.547 C
25.634 14.8 23.95 13.491 22.346 13.487 C
23.534 12.632 24.454 11.598 24.549 9.686 C
25.802 10.657 28.255 11.272 29.635 10.674 C
24.794 6.438 25.262 3.405 25.317 2.083 C
f
12.412 33.743 m
11.887 33.272 11.691 33.01 V
14.182 31.192 11.928 25.366 11.415 24.303 C
10.776 24.247 9.369 26.988 9.405 28.486 C
8.273 27.73 6.608 27.851 5.006 28.137 C
5.578 27.049 5.177 25.104 4.376 24.303 C
5.378 24.339 6.729 23.624 8.038 22.643 C
7.203 21.823 5.376 21.984 3.46 22.643 C
3.46 21.27 2.638 19.533 1.801 18.351 C
3.117 18.408 4.262 17.722 5.12 16.691 C
5.785 18.26 7.819 19.373 8.725 19.324 C
8.742 17.959 7.169 15.869 6.147 15.47 C
6.747 14.801 7.766 13.27 8.725 10.854 C
9.524 12.78 10.694 14.022 11.927 14.955 C
10.785 16.517 10.959 17.388 11.358 18.866 C
12.101 18.325 13.132 17.893 13.303 15.89 C
15.02 16.176 16.156 16.104 17.653 15.203 C
17.198 16.865 17.195 18.466 17.515 20.166 C
15.665 20.026 14.105 20.239 13.075 21.728 C
13.905 21.955 16.165 22.014 17.039 21.082 C
17.366 22.064 18.261 23.47 19.707 24.164 C
18.267 24.424 17.282 25.523 16.373 27.209 C
15.66 25.793 13.433 24.128 11.93 24.073 C
13.933 28.137 13.933 31.055 12.412 33.743 C
f
31.125 30.5 m
31.445 31.128 31.648 31.385 V
34.045 29.444 38.851 32.752 39.746 33.521 C
39.636 34.153 37.511 35.29 35.794 34.26 C
36.234 35.549 35.332 37.51 34.134 38.552 C
35.873 38.451 38.019 39.813 38.541 40.555 C
38.763 39.577 39.946 38.307 41.231 37.293 C
41.582 38.266 40.887 40.384 39.971 41.986 C
41.206 42.487 42.318 43.417 42.776 44.676 C
43.233 43.359 44.236 42.685 45.58 41.929 C
44.421 40.502 43.64 38.328 43.92 37.465 C
45.243 37.8 46.814 40.518 46.937 41.607 C
47.812 40.841 49.366 40.154 51.947 39.848 C
50.246 38.77 49.884 36.778 49.3 35.347 C
48.152 35.794 45.983 35.853 45.008 35.29 C
45.721 34.711 47.061 34.16 49.071 34.146 C
49.071 32.601 49.534 31.469 50.788 30.254 C
49.065 30.267 46.965 29.781 45.469 29.389 C
45.221 30.718 44.378 32.314 43.233 32.715 C
43.227 31.854 43.493 29.605 44.378 28.938 C
43.513 28.37 42.26 26.993 41.803 25.276 C
41.181 26.601 40.32 27.906 38.457 28.35 C
39.642 29.403 40.477 31.42 40.143 32.887 C
35.091 28.905 32.414 30.203 31.125 30.5 C
f
25.317 46.491 m
25.994 46.691 26.284 46.843 V
24.815 49.556 29.266 53.837 30.186 54.576 C
30.787 54.351 30.907 51.818 30.23 50.482 C
31.073 50.605 33.262 49.227 34.02 47.938 C
34.085 48.625 35.655 51.566 36.481 51.944 C
35.561 52.341 34.896 53.814 34.134 55.263 C
35.156 55.43 36.555 54.508 38.026 53.603 C
38.541 54.404 39.915 55.377 41.174 55.892 C
40.086 56.579 39.591 57.321 39.094 58.78 C
38.052 58.215 35.865 58.065 35.336 58.353 C
35.85 59.465 38.096 60.008 38.827 59.955 C
38.573 60.817 38.425 62.97 38.598 65.563 C
36.939 64.247 35.393 62.931 33.734 62.988 C
34.003 61.567 33.367 59.761 32.99 59.268 C
32.417 60.012 32.006 60.839 32.361 62.817 C
30.908 63.302 29.671 63.847 28.297 65.106 C
28.297 63.274 27.725 62.073 26.857 60.796 C
28.117 60.308 29.389 59.106 29.385 58.067 C
28.537 58.219 26.845 58.963 26.352 59.955 C
25.634 59.209 23.95 57.899 22.346 57.895 C
23.534 57.041 24.454 56.006 24.549 54.094 C
25.802 55.065 28.255 55.68 29.635 55.083 C
24.794 50.846 25.262 47.814 25.317 46.491 C
f
12.412 78.151 m
11.887 77.68 11.691 77.418 V
14.182 75.601 11.928 69.774 11.415 68.711 C
10.776 68.655 9.369 71.396 9.405 72.894 C
8.273 72.138 6.608 72.259 5.006 72.545 C
5.578 71.458 5.177 69.512 4.376 68.711 C
5.378 68.747 6.729 68.032 8.038 67.052 C
7.203 66.231 5.376 66.393 3.46 67.052 C
3.46 65.678 2.638 63.941 1.801 62.759 C
3.117 62.817 4.262 62.13 5.12 61.1 C
5.785 62.669 7.819 63.781 8.725 63.732 C
8.742 62.367 7.169 60.277 6.147 59.878 C
6.747 59.209 7.766 57.678 8.725 55.263 C
9.524 57.189 10.694 58.431 11.927 59.364 C
10.785 60.925 10.959 61.796 11.358 63.274 C
12.101 62.734 13.132 62.301 13.303 60.298 C
15.02 60.584 16.156 60.512 17.653 59.612 C
17.198 61.273 17.195 62.874 17.515 64.574 C
15.665 64.434 14.105 64.648 13.075 66.136 C
13.905 66.363 16.165 66.422 17.039 65.49 C
17.366 66.472 18.261 67.878 19.707 68.572 C
18.267 68.832 17.282 69.931 16.373 71.617 C
15.66 70.202 13.433 68.536 11.93 68.482 C
13.933 72.545 13.933 75.464 12.412 78.151 C
f
31.125 74.908 m
31.445 75.537 31.648 75.794 V
34.045 73.853 38.851 77.161 39.746 77.929 C
39.636 78.562 37.511 79.698 35.794 78.668 C
36.234 79.957 35.332 81.918 34.134 82.96 C
35.873 82.86 38.019 84.221 38.541 84.963 C
38.763 83.986 39.946 82.716 41.231 81.701 C
41.582 82.675 40.887 84.792 39.971 86.394 C
41.206 86.895 42.318 87.825 42.776 89.084 C
43.233 87.768 44.236 87.093 45.58 86.337 C
44.421 84.91 43.64 82.736 43.92 81.873 C
45.243 82.208 46.814 84.926 46.937 86.016 C
47.812 85.249 49.366 84.563 51.947 84.257 C
50.246 83.179 49.884 81.187 49.3 79.756 C
48.152 80.203 45.983 80.262 45.008 79.698 C
45.721 79.119 47.061 78.569 49.071 78.554 C
49.071 77.009 49.534 75.877 50.788 74.663 C
49.065 74.675 46.965 74.189 45.469 73.798 C
45.221 75.126 44.378 76.723 43.233 77.123 C
43.227 76.262 43.493 74.013 44.378 73.347 C
43.513 72.779 42.26 71.401 41.803 69.684 C
41.181 71.009 40.32 72.314 38.457 72.759 C
39.642 73.812 40.477 75.829 40.143 77.295 C
35.091 73.313 32.414 74.611 31.125 74.908 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Polka dots)
(Polka dots) 1 1 29.8 29.8 [
%AI3_Tile
(0 O 0 R 0.45 0.9 0 0 k
 0.45 0.9 0 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
1 1 m
1 29.8 L
29.8 29.8 L
29.8 1 L
1 1 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.09 0.18 0 0 k
 0.09 0.18 0 0 K
) @
(
%AI6_BeginPatternLayer
*u
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
11.08 8.2 m
11.08 9.791 9.79 11.08 8.2 11.08 c
6.609 11.08 5.32 9.791 5.32 8.2 c
5.32 6.61 6.609 5.32 8.2 5.32 c
9.79 5.32 11.08 6.61 11.08 8.2 c
f
11.08 22.6 m
11.08 24.191 9.79 25.48 8.2 25.48 c
6.609 25.48 5.32 24.191 5.32 22.6 c
5.32 21.01 6.609 19.72 8.2 19.72 c
9.79 19.72 11.08 21.01 11.08 22.6 c
f
18.28 15.4 m
18.28 16.991 16.99 18.28 15.4 18.28 c
13.809 18.28 12.52 16.991 12.52 15.4 c
12.52 13.81 13.809 12.52 15.4 12.52 c
16.99 12.52 18.28 13.81 18.28 15.4 c
f
25.48 8.2 m
25.48 9.791 24.19 11.08 22.6 11.08 c
21.009 11.08 19.72 9.791 19.72 8.2 c
19.72 6.61 21.009 5.32 22.6 5.32 c
24.19 5.32 25.48 6.61 25.48 8.2 c
f
25.48 22.6 m
25.48 24.191 24.19 25.48 22.6 25.48 c
21.009 25.48 19.72 24.191 19.72 22.6 c
19.72 21.01 21.009 19.72 22.6 19.72 c
24.19 19.72 25.48 21.01 25.48 22.6 c
f
*U
26.92 1 m
29.8 1 L
29.8 3.88 L
28.209 3.88 26.92 2.591 26.92 1 C
f
15.4 3.88 m
13.809 3.88 12.52 2.591 12.52 1 C
18.28 1 L
18.28 2.591 16.99 3.88 15.4 3.88 c
f
1 3.88 m
1 1 L
3.88 1 L
3.88 2.591 2.59 3.88 1 3.88 C
f
26.92 15.4 m
26.92 13.81 28.209 12.52 29.8 12.52 C
29.8 18.28 L
28.209 18.28 26.92 16.991 26.92 15.4 c
f
15.4 18.28 m
13.809 18.28 12.52 16.991 12.52 15.4 c
12.52 13.81 13.809 12.52 15.4 12.52 c
16.99 12.52 18.28 13.81 18.28 15.4 c
18.28 16.991 16.99 18.28 15.4 18.28 c
f
3.88 15.4 m
3.88 16.991 2.59 18.28 1 18.28 C
1 12.52 L
2.59 12.52 3.88 13.81 3.88 15.4 c
f
29.8 26.92 m
29.8 29.8 L
26.92 29.8 L
26.92 28.21 28.209 26.92 29.8 26.92 C
f
15.4 26.92 m
16.99 26.92 18.28 28.21 18.28 29.8 C
12.52 29.8 L
12.52 28.21 13.809 26.92 15.4 26.92 c
f
3.88 29.8 m
1 29.8 L
1 26.92 L
2.59 26.92 3.88 28.21 3.88 29.8 C
f
8.2 11.08 m
6.609 11.08 5.32 9.791 5.32 8.2 c
5.32 6.61 6.609 5.32 8.2 5.32 c
9.79 5.32 11.08 6.61 11.08 8.2 c
11.08 9.791 9.79 11.08 8.2 11.08 c
f
22.6 11.08 m
21.009 11.08 19.72 9.791 19.72 8.2 c
19.72 6.61 21.009 5.32 22.6 5.32 c
24.19 5.32 25.48 6.61 25.48 8.2 c
25.48 9.791 24.19 11.08 22.6 11.08 c
f
8.2 25.48 m
6.609 25.48 5.32 24.191 5.32 22.6 c
5.32 21.01 6.609 19.72 8.2 19.72 c
9.79 19.72 11.08 21.01 11.08 22.6 c
11.08 24.191 9.79 25.48 8.2 25.48 c
f
22.6 25.48 m
21.009 25.48 19.72 24.191 19.72 22.6 c
19.72 21.01 21.009 19.72 22.6 19.72 c
24.19 19.72 25.48 21.01 25.48 22.6 c
25.48 24.191 24.19 25.48 22.6 25.48 c
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Random circles)
(Random circles) 4.365 3.849 51.13 57.85 [
%AI3_Tile
(0 O 0 R 0 0.1125 0.45 0 k
 0 0.1125 0.45 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
4.365 3.849 m
4.365 57.85 L
51.13 57.85 L
51.13 3.849 L
4.365 3.849 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4 0.7 1 0 k
 0.4 0.7 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
45.429 36.274 m
45.843 36.991 45.598 37.908 44.88 38.323 c
44.163 38.737 43.245 38.491 42.831 37.774 c
42.417 37.056 42.663 36.139 43.38 35.725 c
44.098 35.31 45.015 35.556 45.429 36.274 c
s
44.179 27.926 m
43.765 28.643 42.848 28.889 42.13 28.475 c
41.413 28.06 41.167 27.143 41.581 26.425 c
41.995 25.708 42.913 25.462 43.63 25.876 c
44.348 26.291 44.593 27.208 44.179 27.926 c
s
35.929 41.024 m
35.515 41.741 34.598 41.987 33.88 41.573 c
33.163 41.158 32.917 40.241 33.331 39.524 c
33.745 38.806 34.663 38.56 35.38 38.975 c
36.098 39.389 36.343 40.306 35.929 41.024 c
s
28.38 34.225 m
28.794 34.942 28.549 35.859 27.831 36.274 c
27.114 36.688 26.196 36.442 25.782 35.725 c
25.368 35.007 25.614 34.09 26.331 33.675 c
27.049 33.261 27.966 33.507 28.38 34.225 c
s
31.179 28.024 m
30.765 28.741 29.848 28.987 29.13 28.573 c
28.413 28.158 28.167 27.241 28.581 26.524 c
28.995 25.806 29.913 25.56 30.63 25.975 c
31.348 26.389 31.593 27.306 31.179 28.024 c
s
36.792 23.349 m
35.963 23.349 35.292 22.678 35.292 21.849 c
35.292 21.021 35.963 20.349 36.792 20.349 c
37.62 20.349 38.292 21.021 38.292 21.849 c
38.292 22.678 37.62 23.349 36.792 23.349 c
s
10.888 34.175 m
10.474 34.893 10.72 35.81 11.437 36.225 c
12.155 36.639 13.072 36.393 13.486 35.675 c
13.901 34.958 13.655 34.041 12.937 33.626 c
12.22 33.212 11.303 33.458 10.888 34.175 c
s
11.517 26.601 m
11.931 27.318 12.848 27.564 13.566 27.15 c
14.283 26.735 14.529 25.818 14.115 25.1 c
13.701 24.383 12.783 24.137 12.066 24.551 c
11.348 24.966 11.103 25.883 11.517 26.601 c
s
16.782 41.426 m
17.196 42.143 18.114 42.389 18.831 41.975 c
19.549 41.56 19.794 40.643 19.38 39.926 c
18.966 39.208 18.049 38.962 17.331 39.377 c
16.614 39.791 16.368 40.708 16.782 41.426 c
s
22.365 24.35 m
23.194 24.35 23.865 23.678 23.865 22.85 c
23.865 22.021 23.194 21.35 22.365 21.35 c
21.537 21.35 20.865 22.021 20.865 22.85 c
20.865 23.678 21.537 24.35 22.365 24.35 c
s
45.385 7.849 m
44.971 7.132 44.053 6.886 43.336 7.3 c
42.619 7.714 42.373 8.632 42.787 9.349 c
43.201 10.067 44.119 10.312 44.836 9.898 c
45.553 9.484 45.799 8.567 45.385 7.849 c
s
29.679 7.774 m
29.265 7.056 28.348 6.81 27.63 7.225 c
26.913 7.639 26.667 8.556 27.081 9.274 c
27.495 9.991 28.413 10.237 29.13 9.823 c
29.848 9.408 30.093 8.491 29.679 7.774 c
s
35.542 11.349 m
34.713 11.349 34.042 12.021 34.042 12.849 c
34.042 13.678 34.713 14.349 35.542 14.349 c
36.37 14.349 37.042 13.678 37.042 12.849 c
37.042 12.021 36.37 11.349 35.542 11.349 c
s
10.13 7.475 m
10.544 6.757 11.462 6.511 12.179 6.926 c
12.897 7.34 13.142 8.257 12.728 8.975 c
12.314 9.692 11.397 9.938 10.679 9.524 c
9.962 9.109 9.716 8.192 10.13 7.475 c
s
20.203 13.349 m
21.031 13.349 21.703 14.021 21.703 14.849 c
21.703 15.678 21.031 16.349 20.203 16.349 c
19.375 16.349 18.703 15.678 18.703 14.849 c
18.703 14.021 19.375 13.349 20.203 13.349 c
s
44.635 54.1 m
45.049 53.382 44.803 52.465 44.086 52.051 c
43.369 51.636 42.451 51.882 42.037 52.6 c
41.623 53.317 41.869 54.234 42.586 54.649 c
43.303 55.063 44.221 54.817 44.635 54.1 c
s
36.841 48.1 m
36.427 47.382 35.509 47.136 34.792 47.551 c
34.074 47.965 33.828 48.882 34.243 49.6 c
34.657 50.317 35.574 50.563 36.292 50.149 c
37.009 49.734 37.255 48.817 36.841 48.1 c
s
29.728 54.725 m
30.143 54.007 29.897 53.09 29.179 52.675 c
28.462 52.261 27.544 52.507 27.13 53.225 c
26.716 53.942 26.962 54.859 27.679 55.274 c
28.397 55.688 29.314 55.442 29.728 54.725 c
s
10.86 54.1 m
10.446 53.382 10.691 52.465 11.409 52.051 c
12.126 51.636 13.044 51.882 13.458 52.6 c
13.872 53.317 13.626 54.234 12.909 54.649 c
12.191 55.063 11.274 54.817 10.86 54.1 c
s
19.154 49.1 m
19.568 48.382 20.486 48.136 21.203 48.551 c
21.92 48.965 22.166 49.882 21.752 50.6 c
21.338 51.317 20.42 51.563 19.703 51.149 c
18.986 50.734 18.74 49.817 19.154 49.1 c
s
51.88 38.85 m
51.052 38.85 50.38 39.521 50.38 40.35 c
50.38 41.178 51.052 41.85 51.88 41.85 c
52.709 41.85 53.38 41.178 53.38 40.35 c
53.38 39.521 52.709 38.85 51.88 38.85 c
s
51.865 11.349 m
52.693 11.349 53.365 12.021 53.365 12.849 c
53.365 13.678 52.693 14.349 51.865 14.349 c
51.036 14.349 50.365 13.678 50.365 12.849 c
50.365 12.021 51.036 11.349 51.865 11.349 c
s
30.179 18.524 m
29.765 19.241 28.848 19.487 28.13 19.073 c
27.413 18.658 27.167 17.741 27.581 17.024 c
27.995 16.306 28.913 16.06 29.63 16.475 c
30.348 16.889 30.593 17.806 30.179 18.524 c
s
21.679 31.524 m
21.265 32.241 20.348 32.487 19.63 32.073 c
18.913 31.658 18.667 30.741 19.081 30.024 c
19.495 29.306 20.413 29.06 21.13 29.475 c
21.848 29.889 22.093 30.806 21.679 31.524 c
s
37.914 33.399 m
37.5 34.116 36.583 34.362 35.865 33.948 c
35.148 33.533 34.902 32.616 35.316 31.899 c
35.73 31.181 36.648 30.935 37.365 31.35 c
38.083 31.764 38.328 32.681 37.914 33.399 c
s
28.929 45.024 m
28.515 45.741 27.598 45.987 26.88 45.573 c
26.163 45.158 25.917 44.241 26.331 43.524 c
26.745 42.806 27.663 42.56 28.38 42.975 c
29.098 43.389 29.343 44.306 28.929 45.024 c
s
12.429 45.524 m
12.015 46.241 11.098 46.487 10.38 46.073 c
9.663 45.658 9.417 44.741 9.831 44.024 c
10.245 43.306 11.163 43.06 11.88 43.475 c
12.598 43.889 12.843 44.806 12.429 45.524 c
s
44.49 45.6 m
44.075 46.317 43.158 46.563 42.441 46.149 c
41.723 45.734 41.477 44.817 41.891 44.1 c
42.306 43.382 43.223 43.136 43.941 43.55 c
44.658 43.965 44.904 44.882 44.49 45.6 c
s
12.679 18.524 m
12.265 19.241 11.348 19.487 10.63 19.073 c
9.913 18.658 9.667 17.741 10.081 17.024 c
10.495 16.306 11.413 16.06 12.13 16.475 c
12.848 16.889 13.093 17.806 12.679 18.524 c
s
21.179 5.774 m
20.765 6.491 19.848 6.737 19.13 6.323 c
18.413 5.908 18.167 4.991 18.581 4.274 c
18.995 3.557 19.913 3.311 20.63 3.725 c
21.348 4.139 21.593 5.056 21.179 5.774 c
s
38.929 5.274 m
38.515 5.991 37.598 6.237 36.88 5.823 c
36.163 5.408 35.917 4.491 36.331 3.774 c
36.745 3.057 37.663 2.811 38.38 3.225 c
39.098 3.639 39.343 4.556 38.929 5.274 c
s
43.865 18.1 m
44.694 18.1 45.365 17.429 45.365 16.6 c
45.365 15.772 44.694 15.1 43.865 15.1 c
43.037 15.1 42.365 15.772 42.365 16.6 c
42.365 17.429 43.037 18.1 43.865 18.1 c
s
51.13 4.6 m
50.302 4.6 49.63 3.928 49.63 3.1 c
49.63 2.272 50.302 1.6 51.13 1.6 c
51.959 1.6 52.63 2.272 52.63 3.1 c
52.63 3.928 51.959 4.6 51.13 4.6 c
s
52.163 31.649 m
51.748 32.366 50.831 32.612 50.114 32.198 c
49.396 31.783 49.15 30.866 49.565 30.149 c
49.979 29.431 50.896 29.185 51.614 29.6 c
52.331 30.014 52.577 30.931 52.163 31.649 c
s
51.85 51.35 m
51.021 51.35 50.35 50.678 50.35 49.85 c
50.35 49.021 51.021 48.35 51.85 48.35 c
52.678 48.35 53.35 49.021 53.35 49.85 c
53.35 50.678 52.678 51.35 51.85 51.35 c
s
49.85 23.1 m
50.679 23.1 51.35 22.428 51.35 21.6 c
51.35 20.771 50.679 20.1 49.85 20.1 c
49.022 20.1 48.35 20.771 48.35 21.6 c
48.35 22.428 49.022 23.1 49.85 23.1 c
s
5.13 38.85 m
4.302 38.85 3.63 39.521 3.63 40.35 c
3.63 41.178 4.302 41.85 5.13 41.85 c
5.959 41.85 6.63 41.178 6.63 40.35 c
6.63 39.521 5.959 38.85 5.13 38.85 c
s
5.115 11.349 m
5.943 11.349 6.615 12.021 6.615 12.849 c
6.615 13.678 5.943 14.349 5.115 14.349 c
4.286 14.349 3.615 13.678 3.615 12.849 c
3.615 12.021 4.286 11.349 5.115 11.349 c
s
4.38 4.6 m
3.552 4.6 2.88 3.928 2.88 3.1 c
2.88 2.272 3.552 1.6 4.38 1.6 c
5.209 1.6 5.88 2.272 5.88 3.1 c
5.88 3.928 5.209 4.6 4.38 4.6 c
s
5.413 31.649 m
4.998 32.366 4.081 32.612 3.364 32.198 c
2.646 31.783 2.4 30.866 2.815 30.149 c
3.229 29.431 4.146 29.185 4.864 29.6 c
5.581 30.014 5.827 30.931 5.413 31.649 c
s
5.1 51.35 m
4.271 51.35 3.6 50.678 3.6 49.85 c
3.6 49.021 4.271 48.35 5.1 48.35 c
5.928 48.35 6.6 49.021 6.6 49.85 c
6.6 50.678 5.928 51.35 5.1 51.35 c
s
3.1 23.1 m
3.929 23.1 4.6 22.428 4.6 21.6 c
4.6 20.771 3.929 20.1 3.1 20.1 c
2.272 20.1 1.6 20.771 1.6 21.6 c
1.6 22.428 2.272 23.1 3.1 23.1 c
s
21.194 59.775 m
20.78 60.492 19.863 60.738 19.145 60.324 c
18.428 59.909 18.182 58.992 18.596 58.275 c
19.01 57.558 19.928 57.312 20.645 57.726 c
21.363 58.14 21.608 59.057 21.194 59.775 c
s
38.944 59.275 m
38.53 59.992 37.613 60.238 36.895 59.824 c
36.178 59.409 35.932 58.492 36.346 57.775 c
36.76 57.058 37.678 56.812 38.395 57.226 c
39.113 57.64 39.358 58.557 38.944 59.275 c
s
51.145 58.601 m
50.317 58.601 49.645 57.929 49.645 57.101 c
49.645 56.273 50.317 55.601 51.145 55.601 c
51.974 55.601 52.645 56.273 52.645 57.101 c
52.645 57.929 51.974 58.601 51.145 58.601 c
s
4.395 58.601 m
3.567 58.601 2.895 57.929 2.895 57.101 c
2.895 56.273 3.567 55.601 4.395 55.601 c
5.224 55.601 5.895 56.273 5.895 57.101 c
5.895 57.929 5.224 58.601 4.395 58.601 c
s
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Rope.side)
(Rope.side) 1 4.6 60.9998 33.3999 [
%AI3_Tile
(0 O 0 R 0 0 0 1 k
 0 0 0 1 K
) @
(
%AI6_BeginPatternLayer
0 i
1 J 1 j 0.6 w 4 M []0 d
%AI3_Note:
0 D
24.9999 7 m
15.6521 4.663 8.125 8.6981 1 14.1407 C
S
36.9999 7 m
22.3477 3.337 12.168 15.3276 1 23.859 C
S
48.9999 7 m
29.3464 2.0866 17.7386 25.3332 1 30.6213 C
S
1 30.9999 m
24.9999 36.9999 36.9999 1 60.9998 7 C
S
13 30.9999 m
32.6534 35.9133 44.2611 12.6667 60.9998 7.3786 C
S
24.9999 30.9999 m
39.652 34.6629 49.8317 22.6722 60.9998 14.1407 C
S
36.9999 30.9999 m
46.3476 33.3369 53.8749 29.3018 60.9998 23.859 C
S
48.9999 30.9999 m
53.3464 32.0865 57.2978 31.7908 60.9998 30.6213 C
S
13 7 m
8.6535 5.9134 4.7019 6.2091 1 7.3786 C
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Scales)
(Scales) 1.6 9.3475 48.088 55.8355 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
1.6 9.3475 m
1.6 55.8355 L
48.088 55.8355 L
48.088 9.3475 L
1.6 9.3475 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
17.0956 9.3475 m
12.8162 9.3475 9.3475 5.8787 9.3475 1.6 C
9.3475 5.8787 5.8787 9.3475 1.6 9.3475 C
1.6 13.6262 5.0687 17.095 9.3475 17.095 c
13.6268 17.095 17.0956 13.6262 17.0956 9.3475 C
s
32.5918 9.3475 m
28.3125 9.3475 24.8437 5.8787 24.8437 1.6 C
24.8437 5.8787 21.3743 9.3475 17.0956 9.3475 C
17.0956 13.6262 20.5644 17.095 24.8437 17.095 c
29.1224 17.095 32.5918 13.6262 32.5918 9.3475 C
s
48.088 9.3475 m
43.8087 9.3475 40.3399 5.8787 40.3399 1.6 C
40.3399 5.8787 36.8705 9.3475 32.5918 9.3475 C
32.5918 13.6262 36.0606 17.095 40.3399 17.095 c
44.6186 17.095 48.088 13.6262 48.088 9.3475 C
s
17.0956 40.3393 m
12.8162 40.3393 9.3475 36.8699 9.3475 32.5912 C
9.3475 36.8699 5.8787 40.3393 1.6 40.3393 C
1.6 44.6181 5.0687 48.0874 9.3475 48.0874 c
13.6268 48.0874 17.0956 44.6181 17.0956 40.3393 C
s
17.0956 24.8431 m
12.8162 24.8431 9.3475 21.3743 9.3475 17.095 C
9.3475 21.3743 5.8787 24.8431 1.6 24.8431 C
1.6 29.1218 5.0687 32.5912 9.3475 32.5912 c
13.6268 32.5912 17.0956 29.1218 17.0956 24.8431 C
s
32.5918 24.8431 m
28.3125 24.8431 24.8437 21.3743 24.8437 17.095 C
24.8437 21.3743 21.3743 24.8431 17.0956 24.8431 C
17.0956 29.1218 20.5644 32.5912 24.8437 32.5912 c
29.1224 32.5912 32.5918 29.1218 32.5918 24.8431 C
s
48.088 24.8431 m
43.8087 24.8431 40.3399 21.3743 40.3399 17.095 C
40.3399 21.3743 36.8705 24.8431 32.5918 24.8431 C
32.5918 29.1218 36.0606 32.5912 40.3399 32.5912 c
44.6186 32.5912 48.088 29.1218 48.088 24.8431 C
s
32.5918 40.3393 m
28.3125 40.3393 24.8437 36.8699 24.8437 32.5912 C
24.8437 36.8699 21.3743 40.3393 17.0956 40.3393 C
17.0956 44.6181 20.5644 48.0874 24.8437 48.0874 c
29.1224 48.0874 32.5918 44.6181 32.5918 40.3393 C
s
48.088 40.3393 m
43.8087 40.3393 40.3399 36.8699 40.3399 32.5912 C
40.3399 36.8699 36.8705 40.3393 32.5918 40.3393 C
32.5918 44.6181 36.0606 48.0874 40.3399 48.0874 c
44.6186 48.0874 48.088 44.6181 48.088 40.3393 C
s
17.0956 55.8355 m
12.8162 55.8355 9.3475 52.3662 9.3475 48.0874 C
9.3475 52.3662 5.8787 55.8355 1.6 55.8355 C
1.6 60.1143 5.0687 63.5836 9.3475 63.5836 c
13.6268 63.5836 17.0956 60.1143 17.0956 55.8355 C
s
32.5918 55.8355 m
28.3125 55.8355 24.8437 52.3662 24.8437 48.0874 C
24.8437 52.3662 21.3743 55.8355 17.0956 55.8355 C
17.0956 60.1143 20.5644 63.5836 24.8437 63.5836 c
29.1224 63.5836 32.5918 60.1143 32.5918 55.8355 C
s
48.088 55.8355 m
43.8087 55.8355 40.3399 52.3662 40.3399 48.0874 C
40.3399 52.3662 36.8705 55.8355 32.5918 55.8355 C
32.5918 60.1143 36.0606 63.5836 40.3399 63.5836 c
44.6186 63.5836 48.088 60.1143 48.088 55.8355 C
s
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (SolidStar.side)
(SolidStar.side) 1 1 33.0117 33.0117 [
%AI3_Tile
(0 O 0 R 0.05 0.2 0.95 0 k
 0.05 0.2 0.95 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
7.9689 26.0458 m
14.5331 22.9874 l
17.0095 29.7904 L
19.4859 22.9874 l
26.0473 26.0458 l
22.9889 19.4815 l
29.792 17.0052 l
22.9889 14.5288 l
26.0473 7.9674 l
19.4859 11.0257 l
17.0095 4.2226 l
14.5305 11.0257 l
7.9689 7.9674 l
11.0273 14.5288 l
4.2242 17.0052 l
11.0273 19.4843 L
7.9689 26.0458 l
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stars)
(Stars) 1 1 63.384 84.766 [
%AI3_Tile
(0 O 0 R 1 0.9 0.1 0 k
 1 0.9 0.1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
1 1 m
1 84.766 L
63.384 84.766 L
63.384 1 L
1 1 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.25 1 0 k
 0 0.25 1 0 K
) @
(
%AI6_BeginPatternLayer
*u
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
37.668 67.113 m
43.924 62.567 L
41.535 55.213 L
47.791 59.757 L
54.046 55.212 L
51.657 62.566 L
57.914 67.112 L
50.18 67.112 L
47.791 74.467 L
45.402 67.113 L
37.668 67.113 L
f
16.596 59.757 m
22.851 55.212 L
20.462 62.566 L
26.719 67.112 L
18.985 67.112 L
16.596 74.467 L
14.207 67.113 L
6.473 67.113 L
12.729 62.567 L
10.34 55.213 L
16.596 59.757 L
f
20.462 20.683 m
26.719 25.229 L
18.985 25.229 L
16.596 32.584 L
14.207 25.23 L
6.473 25.23 L
12.729 20.684 L
10.34 13.33 L
16.596 17.874 L
22.851 13.329 L
20.462 20.683 L
f
38.447 34.271 m
36.058 41.625 L
42.315 46.171 L
34.581 46.171 L
32.192 53.526 L
29.803 46.172 L
22.069 46.172 L
28.325 41.626 L
25.936 34.272 L
32.192 38.816 L
38.447 34.271 L
f
51.657 20.683 m
57.914 25.229 L
50.18 25.229 L
47.791 32.584 L
45.402 25.23 L
37.668 25.23 L
43.924 20.684 L
41.535 13.33 L
47.791 17.874 L
54.046 13.329 L
51.657 20.683 L
f
*U
34.581 4.288 m
32.192 11.643 L
29.803 4.289 L
22.069 4.289 L
26.5962 1 L
37.7885 1 L
42.315 4.288 L
34.581 4.288 L
f
53.261 4.289 m
57.7882 1 L
63.384 1 L
63.384 11.643 L
60.995 4.289 L
53.261 4.289 L
f
4.866 41.625 m
11.123 46.171 L
3.389 46.171 L
1 53.526 L
1 38.816 L
7.255 34.271 L
4.866 41.625 L
f
36.058 41.625 m
42.315 46.171 L
34.581 46.171 L
32.192 53.526 L
29.803 46.172 L
22.069 46.172 L
28.325 41.626 L
25.936 34.272 L
32.192 38.816 L
38.447 34.271 L
36.058 41.625 L
f
53.261 46.172 m
59.517 41.626 L
57.128 34.272 L
63.384 38.816 L
63.384 53.526 L
60.995 46.172 L
53.261 46.172 L
f
4.866 83.508 m
6.5974 84.766 L
1 84.766 L
1 80.699 L
7.255 76.154 L
4.866 83.508 L
f
25.936 76.155 m
32.192 80.699 L
38.447 76.154 L
36.058 83.508 L
37.7895 84.766 L
26.5951 84.766 L
28.325 83.509 L
25.936 76.155 L
f
22.851 55.212 m
20.462 62.566 L
26.719 67.112 L
18.985 67.112 L
16.596 74.467 L
14.207 67.113 L
6.473 67.113 L
12.729 62.567 L
10.34 55.213 L
16.596 59.757 L
22.851 55.212 L
f
41.535 55.213 m
47.791 59.757 L
54.046 55.212 L
51.657 62.566 L
57.914 67.112 L
50.18 67.112 L
47.791 74.467 L
45.402 67.113 L
37.668 67.113 L
43.924 62.567 L
41.535 55.213 L
f
50.18 25.229 m
47.791 32.584 L
45.402 25.23 L
37.668 25.23 L
43.924 20.684 L
41.535 13.33 L
47.791 17.874 L
54.046 13.329 L
51.657 20.683 L
57.914 25.229 L
50.18 25.229 L
f
18.985 25.229 m
16.596 32.584 L
14.207 25.23 L
6.473 25.23 L
12.729 20.684 L
10.34 13.33 L
16.596 17.874 L
22.851 13.329 L
20.462 20.683 L
26.719 25.229 L
18.985 25.229 L
f
3.388 4.289 m
1 11.643 L
1 1 L
6.5948 1 L
11.122 4.289 L
3.388 4.289 L
f
57.128 76.154 m
63.384 80.699 L
63.384 84.766 L
57.7855 84.766 L
59.517 83.508 L
57.128 76.154 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (TriBevel.outer)
(TriBevel.outer) 1 1.0004 31.6124 31.6127 [
%AI3_Tile
(0 O 0 R 0 0 0 0.3 k
 0 0 0 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
31.6118 5.4917 m
27.1221 5.4917 L
27.1205 1.0011 L
27.8031 1.0011 L
27.8031 4.8091 L
31.6118 4.8091 L
31.6118 5.4917 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.2 k
 0 0 0 0.2 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
31.6149 9.5062 m
23.1111 9.5062 L
23.1111 1.0015 L
27.1205 1.0015 L
27.1205 5.493 L
31.6144 5.493 L
31.6149 9.5062 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.4 k
 0 0 0 0.4 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
31.6124 10.485 m
22.1297 10.485 L
22.1292 1.0015 L
23.1084 1.0015 L
23.1084 9.5049 L
31.6124 9.5049 L
31.6124 10.485 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.3 k
 0 0 0 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
31.6129 17.2066 m
15.4064 17.2085 L
15.4064 1 L
22.1301 1 L
22.1301 10.4868 L
31.6129 10.4868 L
31.6129 17.2066 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.5 k
 0 0 0 0.5 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
31.6149 18.3658 m
14.2517 18.3658 L
14.2515 1.0009 L
15.4043 1.0009 L
15.4043 17.2093 L
31.6149 17.2093 L
31.6149 18.3658 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.4 k
 0 0 0 0.4 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
31.6124 30.4755 m
2.1395 30.4755 L
2.1395 1.0015 L
14.249 1 L
14.249 18.366 L
31.6149 18.366 L
31.6124 30.4755 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.6 k
 0 0 0 0.6 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
15.4066 16.847 m
14.2778 18.3257 l
15.4066 17.2057 l
15.4066 16.847 l
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.5 k
 0 0 0 0.5 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
23.1095 9.1906 m
22.1759 10.4392 l
23.1082 9.505 l
23.1095 9.1906 l
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.4 k
 0 0 0 0.4 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
27.8039 4.6026 m
27.1619 5.4533 l
27.8029 4.8093 l
27.8039 4.6026 l
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (TriBevel.side)
(TriBevel.side) 1.0006 1 29.0006 31.6124 [
%AI3_Tile
(0 O 0 R 0 0 0 0.3 k
 0 0 0 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
29 4.8087 m
29 4.8087 L
29.0026 5.4927 L
1.0026 5.4927 L
1 4.8087 L
1 4.8087 L
29 4.8087 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.2 k
 0 0 0 0.2 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
29.0026 5.4927 m
29.0005 9.5045 L
1.0005 9.5045 L
1.0026 5.4927 L
29.0026 5.4927 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.4 k
 0 0 0 0.4 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
29.0005 9.5045 m
29.0011 10.4865 L
1.0011 10.4865 L
1.0005 9.5045 L
29.0005 9.5045 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.3 k
 0 0 0 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
29.0011 10.4865 m
29.003 17.209 L
1.003 17.209 L
1.0011 10.4865 L
29.0011 10.4865 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.5 k
 0 0 0 0.5 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
29.003 17.209 m
29.0031 18.3656 L
1.0031 18.3656 L
1.003 17.209 L
29.003 17.209 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.4 k
 0 0 0 0.4 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
29.0031 18.3656 m
29.0006 30.4752 L
1.0006 30.4752 L
1.0031 18.3656 L
29.0031 18.3656 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Waves-scroll)
(Waves-scroll) 17.926 10.516 68.663 69.012 [
%AI3_Tile
(0 O 0 R 1 0 0.3 0 k
 1 0 0.3 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
17.926 69.012 m
17.926 10.516 L
68.663 10.516 L
68.663 69.012 L
17.926 69.012 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.55 0 0 0 k
 0.55 0 0 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
65.335 70.465 m
65.881 68.746 67.444 68.168 68.663 69.012 C
67.538 69.668 68.011 71.255 69.686 70.933 c
72.124 70.464 71.894 67.213 70.53 65.589 c
68.561 63.245 64.565 60.995 53.241 71.117 C
S
39.964 70.465 m
40.511 68.746 42.074 68.168 43.293 69.012 C
42.168 69.668 42.64 71.255 44.316 70.933 c
46.753 70.464 46.524 67.213 45.16 65.589 c
43.191 63.245 39.195 60.995 27.87 71.117 c
S
14.594 70.465 m
15.141 68.746 16.704 68.168 17.923 69.012 C
16.798 69.668 17.27 71.255 18.945 70.933 c
21.382 70.464 21.153 67.213 19.789 65.589 c
17.821 63.245 13.825 60.995 2.5 71.117 c
S
10.959 51.619 m
22.282 41.497 26.278 43.747 28.247 46.09 c
29.611 47.715 29.841 50.965 27.403 51.434 c
25.728 51.757 25.255 50.169 26.38 49.513 C
25.161 48.669 23.599 49.248 23.052 50.966 c
22.723 51.997 23.38 53.966 24.872 54.903 c
27.267 56.406 31.371 56.05 36.328 51.619 c
47.653 41.497 51.649 43.746 53.618 46.09 c
54.982 47.715 55.212 50.965 52.774 51.434 c
51.099 51.757 50.626 50.169 51.751 49.513 C
50.532 48.669 48.97 49.248 48.423 50.966 c
48.094 51.997 48.751 53.966 50.243 54.903 c
52.638 56.406 56.742 56.05 61.699 51.619 C
73.024 41.497 77.02 43.747 78.988 46.09 c
S
70.156 32.12 m
65.199 36.551 61.095 36.907 58.7 35.404 c
57.208 34.468 56.552 32.499 56.88 31.468 c
57.427 29.749 58.99 29.171 60.208 30.015 C
59.083 30.671 59.556 32.258 61.231 31.936 c
63.669 31.467 63.439 28.216 62.075 26.592 c
60.106 24.248 56.11 21.998 44.786 32.12 C
39.829 36.551 35.725 36.907 33.33 35.404 c
31.838 34.468 31.182 32.499 31.51 31.468 c
32.056 29.749 33.619 29.171 34.838 30.015 C
33.713 30.671 34.186 32.258 35.861 31.936 c
38.299 31.467 38.069 28.216 36.705 26.592 c
34.737 24.248 30.74 21.998 19.415 32.12 c
14.458 36.551 10.354 36.907 7.96 35.404 c
S
19.792 7.094 m
21.157 8.719 21.386 11.968 18.949 12.437 c
17.274 12.76 16.801 11.172 17.926 10.516 C
16.708 9.673 15.145 10.252 14.598 11.969 c
14.27 13 14.926 14.969 16.418 15.906 c
18.812 17.409 22.916 17.053 27.874 12.622 c
39.199 2.5 43.195 4.75 45.163 7.094 c
46.528 8.719 46.757 11.968 44.32 12.437 c
42.644 12.76 42.172 11.172 43.297 10.516 C
42.078 9.673 40.515 10.252 39.968 11.969 c
39.64 13 40.297 14.969 41.788 15.906 c
44.183 17.409 48.287 17.053 53.245 12.622 C
64.569 2.5 68.565 4.75 70.534 7.094 c
71.898 8.719 72.127 11.968 69.69 12.437 c
68.014 12.76 67.542 11.172 68.667 10.516 C
67.448 9.673 65.885 10.252 65.338 11.969 c
65.011 13 65.667 14.969 67.159 15.906 c
69.553 17.409 73.657 17.053 78.615 12.622 c
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 O
0 0 0 0.23 k
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
194.8623 539.7446 m
196.3623 568.7446 l
484.3623 568.7446 l
482.8623 539.7446 l
194.8623 539.7446 l
f
0 0 0 0.16 k
230.5537 616.5249 m
230.5537 616.5249 L
217.5537 649.5249 199.7803 678.6758 164.4746 673.5894 c
144.8076 670.7559 126.9746 651.0894 113.4746 609.0894 c
103.0371 576.6172 99.9746 537.0894 110.4746 504.0894 c
119.5361 475.6089 117.9746 483.0894 125.4746 468.0894 C
196.5659 574.5796 230.5537 616.5249 V
f
0 R
0 0 0 1 K
2 w
383.5898 552.2446 m
383.5898 478.4365 418.2559 418.6016 461.0176 418.6016 c
503.7793 418.6016 538.4453 478.4365 538.4453 552.2446 c
538.4453 626.0527 503.7793 685.8877 461.0176 685.8877 c
418.2559 685.8877 383.5898 626.0527 383.5898 552.2446 c
s
4 w
506.1123 634.7446 m
420.1123 634.7446 l
S
408.1123 634.7446 m
404.6123 634.7446 l
S
392.1123 634.7446 m
269.7676 634.7446 l
266.168 631.771 261.8169 627.4419 256.8789 622.0034 c
S
248.3081 612.1616 m
239.2817 601.4292 228.9282 588.0957 217.9575 573.2285 c
S
[3 6 ]0 d
210.9497 563.6392 m
205.7832 556.5039 200.5171 549.0898 195.2222 541.5024 c
S
[]0 d
195.2222 541.5024 m
179.9624 519.6362 164.457 496.3257 150.3774 474.0771 c
S
142.7246 461.8608 m
125.6865 434.376 111.4136 409.3228 103.2676 391.7446 c
391.2676 391.7446 l
419.7676 453.2446 523.2676 606.2446 557.7676 634.7446 c
528.1123 634.7446 l
S
3 w
415.3623 467.4946 m
444.1357 513.3979 486.3594 574.7349 520.3467 616.6802 C
520.3467 616.6802 L
507.3467 649.6802 489.5732 678.8311 454.2676 673.7446 c
434.6006 670.9111 416.7676 651.2446 403.2676 609.2446 c
392.8301 576.772 389.7676 537.2446 400.2676 504.2446 c
409.3291 475.7642 407.7676 483.2446 415.2676 468.2446 c
406.6123 468.2446 l
S
392.6123 468.2446 m
127.2676 468.2446 l
119.7676 483.2446 121.3291 475.7642 112.2676 504.2446 c
101.7676 537.2446 104.8301 576.772 115.2676 609.2446 c
128.7676 651.2446 146.6006 670.9111 166.2676 673.7446 c
201.5732 678.8311 219.3472 649.6802 232.3472 616.6802 C
232.3472 616.6802 L
198.3589 574.7349 155.8735 516.2529 127.0996 470.3496 c
S
1.5 w
454.1123 539.2446 m
400.6123 539.2446 l
S
389.6123 539.2446 m
387.1123 539.2446 l
S
376.1123 539.2446 m
194.2676 539.2446 l
195.7676 568.2446 l
377.6123 568.2446 l
S
387.1123 568.2446 m
390.6123 568.2446 l
S
400.6123 568.2446 m
483.7676 568.2446 l
482.2676 539.2446 l
470.6123 539.2446 l
S
3 w
433.1123 450.2446 m
437.6123 439.2446 443.2676 432.7446 449.7676 430.2446 c
460.541 426.1006 470.7676 428.2446 481.7676 434.2446 c
492.7676 440.2446 506.2676 458.7446 513.2676 471.2446 c
520.2676 483.7446 527.2676 508.2446 529.2676 526.2446 c
531.042 542.2158 533.5176 561.2446 528.7676 586.7446 C
515.2676 571.2446 447.1123 476.2446 433.1123 450.2446 C
s
2 w
239.001 622.2056 m
231.9028 642.1079 221.8667 658.5552 209.936 669.7466 c
S
194.8926 680.4795 m
187.9561 683.9995 180.6143 685.8877 173.0176 685.8877 c
130.2559 685.8877 95.5894 626.0527 95.5894 552.2446 c
95.5894 478.4365 130.2559 418.6016 173.0176 418.6016 c
180.6147 418.6016 187.9561 420.4902 194.8936 424.0103 c
S
207.8364 432.8452 m
208.749 433.6396 209.6514 434.4639 210.543 435.3184 c
S
210.543 435.3184 m
213.2598 437.9219 215.877 440.7993 218.3809 443.9292 c
S
218.3809 443.9292 m
218.9126 444.5938 219.4395 445.2695 219.9604 445.9565 c
S
225.3379 453.729 m
227.3062 456.8452 229.1812 460.1348 230.9541 463.584 c
S
235.4966 473.2939 m
242.8965 490.7109 247.9111 511.3369 249.709 533.7368 c
S
250.3262 544.7524 m
250.4053 547.2324 250.4458 549.7305 250.4458 552.2446 c
250.4458 556.1118 250.3506 559.9404 250.1641 563.7246 c
S
249.4033 574.2236 m
249.1245 577.1318 248.7915 580.0088 248.4058 582.8501 c
S
246.9077 592.2988 m
245.5503 599.7661 243.8232 606.9517 241.7642 613.791 c
S
3 w [3 6 ]0 d
223.3511 563.9355 m
219.1387 558.1641 214.4707 551.6733 209.5698 544.7749 C
S
[]0 d
202.3604 534.5728 m
188.0957 514.2788 172.8301 491.9468 161.4951 474.4956 C
S
155.0737 464.4575 m
151.4443 458.6768 148.5327 453.8115 146.6123 450.2446 C
147.041 448.2432 147.6211 446.3691 148.3237 444.6289 c
S
154.0078 435.6177 m
156.3838 433.0977 159.0674 431.2832 161.7676 430.2446 c
172.5415 426.1006 182.7676 428.2446 193.7676 434.2446 c
194.8389 434.8291 195.9341 435.5322 197.0449 436.3369 c
S
204.9077 443.3496 m
205.8901 444.3716 206.8696 445.4399 207.8413 446.5435 c
S
215.2383 455.7803 m
216.9502 458.1104 218.5801 460.4629 220.0894 462.7598 c
S
226.8901 474.3535 m
233.3208 487.4976 239.4224 509.6377 241.2676 526.2446 c
241.5713 528.9795 241.896 531.8042 242.2012 534.7358 C
S
242.9741 543.2563 m
243.4316 549.3984 243.6738 556.0083 243.4048 563.2139 C
S
242.7642 572.7104 m
242.3286 577.165 241.6821 581.835 240.7676 586.7446 C
238.4956 584.1362 234.7183 579.2764 229.9399 572.8726 C
S
2 w
461.0176 685.8877 m
173.0176 685.8877 l
S
461.0176 418.6016 m
412.6123 418.6016 l
S
397.6123 418.6016 m
173.0176 418.6016 l
S
3 w
520.3467 616.6802 m
412.6123 616.6802 l
S
401.6123 616.6802 m
398.1123 616.6802 l
S
387.1123 616.6802 m
232.3472 616.6802 l
S
106.1123 341.2441 m
S
394.1123 341.2441 m
S
528.8623 587.4946 m
523.1133 587.48 l
S
509.6143 587.4443 m
504.6143 587.4316 l
S
489.6133 587.3926 m
404.6133 587.1714 l
S
393.1123 587.1411 m
389.6123 587.1323 l
S
379.6133 587.106 m
240.7676 586.7446 l
S
1 w
531.1123 609.2446 m
521.1133 609.1406 l
S
505.6143 608.979 m
411.1045 607.9946 l
S
398.1123 607.8594 m
394.1113 607.8174 l
S
382.6074 607.6978 m
243.1123 606.2446 l
S
417.7793 440.9111 m
132.4458 439.5781 l
S
3 w
433.1123 450.2446 m
429.6123 450.2476 l
S
404.1123 450.27 m
147.3623 450.4946 l
S
418.4453 450.9111 m
416.4453 450.9111 l
S
458.4453 427.5781 m
443.1094 427.2905 l
S
425.1094 427.354 m
417.7793 427.3804 l
S
401.7793 427.4365 m
173.1123 428.2446 l
S
460.1123 675.2446 m
440.4453 675.2446 l
S
422.4453 675.2446 m
176.1123 675.2446 l
S
0 To
1 0 0 1 403.666 377.666 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 24 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(F) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 547.666 520 0 Tp
TP
0 Tr
(T) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 454 647.3335 0 Tp
TP
0 Tr
(T) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 486 491.3335 0 Tp
TP
0 Tr
(T) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 463.334 642 0 Tp
TP
0 Tr
/_Helvetica 14 Tf
(1) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 498 486.6665 0 Tp
TP
0 Tr
(2) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 80 554 0 Tp
TP
0 Tr
(0) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 58 559 0 Tp
TP
0 Tr
/_Helvetica 24 Tf
(M) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 291.168 544.5278 0 Tp
TP
0 Tr
(A') Tx 1 0 Tk
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1322 4261 a(Figure)f(14)100 4433 y(If)32
b Fl(M)268 4445 y Fj(0)336 4433 y Fm(\022)f Fl(X)7 b
Fp(\()p Fl(K)f Fp(\),)33 b(then)g(at)f(least)g(one)g(of)g(the)h(ann)n
(uli)f Fl(A)1926 4445 y Fi(i)1986 4433 y Fp(lies)g(in)h
Fl(M)2317 4445 y Fj(0)2354 4433 y Fp(;)i(c)n(ho)r(ose)c(one)h(that)0
4533 y(is)i(outermost)f(in)i Fl(M)674 4545 y Fj(0)711
4533 y Fp(.)56 b(Then)35 b Fl(@)5 b(N)k Fp(\()p Fl(T)33
b Fm([)24 b Fl(A)1394 4545 y Fi(i)1422 4533 y Fp(\))34
b(consists)g(of)g(t)n(w)n(o)f(tori)h Fl(T)2278 4545 y
Fj(1)2349 4533 y Fp(and)g Fl(T)2566 4545 y Fj(2)2603
4533 y Fp(,)i(whic)n(h)e(lie)0 4633 y(in)k Fl(X)7 b Fp(\()p
Fl(L)p Fp(\),)40 b(since)e Fl(\015)k Fp(is)c(disjoin)n(t)g(from)g
Fl(F)49 b Fp(\(Figure)38 b(14\).)67 b(Because)37 b Fl(A)2276
4645 y Fi(i)2342 4633 y Fp(is)h(outermost,)h(one)0 4732
y(of)33 b(these)g(tori,)h(sa)n(y)e Fl(T)703 4744 y Fj(1)740
4732 y Fp(,)i(is)f(disjoin)n(t)g(from)g Fl(F)12 b Fp(.)53
b(The)33 b(argumen)n(t)f(of)h(Prop)r(osition)e(3)i(of)g([Br1])0
4832 y(applies)c(without)g(c)n(hange)f(to)g(sho)n(w)g(that)i
Fl(T)1405 4844 y Fj(1)1470 4832 y Fp(cannot)f(b)r(e)g
Fl(@)5 b Fp(-parallel)27 b(in)i Fl(X)7 b Fp(\()p Fl(L)p
Fp(\),)29 b(and)g(if)g Fl(T)2867 4844 y Fj(1)2933 4832
y Fp(is)0 4932 y(compressible)21 b(in)h Fl(X)7 b Fp(\()p
Fl(L)p Fp(\),)22 b(then)g(it)g(b)r(ounds)g(a)g(solid)f(torus)g(in)h
Fl(X)7 b Fp(\()p Fl(L)p Fp(\),)23 b(and)e(the)h(solid)g(torus)f(ma)n(y)
0 5031 y(b)r(e)29 b(used)f(to)g(isotop)r(e)g Fl(T)39
b Fp(in)29 b Fl(X)7 b Fp(\()p Fl(L)p Fp(\))28 b(to)g(reduce)g(the)g(n)n
(um)n(b)r(er)g(of)h(curv)n(es)e(of)h Fl(F)j Fm(\\)19
b Fl(T)12 b Fp(.)38 b(Therefore)p eop
%%Page: 15 15
15 14 bop 750 42 a Fn(Unique)24 b(minimal)c(gen)n(us)25
b(Seifert)e(surfaces)h(and)g(depth)657 b(15)0 241 y Fp(either)26
b Fl(T)283 253 y Fj(1)347 241 y Fp(is)g(essen)n(tial)g(in)h
Fl(X)7 b Fp(\()p Fl(L)p Fp(\))26 b(and)g(disjoin)n(t)h(from)f
Fl(F)12 b Fp(,)27 b(or)f(w)n(e)g(can)g(reduce)h(the)g(n)n(um)n(b)r(er)f
(of)0 340 y(circles)h(of)g(in)n(tersection)g(of)h Fl(T)38
b Fp(with)28 b Fl(F)12 b Fp(.)100 441 y(If)34 b Fl(K)k
Fm(\022)33 b Fl(M)477 453 y Fj(0)513 441 y Fp(,)i(then)f(the)g(argumen)
n(t)f(of)g(Prop)r(osition)f(3)h(of)h([Br1])e(applies)i(to)f(sho)n(w)g
(that)0 540 y Fl(T)f Fm(\\)21 b Fl(F)44 b Fp(consists)30
b(of)i(more)e(than)i(t)n(w)n(o)f(comp)r(onen)n(ts,)g(so)g(one)g(of)h
(the)f(ann)n(uli)h Fl(A)2541 552 y Fi(i)2600 540 y Fp(lies)f(in)h
Fl(M)2929 552 y Fj(0)2966 540 y Fp(.)0 640 y(Then)39
b(w)n(e)f(ma)n(y)g(rep)r(eat)g(the)h(argumen)n(t)f(of)g(the)h(previous)
f(paragraph)e(to)j(\014nd)g(either)f(an)0 740 y(essen)n(tial)28
b(torus)g Fl(T)595 752 y Fj(1)661 740 y Fp(disjoin)n(t)h(from)g
Fl(F)41 b Fp(or)28 b(reduce)h(the)g(n)n(um)n(b)r(er)g(of)g(in)n
(tersections)f(of)h Fl(T)40 b Fp(with)0 839 y Fl(F)12
b Fp(.)100 966 y(Therefore,)42 b(b)n(y)f(rep)r(eatedly)f(applying)g
(these)h(argumen)n(ts,)i(w)n(e)d(ev)n(en)n(tually)g(obtain)g(an)0
1065 y(essen)n(tial)29 b(torus)g(in)i Fl(X)7 b Fp(\()p
Fl(L)p Fp(\))29 b(\(whic)n(h)h(w)n(e)g(will)g(still)g(call)g
Fl(T)12 b Fp(\))29 b(disjoin)n(t)h(from)g Fl(F)12 b Fp(.)44
b(W)-7 b(e)30 b(then)h(lo)r(ok)0 1165 y(at)i(the)g(in)n(tersection)f
(of)h Fl(T)44 b Fp(with)33 b(the)g(ann)n(ulus)f Fl(Q)h
Fp(lying)f(b)r(et)n(w)n(een)h Fl(\015)38 b Fp(and)32
b Fl(@)5 b(N)k Fp(\()p Fl(F)j Fp(\))33 b(\(Figure)0 1264
y(15\))27 b(whic)n(h)i(is)f(the)g(in)n(tersection)f(with)i
Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\))28 b(of)g(a)g(disk)g
Fl(D)i Fp(in)e Fl(S)2069 1234 y Fj(3)2106 1264 y Fp(.)39
b(After)28 b(isotop)n(y)f(in)h Fl(X)7 b Fp(\()p Fl(L)p
Fp(\),)0 1364 y(b)n(y)25 b(the)g(incompressibilit)n(y)f(of)h
Fl(T)36 b Fp(w)n(e)24 b(ma)n(y)h(assume)f(that)h(the)g(in)n(tersection)
g(consists)f(of)h(lo)r(ops)0 1464 y(essen)n(tial)k(in)h
Fl(Q)p Fp(.)42 b(If)30 b Fl(T)h Fm(\\)20 b Fl(Q)26 b
Fm(6)p Fp(=)g Fm(;)p Fp(,)k(c)n(ho)r(ose)f(an)g(outermost)g(lo)r(op)g
(of)g(in)n(tersection,)h(cutting)g(o\013)0 1563 y(an)g(ann)n(ulus)g
Fl(Q)494 1533 y Fh(0)548 1563 y Fp(from)g Fl(Q)g Fp(with)h(one)f(b)r
(oundary)g(comp)r(onen)n(t)g(equal)g(to)h Fl(\015)5 b
Fp(.)45 b(By)30 b(isotoping)g Fl(T)0 1663 y Fp(across)c
Fl(Q)312 1633 y Fh(0)362 1663 y Fp(\(and)i(therefore)f(across)e
Fl(\015)5 b Fp(\),)28 b(w)n(e)f(obtain)g(a)h(new)f(torus)g
Fl(T)2175 1633 y Fh(0)2225 1663 y Fp(in)h Fl(X)7 b Fp(\()p
Fl(L)p Fp(\).)534 2687 y @beginspecial 233 @llx 337 @lly
787 @urx 601 @ury 2304 @rwi @setspecial
%%BeginDocument: d_fig15.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig15.eps)
%%CreationDate: (9/10/2002) (10:25 AM)
%%BoundingBox: 233 337 787 601
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%+ Symbol
%%DocumentNeededFonts: Helvetica
%%+ Symbol
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%%CMYKCustomColor: 1 0 0.55 0 (Aqua)
%%+ 1 0.5 0 0 (Blue)
%%+ 0.5 0.4 0.3 0 (Blue Gray)
%%+ 0.8 0.05 0 0 (Blue Sky)
%%+ 0.5 0.85 1 0 (Brown)
%%+ 1 0.9 0.1 0 (Dark Blue)
%%+ 1 0.55 1 0 (Forest Green)
%%+ 0.05 0.2 0.95 0 (Gold)
%%+ 0.75 0.05 1 0 (Grass Green)
%%+ 0 0.45 1 0 (Orange)
%%+ 0.15 1 1 0 (Red)
%%+ 0.45 0.9 0 0 (Violet)
%AI3_TemplateBox: 304 390 304 390
%AI3_TileBox: 16 10 592 772
%AI3_DocumentPreview: Header
%%PageOrigin:16 10
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
%%IncludeFont: Symbol
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/space
/exclam
/universal
/numbersign
/existential
/percent
/ampersand
/suchthat
/parenleft
/parenright
/asteriskmath
/plus
/comma
/minus
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/congruent
/Alpha
/Beta
/Chi
/Delta
/Epsilon
/Phi
/Gamma
/Eta
/Iota
/theta1
/Kappa
/Lambda
/Mu
/Nu
/Omicron
/Pi
/Theta
/Rho
/Sigma
/Tau
/Upsilon
/sigma1
/Omega
/Xi
/Psi
/Zeta
/bracketleft
/therefore
/bracketright
/perpendicular
/underscore
/radicalex
/alpha
/beta
/chi
/delta
/epsilon
/phi
/gamma
/eta
/iota
/phi1
/kappa
/lambda
/mu
/nu
/omicron
/pi
/theta
/rho
/sigma
/tau
/upsilon
/omega1
/omega
/xi
/psi
/zeta
/braceleft
/bar
/braceright
/similar
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Euro
/Upsilon1
/minute
/lessequal
/fraction
/infinity
/florin
/club
/diamond
/heart
/spade
/arrowboth
/arrowleft
/arrowup
/arrowright
/arrowdown
/degree
/plusminus
/second
/greaterequal
/multiply
/proportional
/partialdiff
/bullet
/divide
/notequal
/equivalence
/approxequal
/ellipsis
/arrowvertex
/arrowhorizex
/carriagereturn
/aleph
/Ifraktur
/Rfraktur
/weierstrass
/circlemultiply
/circleplus
/emptyset
/intersection
/union
/propersuperset
/reflexsuperset
/notsubset
/propersubset
/reflexsubset
/element
/notelement
/angle
/gradient
/registerserif
/copyrightserif
/trademarkserif
/product
/radical
/dotmath
/logicalnot
/logicaland
/logicalor
/arrowdblboth
/arrowdblleft
/arrowdblup
/arrowdblright
/arrowdbldown
/lozenge
/angleleft
/registersans
/copyrightsans
/trademarksans
/summation
/parenlefttp
/parenleftex
/parenleftbt
/bracketlefttp
/bracketleftex
/bracketleftbt
/bracelefttp
/braceleftmid
/braceleftbt
/braceex
/.notdef
/angleright
/integral
/integraltp
/integralex
/integralbt
/parenrighttp
/parenrightex
/parenrightbt
/bracketrighttp
/bracketrightex
/bracketrightbt
/bracerighttp
/bracerightmid
/bracerightbt
/.notdef
/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Arrow1.2.out/in)
(Arrow1.2.out/in) 1 1 39.4039 39.4039 [
%AI3_Tile
(0 O 0 R 0.75 0.75 0.375 0 k
 0.75 0.75 0.375 0 K
) @
(
%AI6_BeginPatternLayer
0 i
1 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
33.9039 15.6187 m
39.4247 20.202 L
39.4247 20.202 L
33.8869 24.6252 L
S
39.2997 20.202 m
24.5706 20.202 l
20.4039 20.4792 20.4039 16.8125 v
20.4039 13.1458 20.4039 12.5625 y
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Arrow1.2.side)
(Arrow1.2.side) 1 1 39.404 39.4039 [
%AI3_Tile
(0 O 0 R 0.75 0.75 0.375 0 k
 0.75 0.75 0.375 0 K
) @
(
%AI6_BeginPatternLayer
0 i
1 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
20.202 20.202 m
39.404 20.202 l
S
33.904 15.6187 m
39.4248 20.202 L
39.4248 20.202 L
33.887 24.6252 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Bricks)
(Bricks) 1.6 1.6 73.6 73.6 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
1.6 1.6 m
1.6 73.6 L
73.6 73.6 L
73.6 1.6 L
1.6 1.6 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
1.6 70.01 m
73.6 70.01 l
S
1.6 62.809 m
73.6 62.809 L
S
1.6 55.609 m
73.6 55.609 L
S
1.6 48.408 m
73.6 48.408 L
S
1.6 41.208 m
73.6 41.208 L
S
1.6 34.007 m
73.6 34.007 L
S
1.6 26.807 m
73.6 26.807 L
S
1.6 19.606 m
73.6 19.606 L
S
1.6 12.406 m
73.6 12.406 L
S
1.6 5.206 m
73.6 5.206 L
S
70.01 70.01 m
70.01 62.822 l
S
55.61 70.01 m
55.61 62.822 L
S
41.21 70.01 m
41.21 62.822 L
S
26.81 70.01 m
26.81 62.822 L
S
12.41 70.01 m
12.41 62.822 L
S
70.01 55.572 m
70.01 48.385 l
S
55.61 55.572 m
55.61 48.385 L
S
41.21 55.572 m
41.21 48.385 L
S
26.81 55.572 m
26.81 48.385 L
S
12.41 55.572 m
12.41 48.385 L
S
70.01 41.197 m
70.01 34.01 l
S
55.61 41.197 m
55.61 34.01 L
S
41.21 41.197 m
41.21 34.01 L
S
26.81 41.197 m
26.81 34.01 L
S
12.41 41.197 m
12.41 34.01 L
S
70.01 26.822 m
70.01 19.635 l
S
55.61 26.822 m
55.61 19.635 L
S
41.21 26.822 m
41.21 19.635 L
S
26.81 26.822 m
26.81 19.635 L
S
12.41 26.822 m
12.41 19.635 L
S
70.01 12.385 m
70.01 5.197 l
S
55.61 12.385 m
55.61 5.197 L
S
41.21 12.385 m
41.21 5.197 L
S
26.81 12.385 m
26.81 5.197 L
S
12.41 12.385 m
12.41 5.197 L
S
62.797 5.197 m
62.797 1.6 L
S
48.397 5.197 m
48.397 1.6 L
S
33.997 5.197 m
33.997 1.6 L
S
19.597 5.197 m
19.597 1.6 L
S
5.197 5.197 m
5.197 1.6 l
S
62.797 19.635 m
62.797 12.447 L
S
48.397 19.635 m
48.397 12.447 L
S
33.997 19.635 m
33.997 12.447 L
S
19.597 19.635 m
19.597 12.447 L
S
5.197 19.635 m
5.197 12.447 l
S
62.797 34.01 m
62.797 26.822 L
S
48.397 34.01 m
48.397 26.822 L
S
19.597 34.01 m
19.597 26.822 L
S
5.197 34.01 m
5.197 26.822 l
S
62.797 48.385 m
62.797 41.197 L
S
48.397 48.385 m
48.397 41.197 L
S
33.997 48.385 m
33.997 41.197 L
S
19.597 48.385 m
19.597 41.197 L
S
5.197 48.385 m
5.197 41.197 l
S
62.797 62.822 m
62.797 55.635 L
S
48.397 62.822 m
48.397 55.635 L
S
33.997 62.822 m
33.997 55.635 L
S
19.597 62.822 m
19.597 55.635 L
S
5.197 62.822 m
5.197 55.635 l
S
62.797 73.5589 m
62.797 70.072 L
S
48.397 73.5589 m
48.397 70.072 L
S
33.997 73.5589 m
33.997 70.072 L
S
19.597 73.5589 m
19.597 70.072 L
S
5.197 73.5589 m
5.197 70.072 l
S
33.997 34.01 m
33.997 26.822 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Checks)
(Checks) 1 1 31.3995 31.3995 [
%AI3_Tile
(0 O 0 R 0 0.9 1 0 k
 0 0.9 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
19.9995 4.8 m
27.5995 4.8 L
27.5995 12.3995 L
19.9995 12.3995 L
19.9995 4.8 L
f
31.3995 27.5995 m
31.3995 31.3995 L
27.5995 31.3995 L
27.5995 27.5995 L
31.3995 27.5995 L
f
19.9995 27.5995 m
19.9995 19.9995 L
27.5995 19.9995 L
27.5995 27.5995 L
19.9995 27.5995 L
f
12.3995 12.3995 m
19.9995 12.3995 L
19.9995 19.9995 L
12.3995 19.9995 L
12.3995 12.3995 L
f
12.3995 27.5995 m
4.8 27.5995 L
4.8 19.9995 L
12.3995 19.9995 L
12.3995 27.5995 L
f
4.8 12.3995 m
4.8 4.8 L
12.3995 4.8 L
12.3995 12.3995 L
4.8 12.3995 L
f
19.9995 27.5995 m
19.9995 31.3995 L
12.3995 31.3995 L
12.3995 27.5995 L
19.9995 27.5995 L
f
12.3995 4.8 m
12.3995 1 L
19.9995 1 L
19.9995 4.8 L
12.3995 4.8 L
f
4.8 19.9995 m
1 19.9995 L
1 12.3995 L
4.8 12.3995 L
4.8 19.9995 L
f
27.5995 19.9995 m
27.5995 12.3995 L
31.3995 12.3995 L
31.3995 19.9995 L
27.5995 19.9995 L
f
4.8 31.3995 m
1 31.3995 L
1 27.5995 L
4.8 27.5995 L
4.8 31.3995 L
f
27.5995 1 m
31.3995 1 L
31.3995 4.8 L
27.5995 4.8 L
27.5995 1 L
f
1 4.8 m
1 1 L
4.8 1 L
4.8 4.8 L
1 4.8 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.05 0.2 0 k
 0 0.05 0.2 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.8 4.8 m
4.8 1 L
12.3995 1 L
12.3995 4.8 L
4.8 4.8 L
f
4.8 12.3995 m
1 12.3995 L
1 4.8 L
4.8 4.8 L
4.8 12.3995 L
f
19.9995 4.8 m
19.9995 1 L
27.5995 1 L
27.5995 4.8 L
19.9995 4.8 L
f
12.3995 12.3995 m
12.3995 4.8 L
19.9995 4.8 L
19.9995 12.3995 L
12.3995 12.3995 L
f
27.5995 4.8 m
31.3995 4.8 L
31.3995 12.3995 L
27.5995 12.3995 L
27.5995 4.8 L
f
12.3995 19.9995 m
4.8 19.9995 L
4.8 12.3995 L
12.3995 12.3995 L
12.3995 19.9995 L
f
4.8 27.5995 m
1 27.5995 L
1 19.9995 L
4.8 19.9995 L
4.8 27.5995 L
f
19.9995 12.3995 m
27.5995 12.3995 L
27.5995 19.9995 L
19.9995 19.9995 L
19.9995 12.3995 L
f
19.9995 19.9995 m
19.9995 27.5995 L
12.3995 27.5995 L
12.3995 19.9995 L
19.9995 19.9995 L
f
27.5995 19.9995 m
31.3995 19.9995 L
31.3995 27.5995 L
27.5995 27.5995 L
27.5995 19.9995 L
f
12.3995 27.5995 m
12.3995 31.3995 L
4.8 31.3995 L
4.8 27.5995 L
12.3995 27.5995 L
f
27.5995 27.5995 m
27.5995 31.3995 L
19.9995 31.3995 L
19.9995 27.5995 L
27.5995 27.5995 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (DblLine1.2.inner)
(DblLine1.2.inner) 1 1 39.2705 39.2706 [
%AI3_Tile
(0 O 0 R 1 0.14 0.09 0 k
 1 0.14 0.09 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
39.2702 22.175 m
39.2702 13.6108 L
26.66 13.6108 L
26.66 1.0003 L
18.0958 1.0003 L
18.0948 22.175 L
18.0958 22.175 L
18.0958 22.1752 L
39.2702 22.175 L
f
39.2708 24.6929 m
15.5779 24.6929 L
15.5779 1.0003 L
14.9037 1.0003 L
14.9032 25.3675 L
39.2708 25.3675 L
39.2708 24.6929 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (DblLine1.2.outer)
(DblLine1.2.outer) 1 1.0003 39.2706 39.271 [
%AI3_Tile
(0 O 0 R 1 0.14 0.09 0 k
 1 0.14 0.09 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
39.2708 26.6602 m
13.6111 26.6602 L
13.6111 1.0005 L
22.1751 1 L
22.1751 18.096 L
39.2708 18.096 L
39.2708 26.6602 L
f
39.2708 15.578 m
24.6928 15.578 L
24.6928 1 L
25.367 1 L
25.367 14.9038 L
39.2708 14.9038 L
39.2708 15.578 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (DblLine1.2.side)
(DblLine1.2.side) 1 1 39.2706 39.2706 [
%AI3_Tile
(0 O 0 R 1 0.14 0.09 0 k
 1 0.14 0.09 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
39.2704 18.0958 m
39.2704 26.6598 L
1.0001 26.6598 L
1.0001 18.0958 L
39.2704 18.0958 L
f
39.2704 14.9037 m
39.2704 15.5776 L
1.0001 15.5776 L
1.0001 14.9037 L
39.2704 14.9037 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Diamonds)
(Diamonds) 1 1 37.1865 41.9411 [
%AI3_Tile
(0 O 0 R 0.2 0 1 0 k
 0.2 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
1.0002 1.0004 m
1.0002 41.9411 L
37.1865 41.9411 L
37.1865 1.0004 L
1.0002 1.0004 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
19.0936 41.9408 m
19.0929 41.9408 L
19.0933 41.9402 L
19.0936 41.9408 L
f
7.0311 41.9408 m
7.0304 41.9408 L
7.0308 41.9402 L
7.0311 41.9408 L
f
31.1556 41.9408 m
31.1548 41.9408 L
31.1552 41.9402 L
31.1556 41.9408 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.75 0.9 0 0 k
 0.75 0.9 0 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
37.1865 1 m
37.1865 11.2349 L
31.1552 1 L
37.1865 1 L
f
19.0933 1 m
31.1552 1 L
25.124 11.2349 L
19.0933 1 L
f
7.0308 1 m
19.0933 1 L
13.062 11.2349 L
7.0308 1 L
f
1 1 m
7.0308 1 L
1 11.2349 L
1 1 L
f
37.1859 11.2349 m
37.1865 11.236 L
37.1865 31.7059 L
31.1552 21.4704 L
37.1859 11.2349 L
f
19.0933 21.4704 m
25.124 11.2349 L
31.1552 21.4704 L
25.124 31.7059 L
19.0933 21.4704 L
f
7.0308 21.4704 m
13.062 11.2349 L
19.0933 21.4704 L
13.062 31.7059 L
7.0308 21.4704 L
f
1 31.7059 m
1 11.2349 L
7.0308 21.4704 L
1 31.7059 L
f
37.1859 31.7059 m
37.1865 31.707 L
37.1865 41.9408 L
31.1556 41.9408 L
31.1552 41.9402 L
37.1859 31.7059 L
f
25.124 31.7059 m
31.1552 41.9402 L
31.1548 41.9408 L
19.0936 41.9408 L
19.0933 41.9402 L
25.124 31.7059 L
f
13.062 31.7059 m
19.0933 41.9402 L
19.0929 41.9408 L
7.0311 41.9408 L
7.0308 41.9402 L
13.062 31.7059 L
f
7.0304 41.9408 m
1 41.9408 L
1 31.7059 L
7.0308 41.9402 L
7.0304 41.9408 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Hexagon)
(Hexagon) 4 1.6 70.151 77.983 [
%AI3_Tile
(0 O 0 R 0 1 0.35 0 k
 0 1 0.35 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
70.151 77.983 m
70.151 1.6 L
4 1.6 L
4 77.983 L
70.151 77.983 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.9921 1 0 0 k
 0.9921 1 0 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
20.538 30.244 m
S
26.05 20.696 m
15.025 20.696 L
9.513 30.244 L
15.025 39.792 L
26.05 39.792 L
31.564 30.244 L
26.05 20.696 L
s
20.537 11.148 m
S
26.05 1.6 m
15.024 1.6 L
9.512 11.148 L
15.024 20.696 L
26.05 20.696 L
31.563 11.148 L
26.05 1.6 L
s
53.614 30.244 m
S
59.126 20.696 m
48.101 20.696 L
42.589 30.244 L
48.101 39.792 L
59.126 39.792 L
64.639 30.244 L
59.126 20.696 L
s
53.614 11.148 m
S
59.126 1.6 m
48.101 1.6 L
42.588 11.148 L
48.101 20.696 L
59.126 20.696 L
64.638 11.148 L
59.126 1.6 L
s
20.538 68.436 m
S
26.051 58.888 m
15.025 58.888 L
9.513 68.436 L
15.025 77.984 L
26.051 77.984 L
31.564 68.436 L
26.051 58.888 L
s
20.538 49.34 m
S
26.051 39.792 m
15.025 39.792 L
9.513 49.34 L
15.025 58.888 L
26.05 58.888 L
31.564 49.34 L
26.051 39.792 L
s
53.614 68.436 m
S
59.127 58.888 m
48.102 58.888 L
42.589 68.436 L
48.101 77.985 L
59.127 77.985 L
64.639 68.436 L
59.127 58.888 L
s
53.614 49.34 m
S
59.127 39.792 m
48.101 39.792 L
42.589 49.34 L
48.101 58.888 L
59.127 58.888 L
64.639 49.341 L
59.127 39.792 L
s
4 20.696 m
S
3.876 30.244 m
9.512 30.244 L
15.024 20.696 L
9.512 11.147 L
3.876 11.147 L
S
37.075 20.696 m
S
42.588 11.148 m
31.563 11.148 L
26.05 20.696 L
31.563 30.244 L
42.589 30.244 L
48.101 20.696 L
42.588 11.148 L
s
37.076 58.888 m
S
42.589 49.34 m
31.564 49.34 L
26.05 58.888 L
31.564 68.436 L
42.589 68.436 L
48.101 58.888 L
42.589 49.34 L
s
70.151 20.696 m
S
70.2094 11.147 m
64.639 11.147 L
59.127 20.696 L
64.639 30.244 L
70.2094 30.244 L
S
70.152 58.888 m
S
70.0427 49.34 m
64.639 49.34 L
59.127 58.888 L
64.639 68.436 L
70.0427 68.436 L
S
4 58.888 m
S
3.876 68.436 m
9.513 68.436 L
15.025 58.888 L
9.513 49.34 L
3.876 49.34 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Laurel.inner)
(Laurel.inner) 1 1 28.5392 28.5392 [
%AI3_Tile
(0 O 0 R 0 0.55 1 0.12 k
 0 0.55 1 0.12 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
19.2768 15.3585 m
28.9144 15.3585 L
28.9144 14.2335 L
19.2768 14.2335 L
19.2768 15.3585 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.55 1 0.3 k
 0 0.55 1 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
14.7461 18.9624 m
13.0264 17.8486 11.3273 14.4193 11.3273 10.0362 c
11.3273 5.6547 12.9768 2.1518 14.744 1.1112 C
14.7443 1.1112 L
16.4707 2.1518 18.1679 5.6547 18.1679 10.0362 c
18.1679 14.4143 16.432 17.8633 14.7461 18.9624 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Laurel.outer)
(Laurel.outer) 1 1.3751 28.5393 28.9143 [
%AI3_Tile
(0 O 0 R 0 0.55 1 0.12 k
 0 0.55 1 0.12 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
14.2395 10.6375 m
14.2395 1 L
15.3645 1 L
15.3645 10.6375 L
14.2395 10.6375 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.55 1 0.3 k
 0 0.55 1 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.5769 15.124 m
11.6906 16.8438 15.1198 18.5429 19.503 18.5429 c
23.8844 18.5429 27.3874 16.8935 28.428 15.1262 C
28.428 15.1259 L
27.3874 13.3995 23.8844 11.7023 19.503 11.7023 c
15.1249 11.7023 11.676 13.4382 10.5769 15.124 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Laurel.side)
(Laurel.side) 1.3972 1 28.9364 28.5392 [
%AI3_Tile
(0 O 0 R 0 0.55 1 0.12 k
 0 0.55 1 0.12 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
29.1571 15.2998 m
1 15.2998 L
1 14.1748 L
29.1571 14.1748 L
29.1571 15.2998 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.55 1 0.3 k
 0 0.55 1 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
2.0183 27.4787 m
1.5899 25.4751 2.8132 21.8488 5.9125 18.7494 c
9.0107 15.6513 12.654 14.3407 14.6395 14.8545 C
14.6398 14.8547 L
15.1246 16.8113 13.8478 20.4883 10.7496 23.5865 c
7.6538 26.6824 3.9876 27.8936 2.0183 27.4787 C
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.39 0.7 0.12 k
 0 0.39 0.7 0.12 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
2.0183 2.0091 m
1.5899 4.0126 2.8132 7.6389 5.9125 10.7382 c
9.0107 13.8365 12.654 15.147 14.6395 14.6332 C
14.6398 14.633 L
15.1246 12.6765 13.8478 8.9993 10.7496 5.9011 c
7.6538 2.8054 3.9876 1.5941 2.0183 2.0091 C
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.55 1 0.3 k
 0 0.55 1 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
15.821 2.0091 m
15.3925 4.0126 16.6159 7.6389 19.7152 10.7382 c
22.8134 13.8365 26.4567 15.147 28.4422 14.6332 C
28.4424 14.633 L
28.9273 12.6765 27.6505 8.9993 24.5523 5.9011 c
21.4565 2.8054 17.7903 1.5941 15.821 2.0091 C
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.39 0.7 0.12 k
 0 0.39 0.7 0.12 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
15.821 27.4787 m
15.3925 25.4751 16.6159 21.8488 19.7152 18.7494 c
22.8134 15.6513 26.4567 14.3407 28.4422 14.8545 C
28.4424 14.8547 L
28.9273 16.8113 27.6505 20.4883 24.5523 23.5865 c
21.4565 26.6824 17.7903 27.8936 15.821 27.4787 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves-fall)
(Leaves-fall) 1 1 52.733 89.816 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
52.733 89.816 m
52.733 1 L
1 1 L
1 89.816 L
52.733 89.816 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
25.317 2.083 m
25.994 2.283 26.284 2.435 V
24.815 5.147 29.266 9.428 30.186 10.168 C
30.787 9.943 30.907 7.41 30.23 6.073 C
31.073 6.196 33.262 4.818 34.02 3.529 C
34.085 4.217 35.655 7.158 36.481 7.535 C
35.561 7.933 34.896 9.406 34.134 10.854 C
35.156 11.021 36.555 10.1 38.026 9.195 C
38.541 9.996 39.915 10.968 41.174 11.484 C
40.086 12.171 39.591 12.912 39.094 14.372 C
38.052 13.806 35.865 13.657 35.336 13.944 C
35.85 15.057 38.096 15.6 38.827 15.547 C
38.573 16.409 38.425 18.562 38.598 21.155 C
36.939 19.839 35.393 18.522 33.734 18.58 C
34.003 17.158 33.367 15.353 32.99 14.86 C
32.417 15.604 32.006 16.431 32.361 18.408 C
30.908 18.893 29.671 19.439 28.297 20.697 C
28.297 18.866 27.725 17.664 26.857 16.388 C
28.117 15.9 29.389 14.697 29.385 13.658 C
28.537 13.81 26.845 14.554 26.352 15.547 C
25.634 14.8 23.95 13.491 22.346 13.487 C
23.534 12.632 24.454 11.598 24.549 9.686 C
25.802 10.657 28.255 11.272 29.635 10.674 C
24.794 6.438 25.262 3.405 25.317 2.083 C
f
12.412 33.743 m
11.887 33.272 11.691 33.01 V
14.182 31.192 11.928 25.366 11.415 24.303 C
10.776 24.247 9.369 26.988 9.405 28.486 C
8.273 27.73 6.608 27.851 5.006 28.137 C
5.578 27.049 5.177 25.104 4.376 24.303 C
5.378 24.339 6.729 23.624 8.038 22.643 C
7.203 21.823 5.376 21.984 3.46 22.643 C
3.46 21.27 2.638 19.533 1.801 18.351 C
3.117 18.408 4.262 17.722 5.12 16.691 C
5.785 18.26 7.819 19.373 8.725 19.324 C
8.742 17.959 7.169 15.869 6.147 15.47 C
6.747 14.801 7.766 13.27 8.725 10.854 C
9.524 12.78 10.694 14.022 11.927 14.955 C
10.785 16.517 10.959 17.388 11.358 18.866 C
12.101 18.325 13.132 17.893 13.303 15.89 C
15.02 16.176 16.156 16.104 17.653 15.203 C
17.198 16.865 17.195 18.466 17.515 20.166 C
15.665 20.026 14.105 20.239 13.075 21.728 C
13.905 21.955 16.165 22.014 17.039 21.082 C
17.366 22.064 18.261 23.47 19.707 24.164 C
18.267 24.424 17.282 25.523 16.373 27.209 C
15.66 25.793 13.433 24.128 11.93 24.073 C
13.933 28.137 13.933 31.055 12.412 33.743 C
f
31.125 30.5 m
31.445 31.128 31.648 31.385 V
34.045 29.444 38.851 32.752 39.746 33.521 C
39.636 34.153 37.511 35.29 35.794 34.26 C
36.234 35.549 35.332 37.51 34.134 38.552 C
35.873 38.451 38.019 39.813 38.541 40.555 C
38.763 39.577 39.946 38.307 41.231 37.293 C
41.582 38.266 40.887 40.384 39.971 41.986 C
41.206 42.487 42.318 43.417 42.776 44.676 C
43.233 43.359 44.236 42.685 45.58 41.929 C
44.421 40.502 43.64 38.328 43.92 37.465 C
45.243 37.8 46.814 40.518 46.937 41.607 C
47.812 40.841 49.366 40.154 51.947 39.848 C
50.246 38.77 49.884 36.778 49.3 35.347 C
48.152 35.794 45.983 35.853 45.008 35.29 C
45.721 34.711 47.061 34.16 49.071 34.146 C
49.071 32.601 49.534 31.469 50.788 30.254 C
49.065 30.267 46.965 29.781 45.469 29.389 C
45.221 30.718 44.378 32.314 43.233 32.715 C
43.227 31.854 43.493 29.605 44.378 28.938 C
43.513 28.37 42.26 26.993 41.803 25.276 C
41.181 26.601 40.32 27.906 38.457 28.35 C
39.642 29.403 40.477 31.42 40.143 32.887 C
35.091 28.905 32.414 30.203 31.125 30.5 C
f
25.317 46.491 m
25.994 46.691 26.284 46.843 V
24.815 49.556 29.266 53.837 30.186 54.576 C
30.787 54.351 30.907 51.818 30.23 50.482 C
31.073 50.605 33.262 49.227 34.02 47.938 C
34.085 48.625 35.655 51.566 36.481 51.944 C
35.561 52.341 34.896 53.814 34.134 55.263 C
35.156 55.43 36.555 54.508 38.026 53.603 C
38.541 54.404 39.915 55.377 41.174 55.892 C
40.086 56.579 39.591 57.321 39.094 58.78 C
38.052 58.215 35.865 58.065 35.336 58.353 C
35.85 59.465 38.096 60.008 38.827 59.955 C
38.573 60.817 38.425 62.97 38.598 65.563 C
36.939 64.247 35.393 62.931 33.734 62.988 C
34.003 61.567 33.367 59.761 32.99 59.268 C
32.417 60.012 32.006 60.839 32.361 62.817 C
30.908 63.302 29.671 63.847 28.297 65.106 C
28.297 63.274 27.725 62.073 26.857 60.796 C
28.117 60.308 29.389 59.106 29.385 58.067 C
28.537 58.219 26.845 58.963 26.352 59.955 C
25.634 59.209 23.95 57.899 22.346 57.895 C
23.534 57.041 24.454 56.006 24.549 54.094 C
25.802 55.065 28.255 55.68 29.635 55.083 C
24.794 50.846 25.262 47.814 25.317 46.491 C
f
12.412 78.151 m
11.887 77.68 11.691 77.418 V
14.182 75.601 11.928 69.774 11.415 68.711 C
10.776 68.655 9.369 71.396 9.405 72.894 C
8.273 72.138 6.608 72.259 5.006 72.545 C
5.578 71.458 5.177 69.512 4.376 68.711 C
5.378 68.747 6.729 68.032 8.038 67.052 C
7.203 66.231 5.376 66.393 3.46 67.052 C
3.46 65.678 2.638 63.941 1.801 62.759 C
3.117 62.817 4.262 62.13 5.12 61.1 C
5.785 62.669 7.819 63.781 8.725 63.732 C
8.742 62.367 7.169 60.277 6.147 59.878 C
6.747 59.209 7.766 57.678 8.725 55.263 C
9.524 57.189 10.694 58.431 11.927 59.364 C
10.785 60.925 10.959 61.796 11.358 63.274 C
12.101 62.734 13.132 62.301 13.303 60.298 C
15.02 60.584 16.156 60.512 17.653 59.612 C
17.198 61.273 17.195 62.874 17.515 64.574 C
15.665 64.434 14.105 64.648 13.075 66.136 C
13.905 66.363 16.165 66.422 17.039 65.49 C
17.366 66.472 18.261 67.878 19.707 68.572 C
18.267 68.832 17.282 69.931 16.373 71.617 C
15.66 70.202 13.433 68.536 11.93 68.482 C
13.933 72.545 13.933 75.464 12.412 78.151 C
f
31.125 74.908 m
31.445 75.537 31.648 75.794 V
34.045 73.853 38.851 77.161 39.746 77.929 C
39.636 78.562 37.511 79.698 35.794 78.668 C
36.234 79.957 35.332 81.918 34.134 82.96 C
35.873 82.86 38.019 84.221 38.541 84.963 C
38.763 83.986 39.946 82.716 41.231 81.701 C
41.582 82.675 40.887 84.792 39.971 86.394 C
41.206 86.895 42.318 87.825 42.776 89.084 C
43.233 87.768 44.236 87.093 45.58 86.337 C
44.421 84.91 43.64 82.736 43.92 81.873 C
45.243 82.208 46.814 84.926 46.937 86.016 C
47.812 85.249 49.366 84.563 51.947 84.257 C
50.246 83.179 49.884 81.187 49.3 79.756 C
48.152 80.203 45.983 80.262 45.008 79.698 C
45.721 79.119 47.061 78.569 49.071 78.554 C
49.071 77.009 49.534 75.877 50.788 74.663 C
49.065 74.675 46.965 74.189 45.469 73.798 C
45.221 75.126 44.378 76.723 43.233 77.123 C
43.227 76.262 43.493 74.013 44.378 73.347 C
43.513 72.779 42.26 71.401 41.803 69.684 C
41.181 71.009 40.32 72.314 38.457 72.759 C
39.642 73.812 40.477 75.829 40.143 77.295 C
35.091 73.313 32.414 74.611 31.125 74.908 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Polka dots)
(Polka dots) 1 1 29.8 29.8 [
%AI3_Tile
(0 O 0 R 0.45 0.9 0 0 k
 0.45 0.9 0 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
1 1 m
1 29.8 L
29.8 29.8 L
29.8 1 L
1 1 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.09 0.18 0 0 k
 0.09 0.18 0 0 K
) @
(
%AI6_BeginPatternLayer
*u
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
11.08 8.2 m
11.08 9.791 9.79 11.08 8.2 11.08 c
6.609 11.08 5.32 9.791 5.32 8.2 c
5.32 6.61 6.609 5.32 8.2 5.32 c
9.79 5.32 11.08 6.61 11.08 8.2 c
f
11.08 22.6 m
11.08 24.191 9.79 25.48 8.2 25.48 c
6.609 25.48 5.32 24.191 5.32 22.6 c
5.32 21.01 6.609 19.72 8.2 19.72 c
9.79 19.72 11.08 21.01 11.08 22.6 c
f
18.28 15.4 m
18.28 16.991 16.99 18.28 15.4 18.28 c
13.809 18.28 12.52 16.991 12.52 15.4 c
12.52 13.81 13.809 12.52 15.4 12.52 c
16.99 12.52 18.28 13.81 18.28 15.4 c
f
25.48 8.2 m
25.48 9.791 24.19 11.08 22.6 11.08 c
21.009 11.08 19.72 9.791 19.72 8.2 c
19.72 6.61 21.009 5.32 22.6 5.32 c
24.19 5.32 25.48 6.61 25.48 8.2 c
f
25.48 22.6 m
25.48 24.191 24.19 25.48 22.6 25.48 c
21.009 25.48 19.72 24.191 19.72 22.6 c
19.72 21.01 21.009 19.72 22.6 19.72 c
24.19 19.72 25.48 21.01 25.48 22.6 c
f
*U
26.92 1 m
29.8 1 L
29.8 3.88 L
28.209 3.88 26.92 2.591 26.92 1 C
f
15.4 3.88 m
13.809 3.88 12.52 2.591 12.52 1 C
18.28 1 L
18.28 2.591 16.99 3.88 15.4 3.88 c
f
1 3.88 m
1 1 L
3.88 1 L
3.88 2.591 2.59 3.88 1 3.88 C
f
26.92 15.4 m
26.92 13.81 28.209 12.52 29.8 12.52 C
29.8 18.28 L
28.209 18.28 26.92 16.991 26.92 15.4 c
f
15.4 18.28 m
13.809 18.28 12.52 16.991 12.52 15.4 c
12.52 13.81 13.809 12.52 15.4 12.52 c
16.99 12.52 18.28 13.81 18.28 15.4 c
18.28 16.991 16.99 18.28 15.4 18.28 c
f
3.88 15.4 m
3.88 16.991 2.59 18.28 1 18.28 C
1 12.52 L
2.59 12.52 3.88 13.81 3.88 15.4 c
f
29.8 26.92 m
29.8 29.8 L
26.92 29.8 L
26.92 28.21 28.209 26.92 29.8 26.92 C
f
15.4 26.92 m
16.99 26.92 18.28 28.21 18.28 29.8 C
12.52 29.8 L
12.52 28.21 13.809 26.92 15.4 26.92 c
f
3.88 29.8 m
1 29.8 L
1 26.92 L
2.59 26.92 3.88 28.21 3.88 29.8 C
f
8.2 11.08 m
6.609 11.08 5.32 9.791 5.32 8.2 c
5.32 6.61 6.609 5.32 8.2 5.32 c
9.79 5.32 11.08 6.61 11.08 8.2 c
11.08 9.791 9.79 11.08 8.2 11.08 c
f
22.6 11.08 m
21.009 11.08 19.72 9.791 19.72 8.2 c
19.72 6.61 21.009 5.32 22.6 5.32 c
24.19 5.32 25.48 6.61 25.48 8.2 c
25.48 9.791 24.19 11.08 22.6 11.08 c
f
8.2 25.48 m
6.609 25.48 5.32 24.191 5.32 22.6 c
5.32 21.01 6.609 19.72 8.2 19.72 c
9.79 19.72 11.08 21.01 11.08 22.6 c
11.08 24.191 9.79 25.48 8.2 25.48 c
f
22.6 25.48 m
21.009 25.48 19.72 24.191 19.72 22.6 c
19.72 21.01 21.009 19.72 22.6 19.72 c
24.19 19.72 25.48 21.01 25.48 22.6 c
25.48 24.191 24.19 25.48 22.6 25.48 c
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Random circles)
(Random circles) 4.365 3.849 51.13 57.85 [
%AI3_Tile
(0 O 0 R 0 0.1125 0.45 0 k
 0 0.1125 0.45 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
4.365 3.849 m
4.365 57.85 L
51.13 57.85 L
51.13 3.849 L
4.365 3.849 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4 0.7 1 0 k
 0.4 0.7 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
45.429 36.274 m
45.843 36.991 45.598 37.908 44.88 38.323 c
44.163 38.737 43.245 38.491 42.831 37.774 c
42.417 37.056 42.663 36.139 43.38 35.725 c
44.098 35.31 45.015 35.556 45.429 36.274 c
s
44.179 27.926 m
43.765 28.643 42.848 28.889 42.13 28.475 c
41.413 28.06 41.167 27.143 41.581 26.425 c
41.995 25.708 42.913 25.462 43.63 25.876 c
44.348 26.291 44.593 27.208 44.179 27.926 c
s
35.929 41.024 m
35.515 41.741 34.598 41.987 33.88 41.573 c
33.163 41.158 32.917 40.241 33.331 39.524 c
33.745 38.806 34.663 38.56 35.38 38.975 c
36.098 39.389 36.343 40.306 35.929 41.024 c
s
28.38 34.225 m
28.794 34.942 28.549 35.859 27.831 36.274 c
27.114 36.688 26.196 36.442 25.782 35.725 c
25.368 35.007 25.614 34.09 26.331 33.675 c
27.049 33.261 27.966 33.507 28.38 34.225 c
s
31.179 28.024 m
30.765 28.741 29.848 28.987 29.13 28.573 c
28.413 28.158 28.167 27.241 28.581 26.524 c
28.995 25.806 29.913 25.56 30.63 25.975 c
31.348 26.389 31.593 27.306 31.179 28.024 c
s
36.792 23.349 m
35.963 23.349 35.292 22.678 35.292 21.849 c
35.292 21.021 35.963 20.349 36.792 20.349 c
37.62 20.349 38.292 21.021 38.292 21.849 c
38.292 22.678 37.62 23.349 36.792 23.349 c
s
10.888 34.175 m
10.474 34.893 10.72 35.81 11.437 36.225 c
12.155 36.639 13.072 36.393 13.486 35.675 c
13.901 34.958 13.655 34.041 12.937 33.626 c
12.22 33.212 11.303 33.458 10.888 34.175 c
s
11.517 26.601 m
11.931 27.318 12.848 27.564 13.566 27.15 c
14.283 26.735 14.529 25.818 14.115 25.1 c
13.701 24.383 12.783 24.137 12.066 24.551 c
11.348 24.966 11.103 25.883 11.517 26.601 c
s
16.782 41.426 m
17.196 42.143 18.114 42.389 18.831 41.975 c
19.549 41.56 19.794 40.643 19.38 39.926 c
18.966 39.208 18.049 38.962 17.331 39.377 c
16.614 39.791 16.368 40.708 16.782 41.426 c
s
22.365 24.35 m
23.194 24.35 23.865 23.678 23.865 22.85 c
23.865 22.021 23.194 21.35 22.365 21.35 c
21.537 21.35 20.865 22.021 20.865 22.85 c
20.865 23.678 21.537 24.35 22.365 24.35 c
s
45.385 7.849 m
44.971 7.132 44.053 6.886 43.336 7.3 c
42.619 7.714 42.373 8.632 42.787 9.349 c
43.201 10.067 44.119 10.312 44.836 9.898 c
45.553 9.484 45.799 8.567 45.385 7.849 c
s
29.679 7.774 m
29.265 7.056 28.348 6.81 27.63 7.225 c
26.913 7.639 26.667 8.556 27.081 9.274 c
27.495 9.991 28.413 10.237 29.13 9.823 c
29.848 9.408 30.093 8.491 29.679 7.774 c
s
35.542 11.349 m
34.713 11.349 34.042 12.021 34.042 12.849 c
34.042 13.678 34.713 14.349 35.542 14.349 c
36.37 14.349 37.042 13.678 37.042 12.849 c
37.042 12.021 36.37 11.349 35.542 11.349 c
s
10.13 7.475 m
10.544 6.757 11.462 6.511 12.179 6.926 c
12.897 7.34 13.142 8.257 12.728 8.975 c
12.314 9.692 11.397 9.938 10.679 9.524 c
9.962 9.109 9.716 8.192 10.13 7.475 c
s
20.203 13.349 m
21.031 13.349 21.703 14.021 21.703 14.849 c
21.703 15.678 21.031 16.349 20.203 16.349 c
19.375 16.349 18.703 15.678 18.703 14.849 c
18.703 14.021 19.375 13.349 20.203 13.349 c
s
44.635 54.1 m
45.049 53.382 44.803 52.465 44.086 52.051 c
43.369 51.636 42.451 51.882 42.037 52.6 c
41.623 53.317 41.869 54.234 42.586 54.649 c
43.303 55.063 44.221 54.817 44.635 54.1 c
s
36.841 48.1 m
36.427 47.382 35.509 47.136 34.792 47.551 c
34.074 47.965 33.828 48.882 34.243 49.6 c
34.657 50.317 35.574 50.563 36.292 50.149 c
37.009 49.734 37.255 48.817 36.841 48.1 c
s
29.728 54.725 m
30.143 54.007 29.897 53.09 29.179 52.675 c
28.462 52.261 27.544 52.507 27.13 53.225 c
26.716 53.942 26.962 54.859 27.679 55.274 c
28.397 55.688 29.314 55.442 29.728 54.725 c
s
10.86 54.1 m
10.446 53.382 10.691 52.465 11.409 52.051 c
12.126 51.636 13.044 51.882 13.458 52.6 c
13.872 53.317 13.626 54.234 12.909 54.649 c
12.191 55.063 11.274 54.817 10.86 54.1 c
s
19.154 49.1 m
19.568 48.382 20.486 48.136 21.203 48.551 c
21.92 48.965 22.166 49.882 21.752 50.6 c
21.338 51.317 20.42 51.563 19.703 51.149 c
18.986 50.734 18.74 49.817 19.154 49.1 c
s
51.88 38.85 m
51.052 38.85 50.38 39.521 50.38 40.35 c
50.38 41.178 51.052 41.85 51.88 41.85 c
52.709 41.85 53.38 41.178 53.38 40.35 c
53.38 39.521 52.709 38.85 51.88 38.85 c
s
51.865 11.349 m
52.693 11.349 53.365 12.021 53.365 12.849 c
53.365 13.678 52.693 14.349 51.865 14.349 c
51.036 14.349 50.365 13.678 50.365 12.849 c
50.365 12.021 51.036 11.349 51.865 11.349 c
s
30.179 18.524 m
29.765 19.241 28.848 19.487 28.13 19.073 c
27.413 18.658 27.167 17.741 27.581 17.024 c
27.995 16.306 28.913 16.06 29.63 16.475 c
30.348 16.889 30.593 17.806 30.179 18.524 c
s
21.679 31.524 m
21.265 32.241 20.348 32.487 19.63 32.073 c
18.913 31.658 18.667 30.741 19.081 30.024 c
19.495 29.306 20.413 29.06 21.13 29.475 c
21.848 29.889 22.093 30.806 21.679 31.524 c
s
37.914 33.399 m
37.5 34.116 36.583 34.362 35.865 33.948 c
35.148 33.533 34.902 32.616 35.316 31.899 c
35.73 31.181 36.648 30.935 37.365 31.35 c
38.083 31.764 38.328 32.681 37.914 33.399 c
s
28.929 45.024 m
28.515 45.741 27.598 45.987 26.88 45.573 c
26.163 45.158 25.917 44.241 26.331 43.524 c
26.745 42.806 27.663 42.56 28.38 42.975 c
29.098 43.389 29.343 44.306 28.929 45.024 c
s
12.429 45.524 m
12.015 46.241 11.098 46.487 10.38 46.073 c
9.663 45.658 9.417 44.741 9.831 44.024 c
10.245 43.306 11.163 43.06 11.88 43.475 c
12.598 43.889 12.843 44.806 12.429 45.524 c
s
44.49 45.6 m
44.075 46.317 43.158 46.563 42.441 46.149 c
41.723 45.734 41.477 44.817 41.891 44.1 c
42.306 43.382 43.223 43.136 43.941 43.55 c
44.658 43.965 44.904 44.882 44.49 45.6 c
s
12.679 18.524 m
12.265 19.241 11.348 19.487 10.63 19.073 c
9.913 18.658 9.667 17.741 10.081 17.024 c
10.495 16.306 11.413 16.06 12.13 16.475 c
12.848 16.889 13.093 17.806 12.679 18.524 c
s
21.179 5.774 m
20.765 6.491 19.848 6.737 19.13 6.323 c
18.413 5.908 18.167 4.991 18.581 4.274 c
18.995 3.557 19.913 3.311 20.63 3.725 c
21.348 4.139 21.593 5.056 21.179 5.774 c
s
38.929 5.274 m
38.515 5.991 37.598 6.237 36.88 5.823 c
36.163 5.408 35.917 4.491 36.331 3.774 c
36.745 3.057 37.663 2.811 38.38 3.225 c
39.098 3.639 39.343 4.556 38.929 5.274 c
s
43.865 18.1 m
44.694 18.1 45.365 17.429 45.365 16.6 c
45.365 15.772 44.694 15.1 43.865 15.1 c
43.037 15.1 42.365 15.772 42.365 16.6 c
42.365 17.429 43.037 18.1 43.865 18.1 c
s
51.13 4.6 m
50.302 4.6 49.63 3.928 49.63 3.1 c
49.63 2.272 50.302 1.6 51.13 1.6 c
51.959 1.6 52.63 2.272 52.63 3.1 c
52.63 3.928 51.959 4.6 51.13 4.6 c
s
52.163 31.649 m
51.748 32.366 50.831 32.612 50.114 32.198 c
49.396 31.783 49.15 30.866 49.565 30.149 c
49.979 29.431 50.896 29.185 51.614 29.6 c
52.331 30.014 52.577 30.931 52.163 31.649 c
s
51.85 51.35 m
51.021 51.35 50.35 50.678 50.35 49.85 c
50.35 49.021 51.021 48.35 51.85 48.35 c
52.678 48.35 53.35 49.021 53.35 49.85 c
53.35 50.678 52.678 51.35 51.85 51.35 c
s
49.85 23.1 m
50.679 23.1 51.35 22.428 51.35 21.6 c
51.35 20.771 50.679 20.1 49.85 20.1 c
49.022 20.1 48.35 20.771 48.35 21.6 c
48.35 22.428 49.022 23.1 49.85 23.1 c
s
5.13 38.85 m
4.302 38.85 3.63 39.521 3.63 40.35 c
3.63 41.178 4.302 41.85 5.13 41.85 c
5.959 41.85 6.63 41.178 6.63 40.35 c
6.63 39.521 5.959 38.85 5.13 38.85 c
s
5.115 11.349 m
5.943 11.349 6.615 12.021 6.615 12.849 c
6.615 13.678 5.943 14.349 5.115 14.349 c
4.286 14.349 3.615 13.678 3.615 12.849 c
3.615 12.021 4.286 11.349 5.115 11.349 c
s
4.38 4.6 m
3.552 4.6 2.88 3.928 2.88 3.1 c
2.88 2.272 3.552 1.6 4.38 1.6 c
5.209 1.6 5.88 2.272 5.88 3.1 c
5.88 3.928 5.209 4.6 4.38 4.6 c
s
5.413 31.649 m
4.998 32.366 4.081 32.612 3.364 32.198 c
2.646 31.783 2.4 30.866 2.815 30.149 c
3.229 29.431 4.146 29.185 4.864 29.6 c
5.581 30.014 5.827 30.931 5.413 31.649 c
s
5.1 51.35 m
4.271 51.35 3.6 50.678 3.6 49.85 c
3.6 49.021 4.271 48.35 5.1 48.35 c
5.928 48.35 6.6 49.021 6.6 49.85 c
6.6 50.678 5.928 51.35 5.1 51.35 c
s
3.1 23.1 m
3.929 23.1 4.6 22.428 4.6 21.6 c
4.6 20.771 3.929 20.1 3.1 20.1 c
2.272 20.1 1.6 20.771 1.6 21.6 c
1.6 22.428 2.272 23.1 3.1 23.1 c
s
21.194 59.775 m
20.78 60.492 19.863 60.738 19.145 60.324 c
18.428 59.909 18.182 58.992 18.596 58.275 c
19.01 57.558 19.928 57.312 20.645 57.726 c
21.363 58.14 21.608 59.057 21.194 59.775 c
s
38.944 59.275 m
38.53 59.992 37.613 60.238 36.895 59.824 c
36.178 59.409 35.932 58.492 36.346 57.775 c
36.76 57.058 37.678 56.812 38.395 57.226 c
39.113 57.64 39.358 58.557 38.944 59.275 c
s
51.145 58.601 m
50.317 58.601 49.645 57.929 49.645 57.101 c
49.645 56.273 50.317 55.601 51.145 55.601 c
51.974 55.601 52.645 56.273 52.645 57.101 c
52.645 57.929 51.974 58.601 51.145 58.601 c
s
4.395 58.601 m
3.567 58.601 2.895 57.929 2.895 57.101 c
2.895 56.273 3.567 55.601 4.395 55.601 c
5.224 55.601 5.895 56.273 5.895 57.101 c
5.895 57.929 5.224 58.601 4.395 58.601 c
s
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Rope.side)
(Rope.side) 1 4.6 60.9998 33.3999 [
%AI3_Tile
(0 O 0 R 0 0 0 1 k
 0 0 0 1 K
) @
(
%AI6_BeginPatternLayer
0 i
1 J 1 j 0.6 w 4 M []0 d
%AI3_Note:
0 D
24.9999 7 m
15.6521 4.663 8.125 8.6981 1 14.1407 C
S
36.9999 7 m
22.3477 3.337 12.168 15.3276 1 23.859 C
S
48.9999 7 m
29.3464 2.0866 17.7386 25.3332 1 30.6213 C
S
1 30.9999 m
24.9999 36.9999 36.9999 1 60.9998 7 C
S
13 30.9999 m
32.6534 35.9133 44.2611 12.6667 60.9998 7.3786 C
S
24.9999 30.9999 m
39.652 34.6629 49.8317 22.6722 60.9998 14.1407 C
S
36.9999 30.9999 m
46.3476 33.3369 53.8749 29.3018 60.9998 23.859 C
S
48.9999 30.9999 m
53.3464 32.0865 57.2978 31.7908 60.9998 30.6213 C
S
13 7 m
8.6535 5.9134 4.7019 6.2091 1 7.3786 C
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Scales)
(Scales) 1.6 9.3475 48.088 55.8355 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
1.6 9.3475 m
1.6 55.8355 L
48.088 55.8355 L
48.088 9.3475 L
1.6 9.3475 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
17.0956 9.3475 m
12.8162 9.3475 9.3475 5.8787 9.3475 1.6 C
9.3475 5.8787 5.8787 9.3475 1.6 9.3475 C
1.6 13.6262 5.0687 17.095 9.3475 17.095 c
13.6268 17.095 17.0956 13.6262 17.0956 9.3475 C
s
32.5918 9.3475 m
28.3125 9.3475 24.8437 5.8787 24.8437 1.6 C
24.8437 5.8787 21.3743 9.3475 17.0956 9.3475 C
17.0956 13.6262 20.5644 17.095 24.8437 17.095 c
29.1224 17.095 32.5918 13.6262 32.5918 9.3475 C
s
48.088 9.3475 m
43.8087 9.3475 40.3399 5.8787 40.3399 1.6 C
40.3399 5.8787 36.8705 9.3475 32.5918 9.3475 C
32.5918 13.6262 36.0606 17.095 40.3399 17.095 c
44.6186 17.095 48.088 13.6262 48.088 9.3475 C
s
17.0956 40.3393 m
12.8162 40.3393 9.3475 36.8699 9.3475 32.5912 C
9.3475 36.8699 5.8787 40.3393 1.6 40.3393 C
1.6 44.6181 5.0687 48.0874 9.3475 48.0874 c
13.6268 48.0874 17.0956 44.6181 17.0956 40.3393 C
s
17.0956 24.8431 m
12.8162 24.8431 9.3475 21.3743 9.3475 17.095 C
9.3475 21.3743 5.8787 24.8431 1.6 24.8431 C
1.6 29.1218 5.0687 32.5912 9.3475 32.5912 c
13.6268 32.5912 17.0956 29.1218 17.0956 24.8431 C
s
32.5918 24.8431 m
28.3125 24.8431 24.8437 21.3743 24.8437 17.095 C
24.8437 21.3743 21.3743 24.8431 17.0956 24.8431 C
17.0956 29.1218 20.5644 32.5912 24.8437 32.5912 c
29.1224 32.5912 32.5918 29.1218 32.5918 24.8431 C
s
48.088 24.8431 m
43.8087 24.8431 40.3399 21.3743 40.3399 17.095 C
40.3399 21.3743 36.8705 24.8431 32.5918 24.8431 C
32.5918 29.1218 36.0606 32.5912 40.3399 32.5912 c
44.6186 32.5912 48.088 29.1218 48.088 24.8431 C
s
32.5918 40.3393 m
28.3125 40.3393 24.8437 36.8699 24.8437 32.5912 C
24.8437 36.8699 21.3743 40.3393 17.0956 40.3393 C
17.0956 44.6181 20.5644 48.0874 24.8437 48.0874 c
29.1224 48.0874 32.5918 44.6181 32.5918 40.3393 C
s
48.088 40.3393 m
43.8087 40.3393 40.3399 36.8699 40.3399 32.5912 C
40.3399 36.8699 36.8705 40.3393 32.5918 40.3393 C
32.5918 44.6181 36.0606 48.0874 40.3399 48.0874 c
44.6186 48.0874 48.088 44.6181 48.088 40.3393 C
s
17.0956 55.8355 m
12.8162 55.8355 9.3475 52.3662 9.3475 48.0874 C
9.3475 52.3662 5.8787 55.8355 1.6 55.8355 C
1.6 60.1143 5.0687 63.5836 9.3475 63.5836 c
13.6268 63.5836 17.0956 60.1143 17.0956 55.8355 C
s
32.5918 55.8355 m
28.3125 55.8355 24.8437 52.3662 24.8437 48.0874 C
24.8437 52.3662 21.3743 55.8355 17.0956 55.8355 C
17.0956 60.1143 20.5644 63.5836 24.8437 63.5836 c
29.1224 63.5836 32.5918 60.1143 32.5918 55.8355 C
s
48.088 55.8355 m
43.8087 55.8355 40.3399 52.3662 40.3399 48.0874 C
40.3399 52.3662 36.8705 55.8355 32.5918 55.8355 C
32.5918 60.1143 36.0606 63.5836 40.3399 63.5836 c
44.6186 63.5836 48.088 60.1143 48.088 55.8355 C
s
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (SolidStar.side)
(SolidStar.side) 1 1 33.0117 33.0117 [
%AI3_Tile
(0 O 0 R 0.05 0.2 0.95 0 k
 0.05 0.2 0.95 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
7.9689 26.0458 m
14.5331 22.9874 l
17.0095 29.7904 L
19.4859 22.9874 l
26.0473 26.0458 l
22.9889 19.4815 l
29.792 17.0052 l
22.9889 14.5288 l
26.0473 7.9674 l
19.4859 11.0257 l
17.0095 4.2226 l
14.5305 11.0257 l
7.9689 7.9674 l
11.0273 14.5288 l
4.2242 17.0052 l
11.0273 19.4843 L
7.9689 26.0458 l
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stars)
(Stars) 1 1 63.384 84.766 [
%AI3_Tile
(0 O 0 R 1 0.9 0.1 0 k
 1 0.9 0.1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
1 1 m
1 84.766 L
63.384 84.766 L
63.384 1 L
1 1 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.25 1 0 k
 0 0.25 1 0 K
) @
(
%AI6_BeginPatternLayer
*u
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
37.668 67.113 m
43.924 62.567 L
41.535 55.213 L
47.791 59.757 L
54.046 55.212 L
51.657 62.566 L
57.914 67.112 L
50.18 67.112 L
47.791 74.467 L
45.402 67.113 L
37.668 67.113 L
f
16.596 59.757 m
22.851 55.212 L
20.462 62.566 L
26.719 67.112 L
18.985 67.112 L
16.596 74.467 L
14.207 67.113 L
6.473 67.113 L
12.729 62.567 L
10.34 55.213 L
16.596 59.757 L
f
20.462 20.683 m
26.719 25.229 L
18.985 25.229 L
16.596 32.584 L
14.207 25.23 L
6.473 25.23 L
12.729 20.684 L
10.34 13.33 L
16.596 17.874 L
22.851 13.329 L
20.462 20.683 L
f
38.447 34.271 m
36.058 41.625 L
42.315 46.171 L
34.581 46.171 L
32.192 53.526 L
29.803 46.172 L
22.069 46.172 L
28.325 41.626 L
25.936 34.272 L
32.192 38.816 L
38.447 34.271 L
f
51.657 20.683 m
57.914 25.229 L
50.18 25.229 L
47.791 32.584 L
45.402 25.23 L
37.668 25.23 L
43.924 20.684 L
41.535 13.33 L
47.791 17.874 L
54.046 13.329 L
51.657 20.683 L
f
*U
34.581 4.288 m
32.192 11.643 L
29.803 4.289 L
22.069 4.289 L
26.5962 1 L
37.7885 1 L
42.315 4.288 L
34.581 4.288 L
f
53.261 4.289 m
57.7882 1 L
63.384 1 L
63.384 11.643 L
60.995 4.289 L
53.261 4.289 L
f
4.866 41.625 m
11.123 46.171 L
3.389 46.171 L
1 53.526 L
1 38.816 L
7.255 34.271 L
4.866 41.625 L
f
36.058 41.625 m
42.315 46.171 L
34.581 46.171 L
32.192 53.526 L
29.803 46.172 L
22.069 46.172 L
28.325 41.626 L
25.936 34.272 L
32.192 38.816 L
38.447 34.271 L
36.058 41.625 L
f
53.261 46.172 m
59.517 41.626 L
57.128 34.272 L
63.384 38.816 L
63.384 53.526 L
60.995 46.172 L
53.261 46.172 L
f
4.866 83.508 m
6.5974 84.766 L
1 84.766 L
1 80.699 L
7.255 76.154 L
4.866 83.508 L
f
25.936 76.155 m
32.192 80.699 L
38.447 76.154 L
36.058 83.508 L
37.7895 84.766 L
26.5951 84.766 L
28.325 83.509 L
25.936 76.155 L
f
22.851 55.212 m
20.462 62.566 L
26.719 67.112 L
18.985 67.112 L
16.596 74.467 L
14.207 67.113 L
6.473 67.113 L
12.729 62.567 L
10.34 55.213 L
16.596 59.757 L
22.851 55.212 L
f
41.535 55.213 m
47.791 59.757 L
54.046 55.212 L
51.657 62.566 L
57.914 67.112 L
50.18 67.112 L
47.791 74.467 L
45.402 67.113 L
37.668 67.113 L
43.924 62.567 L
41.535 55.213 L
f
50.18 25.229 m
47.791 32.584 L
45.402 25.23 L
37.668 25.23 L
43.924 20.684 L
41.535 13.33 L
47.791 17.874 L
54.046 13.329 L
51.657 20.683 L
57.914 25.229 L
50.18 25.229 L
f
18.985 25.229 m
16.596 32.584 L
14.207 25.23 L
6.473 25.23 L
12.729 20.684 L
10.34 13.33 L
16.596 17.874 L
22.851 13.329 L
20.462 20.683 L
26.719 25.229 L
18.985 25.229 L
f
3.388 4.289 m
1 11.643 L
1 1 L
6.5948 1 L
11.122 4.289 L
3.388 4.289 L
f
57.128 76.154 m
63.384 80.699 L
63.384 84.766 L
57.7855 84.766 L
59.517 83.508 L
57.128 76.154 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (TriBevel.outer)
(TriBevel.outer) 1 1.0004 31.6124 31.6127 [
%AI3_Tile
(0 O 0 R 0 0 0 0.3 k
 0 0 0 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
31.6118 5.4917 m
27.1221 5.4917 L
27.1205 1.0011 L
27.8031 1.0011 L
27.8031 4.8091 L
31.6118 4.8091 L
31.6118 5.4917 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.2 k
 0 0 0 0.2 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
31.6149 9.5062 m
23.1111 9.5062 L
23.1111 1.0015 L
27.1205 1.0015 L
27.1205 5.493 L
31.6144 5.493 L
31.6149 9.5062 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.4 k
 0 0 0 0.4 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
31.6124 10.485 m
22.1297 10.485 L
22.1292 1.0015 L
23.1084 1.0015 L
23.1084 9.5049 L
31.6124 9.5049 L
31.6124 10.485 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.3 k
 0 0 0 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
31.6129 17.2066 m
15.4064 17.2085 L
15.4064 1 L
22.1301 1 L
22.1301 10.4868 L
31.6129 10.4868 L
31.6129 17.2066 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.5 k
 0 0 0 0.5 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
31.6149 18.3658 m
14.2517 18.3658 L
14.2515 1.0009 L
15.4043 1.0009 L
15.4043 17.2093 L
31.6149 17.2093 L
31.6149 18.3658 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.4 k
 0 0 0 0.4 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
31.6124 30.4755 m
2.1395 30.4755 L
2.1395 1.0015 L
14.249 1 L
14.249 18.366 L
31.6149 18.366 L
31.6124 30.4755 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.6 k
 0 0 0 0.6 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
15.4066 16.847 m
14.2778 18.3257 l
15.4066 17.2057 l
15.4066 16.847 l
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.5 k
 0 0 0 0.5 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
23.1095 9.1906 m
22.1759 10.4392 l
23.1082 9.505 l
23.1095 9.1906 l
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.4 k
 0 0 0 0.4 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
27.8039 4.6026 m
27.1619 5.4533 l
27.8029 4.8093 l
27.8039 4.6026 l
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (TriBevel.side)
(TriBevel.side) 1.0006 1 29.0006 31.6124 [
%AI3_Tile
(0 O 0 R 0 0 0 0.3 k
 0 0 0 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
29 4.8087 m
29 4.8087 L
29.0026 5.4927 L
1.0026 5.4927 L
1 4.8087 L
1 4.8087 L
29 4.8087 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.2 k
 0 0 0 0.2 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
29.0026 5.4927 m
29.0005 9.5045 L
1.0005 9.5045 L
1.0026 5.4927 L
29.0026 5.4927 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.4 k
 0 0 0 0.4 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
29.0005 9.5045 m
29.0011 10.4865 L
1.0011 10.4865 L
1.0005 9.5045 L
29.0005 9.5045 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.3 k
 0 0 0 0.3 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
29.0011 10.4865 m
29.003 17.209 L
1.003 17.209 L
1.0011 10.4865 L
29.0011 10.4865 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.5 k
 0 0 0 0.5 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
29.003 17.209 m
29.0031 18.3656 L
1.0031 18.3656 L
1.003 17.209 L
29.003 17.209 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0.4 k
 0 0 0 0.4 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
29.0031 18.3656 m
29.0006 30.4752 L
1.0006 30.4752 L
1.0031 18.3656 L
29.0031 18.3656 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Waves-scroll)
(Waves-scroll) 17.926 10.516 68.663 69.012 [
%AI3_Tile
(0 O 0 R 1 0 0.3 0 k
 1 0 0.3 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
17.926 69.012 m
17.926 10.516 L
68.663 10.516 L
68.663 69.012 L
17.926 69.012 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.55 0 0 0 k
 0.55 0 0 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.75 w 4 M []0 d
%AI3_Note:
0 D
65.335 70.465 m
65.881 68.746 67.444 68.168 68.663 69.012 C
67.538 69.668 68.011 71.255 69.686 70.933 c
72.124 70.464 71.894 67.213 70.53 65.589 c
68.561 63.245 64.565 60.995 53.241 71.117 C
S
39.964 70.465 m
40.511 68.746 42.074 68.168 43.293 69.012 C
42.168 69.668 42.64 71.255 44.316 70.933 c
46.753 70.464 46.524 67.213 45.16 65.589 c
43.191 63.245 39.195 60.995 27.87 71.117 c
S
14.594 70.465 m
15.141 68.746 16.704 68.168 17.923 69.012 C
16.798 69.668 17.27 71.255 18.945 70.933 c
21.382 70.464 21.153 67.213 19.789 65.589 c
17.821 63.245 13.825 60.995 2.5 71.117 c
S
10.959 51.619 m
22.282 41.497 26.278 43.747 28.247 46.09 c
29.611 47.715 29.841 50.965 27.403 51.434 c
25.728 51.757 25.255 50.169 26.38 49.513 C
25.161 48.669 23.599 49.248 23.052 50.966 c
22.723 51.997 23.38 53.966 24.872 54.903 c
27.267 56.406 31.371 56.05 36.328 51.619 c
47.653 41.497 51.649 43.746 53.618 46.09 c
54.982 47.715 55.212 50.965 52.774 51.434 c
51.099 51.757 50.626 50.169 51.751 49.513 C
50.532 48.669 48.97 49.248 48.423 50.966 c
48.094 51.997 48.751 53.966 50.243 54.903 c
52.638 56.406 56.742 56.05 61.699 51.619 C
73.024 41.497 77.02 43.747 78.988 46.09 c
S
70.156 32.12 m
65.199 36.551 61.095 36.907 58.7 35.404 c
57.208 34.468 56.552 32.499 56.88 31.468 c
57.427 29.749 58.99 29.171 60.208 30.015 C
59.083 30.671 59.556 32.258 61.231 31.936 c
63.669 31.467 63.439 28.216 62.075 26.592 c
60.106 24.248 56.11 21.998 44.786 32.12 C
39.829 36.551 35.725 36.907 33.33 35.404 c
31.838 34.468 31.182 32.499 31.51 31.468 c
32.056 29.749 33.619 29.171 34.838 30.015 C
33.713 30.671 34.186 32.258 35.861 31.936 c
38.299 31.467 38.069 28.216 36.705 26.592 c
34.737 24.248 30.74 21.998 19.415 32.12 c
14.458 36.551 10.354 36.907 7.96 35.404 c
S
19.792 7.094 m
21.157 8.719 21.386 11.968 18.949 12.437 c
17.274 12.76 16.801 11.172 17.926 10.516 C
16.708 9.673 15.145 10.252 14.598 11.969 c
14.27 13 14.926 14.969 16.418 15.906 c
18.812 17.409 22.916 17.053 27.874 12.622 c
39.199 2.5 43.195 4.75 45.163 7.094 c
46.528 8.719 46.757 11.968 44.32 12.437 c
42.644 12.76 42.172 11.172 43.297 10.516 C
42.078 9.673 40.515 10.252 39.968 11.969 c
39.64 13 40.297 14.969 41.788 15.906 c
44.183 17.409 48.287 17.053 53.245 12.622 C
64.569 2.5 68.565 4.75 70.534 7.094 c
71.898 8.719 72.127 11.968 69.69 12.437 c
68.014 12.76 67.542 11.172 68.667 10.516 C
67.448 9.673 65.885 10.252 65.338 11.969 c
65.011 13 65.667 14.969 67.159 15.906 c
69.553 17.409 73.657 17.053 78.615 12.622 c
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 O
0 0 0 0.26 k
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
642.4434 388.9951 m
648.0957 369.7402 655.752 357.9189 664.1797 357.9189 c
681.5771 357.9189 695.6797 408.2866 695.6797 470.4185 c
695.6797 532.5503 681.5771 582.9185 664.1797 582.9185 c
653.875 582.9185 645.2842 567.8257 639.5371 540.5005 C
639.5371 540.5005 L
622.3965 541.4463 L
622.3965 541.4463 L
631.0703 579.2085 646.2129 600.9185 664.1797 600.9185 c
691.5176 600.9185 713.6797 542.4917 713.6797 470.4185 c
713.6797 398.3452 691.5176 339.9189 664.1797 339.9189 c
648.5371 339.9189 634.5879 359.0488 625.5176 388.9189 C
F
625.5176 388.9189 m
625.0215 390.5537 624.54 392.2202 624.0732 393.9175 C
625.0957 393.9185 L
641.0869 393.9185 L
641.084 393.9175 L
641.5225 392.2275 641.9766 390.5859 642.4434 388.9951 c
N
0 O
0 0 0 0.28 k
368.084 521.1665 m
369.25 413.3335 L
369.75 413.8335 L
366.0039 413.9053 362.25 413.917 358.502 413.8716 C
359.2188 409.4355 L
362.1807 400.877 365.8184 395.8335 369.75 395.8335 c
379.6904 395.8335 387.75 428.0693 387.75 467.8335 c
387.75 507.5972 379.6904 539.8335 369.75 539.8335 c
365.7725 539.8335 362.0957 534.6729 359.1172 525.9336 C
357.8281 521.8682 L
361.1631 521.8057 364.501 521.7861 367.8311 521.813 C
368.084 521.1665 L
f
0 0 0 0.1 k
0 R
0 0 0 1 K
0.5 w [3 6 ]0 d
369.5 413.5 m
364.5293 413.5 360.5 437.6768 360.5 467.5 c
360.5 497.3232 364.5293 521.5 369.5 521.5 c
B
[]0 d
369.5 521.5 m
374.4707 521.5 378.5 497.3232 378.5 467.5 c
378.5 437.6768 374.4707 413.5 369.5 413.5 c
B
0 0 0 0.42 k
1 w
356.6611 522.7388 m
359.8262 533.7988 363.9678 540.5 368.5 540.5 c
378.4404 540.5 386.5 508.2637 386.5 468.5 c
386.5 428.7363 378.4404 396.5 368.5 396.5 c
363.9316 396.5 359.7607 403.3076 356.5869 414.5254 C
356.5 414.5283 L
350.8096 414.4482 345.1357 414.2378 339.5322 413.9136 C
341.1563 412.6074 L
346.5889 378.7842 356.7988 356 368.5 356 c
385.8965 356 400 406.3691 400 468.5 c
400 530.6309 385.8965 581 368.5 581 c
356.5605 581 346.1719 557.2729 340.8291 522.3008 C
338.4863 523.2852 L
344.1016 522.9282 349.7842 522.6802 355.4795 522.5571 C
356.6611 522.7388 L
f
0 R
0 0 0 1 K
3 w
323.1855 523.6416 m
338.0859 522.1104 353.9023 521.2915 369.5 521.5 c
371.6699 521.5288 373.8359 521.5811 375.9941 521.6543 c
S
1 w
311.1924 525.0503 m
315.1064 524.5317 319.1113 524.0601 323.1855 523.6416 c
N
0 R
0 0 0 1 K
3 w
252.5 539.5 m
263.7344 533.8828 285.4868 528.457 311.1924 525.0503 c
S
[3 4 ]0 d
384.9629 522.082 m
386.8184 522.1958 388.666 522.3242 390.502 522.4673 c
S
[]0 d
439.2354 529.8784 m
451.7207 532.8179 461.916 536.208 468.5 539.5 c
S
1 w
426.3125 527.1611 m
430.834 528.0059 435.1563 528.918 439.2354 529.8784 c
N
0 R
0 0 0 1 K
3 w
403.9111 523.7744 m
411.7441 524.6919 419.2686 525.8452 426.3125 527.1611 c
S
324.4189 411.6563 m
338.9199 413.0806 354.2764 413.7935 369.5 413.5 c
371.5 413.4614 373.499 413.4019 375.4932 413.3223 c
S
1 w
309.9512 409.9658 m
314.6484 410.604 319.4844 411.1714 324.4189 411.6563 c
N
0 R
0 0 0 1 K
3 w
252.5 395.5 m
263.8203 401.1602 284.9292 406.5674 309.9512 409.9658 c
S
[3 4 ]0 d
385.5576 412.7544 m
387.04 412.6465 388.5186 412.5288 389.9922 412.4014 c
S
[]0 d
440.4941 404.1445 m
451.6426 401.4238 461.2422 398.4033 468.5 395.5 c
S
1 w
425.6777 407.3853 m
430.8516 406.3784 435.8096 405.2881 440.4941 404.1445 c
N
0 R
0 0 0 1 K
3 w
404.0518 410.8818 m
411.5479 409.9131 418.8018 408.7231 425.6777 407.3853 c
S
5 w
343.2314 405.3887 m
343.6152 403.3237 344.0176 401.3066 344.4375 399.3408 c
S
346.7021 389.8667 m
352.4395 368.3857 360.5322 355 369.5 355 c
386.8965 355 401 405.3691 401 467.5 c
401 529.6309 386.8965 580 369.5 580 c
360.4229 580 352.2422 566.2861 346.4932 544.3433 c
S
344.2725 534.8818 m
343.7324 532.3066 343.2227 529.646 342.7451 526.9067 c
S
342.7451 526.9067 m
342.627 526.2261 342.5098 525.541 342.3945 524.8506 c
S
[3 4 ]0 d
340.9199 514.8662 m
339.0459 500.4697 338 484.4214 338 467.5 c
338 450.5791 339.0459 434.5303 340.9199 420.1343 c
S
2 w
356.0723 515.4478 m
353.2285 502.7158 351.5 485.915 351.5 467.5 c
351.5 448.708 353.2998 431.5967 356.248 418.7754 c
S
[]0 d
358.9688 409.1021 m
361.9307 400.5439 365.5684 395.5 369.5 395.5 c
379.4404 395.5 387.5 427.7363 387.5 467.5 c
387.5 507.2637 379.4404 539.5 369.5 539.5 c
365.5225 539.5 361.8457 534.3394 358.8672 525.6006 c
S
306.5 539.5 m
316.0859 539.5 343.542 539.5 369.834 539.5 c
S
[3 4 ]0 d
369.834 539.5 m
375.5068 539.5 381.126 539.5 386.5 539.5 c
S
[]0 d
401.166 539.5 m
411.1074 539.5 419.1465 539.5 423.5 539.5 c
S
306.5 395.5 m
316.0059 395.5 343.0791 395.5 369.166 395.5 c
S
[3 4 ]0 d
369.166 395.5 m
375.0664 395.5 380.916 395.5 386.5 395.5 c
S
[]0 d
401.166 395.5 m
411.1074 395.5 419.1465 395.5 423.5 395.5 c
S
0 To
1 0 0 1 397.333 364.667 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 21 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(A) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 361.333 460 0 Tp
TP
0 Tr
(D) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 302 374 0 Tp
TP
0 Tr
(T) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
2 w
298.832 402.3408 m
301.1587 397.9531 303.7578 395.5 306.5 395.5 c
316.4404 395.5 324.5 427.7363 324.5 467.5 c
324.5 507.2637 316.4404 539.5 306.5 539.5 c
303.5977 539.5 300.8564 536.7529 298.4287 531.873 c
S
414.8564 404.3291 m
417.4219 398.7007 420.3682 395.5 423.5 395.5 c
433.4404 395.5 441.5 427.7363 441.5 467.5 c
441.5 507.2637 433.4404 539.5 423.5 539.5 c
420.166 539.5 417.0439 535.875 414.3672 529.5566 c
S
252.5 539.5 m
262.4409 539.5 270.5 507.2646 270.5 467.5 c
270.5 427.7354 262.4409 395.5 252.5 395.5 c
242.5591 395.5 234.5 427.7354 234.5 467.5 c
234.5 507.2646 242.5591 539.5 252.5 539.5 c
s
468.5 539.5 m
478.4404 539.5 486.5 507.2646 486.5 467.5 c
486.5 427.7354 478.4404 395.5 468.5 395.5 c
S
1 w [3 6 ]0 d
468.5 395.5 m
458.5596 395.5 450.5 427.7354 450.5 467.5 c
450.5 507.2646 458.5596 539.5 468.5 539.5 c
S
0 To
1 0 0 1 359.3301 551.2539 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
[]0 d
(A') Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 391.334 571.3335 0 Tp
TP
0 Tr
/_Symbol 21 Tf
(g) Tx 1 0 Tk
(\r) TX 
TO
637.417 531.5615 m
638.1445 535.4775 638.9395 539.2217 639.7959 542.7725 c
N
0 R
0 0 0 1 K
5 w [3 4 ]0 d
639.0264 399.3848 m
634.7402 418.6016 632.1797 442.9419 632.1797 469.4185 c
632.1797 492.3916 634.1074 513.7563 637.417 531.5615 c
S
1 w []0 d
642.2559 386.9414 m
641.0947 390.792 640.0146 394.9521 639.0264 399.3848 c
N
0 R
0 0 0 1 K
5 w
639.7959 542.7725 m
645.5732 566.7412 654.1299 581.9185 663.6797 581.9185 c
681.0771 581.9185 695.1797 531.5503 695.1797 469.4185 c
695.1797 407.2866 681.0771 356.9189 663.6797 356.9189 c
655.4063 356.9189 647.8779 368.3105 642.2559 386.9414 c
S
2 w
587.1797 464.9185 m
587.1797 425.1538 579.1211 392.9185 569.1797 392.9185 c
559.2383 392.9185 551.1797 425.1538 551.1797 464.9185 c
551.1797 504.6831 559.2383 536.9185 569.1797 536.9185 c
579.1211 536.9185 587.1797 504.6831 587.1797 464.9185 c
s
[3 4 ]0 d
758.1797 392.9185 m
748.2393 392.9185 740.1797 425.1538 740.1797 464.9185 c
740.1797 504.6831 748.2393 536.9185 758.1797 536.9185 c
S
[]0 d
758.1797 536.9185 m
768.1211 536.9185 776.1797 504.6831 776.1797 464.9185 c
776.1797 425.1538 768.1211 392.9185 758.1797 392.9185 c
S
[3 4 ]0 d
663.8467 392.252 m
653.9063 392.252 645.8467 424.4873 645.8467 464.252 c
645.8467 504.0166 653.9063 536.252 663.8467 536.252 c
S
[]0 d
663.8467 536.252 m
673.7881 536.252 681.8467 504.0166 681.8467 464.252 c
681.8467 424.4873 673.7881 392.252 663.8467 392.252 c
S
750.1797 536.9185 m
758.1797 536.9185 l
S
738.1797 536.9185 m
750.1797 536.9185 l
S
712.1797 536.9185 m
738.1797 536.9185 l
S
1 w
701.1797 536.9185 m
712.1797 536.9185 l
N
0 R
0 0 0 1 K
2 w
696.6797 536.9185 m
701.1797 536.9185 l
S
1 w
681.1797 536.9185 m
696.6797 536.9185 l
N
0 R
0 0 0 1 K
2 w
587.1797 536.9185 m
681.1797 536.9185 l
S
1 w
577.1797 536.9185 m
587.1797 536.9185 l
N
0 R
0 0 0 1 K
2 w
569.1797 536.9185 m
577.1797 536.9185 l
S
750.6797 392.9185 m
758.1797 392.9185 l
S
739.6797 392.9185 m
750.6797 392.9185 l
S
709.1797 392.9185 m
739.6797 392.9185 l
S
1 w
699.6797 392.9185 m
709.1797 392.9185 l
N
0 R
0 0 0 1 K
2 w
694.6797 392.9185 m
699.6797 392.9185 l
S
1 w
679.1797 392.9185 m
694.6797 392.9185 l
N
0 R
0 0 0 1 K
2 w
587.6797 392.9185 m
679.1797 392.9185 l
S
1 w
576.6797 392.9185 m
587.6797 392.9185 l
N
0 R
0 0 0 1 K
2 w
569.1797 392.9185 m
576.6797 392.9185 l
S
596.1797 464.9185 m
596.1797 420.1836 584.0918 383.9189 569.1797 383.9189 c
554.2686 383.9189 542.1797 420.1836 542.1797 464.9185 c
542.1797 509.6533 554.2686 545.9185 569.1797 545.9185 c
584.0918 545.9185 596.1797 509.6533 596.1797 464.9185 c
s
1 w
625.4609 386.4785 m
624.1602 390.6377 622.9561 395.0127 621.8564 399.5801 c
N
0 R
0 0 0 1 K
2 w
622.9785 543.7085 m
631.915 577.6758 646.8125 599.9185 663.6797 599.9185 c
691.0176 599.9185 713.1797 541.4917 713.1797 469.4185 c
713.1797 397.3452 691.0176 338.9189 663.6797 338.9189 c
648.29 338.9189 634.54 357.4355 625.4609 386.4785 c
S
1 w
622.3965 541.4463 m
622.5879 542.2061 622.7813 542.96 622.9785 543.7085 c
N
619.709 529.4121 m
620.5254 533.5586 622.3965 541.4463 y
N
0 R
0 0 0 1 K
2 w [3 4 ]0 d
621.8564 399.5801 m
616.9951 419.7739 614.1797 443.7295 614.1797 469.4185 c
614.1797 491.0488 616.1758 511.4507 619.709 529.4121 c
S
[]0 d
748.1123 540.1001 m
749.5303 541.8105 751.0078 543.1704 752.5332 544.144 c
S
1 w
742.9385 531.7881 m
744.5469 535.0928 746.2793 537.8892 748.1123 540.1001 c
N
0 R
0 0 0 1 K
2 w [3 4 ]0 d
743.334 397.2505 m
736.0117 411.7383 731.1797 436.6357 731.1797 464.9185 c
731.1797 492.6885 735.8379 517.1948 742.9385 531.7881 c
S
1 w []0 d
748.3438 389.4609 m
746.5752 391.5376 744.8975 394.1567 743.334 397.2505 c
N
0 R
0 0 0 1 K
2 w
752.5332 544.144 m
754.3535 545.3066 756.2432 545.9185 758.1797 545.9185 c
773.0918 545.9185 785.1797 509.6533 785.1797 464.9185 c
785.1797 420.1836 773.0918 383.9189 758.1797 383.9189 c
754.709 383.9189 751.3906 385.8828 748.3438 389.4609 c
S
569.1797 545.9185 m
596.1797 545.9185 614.1797 599.9185 659.1797 599.9185 c
704.1797 599.9185 731.1797 545.9185 758.1797 545.9185 c
S
758.1797 383.9189 m
731.1797 383.9189 713.1797 338.9189 668.1797 338.9189 c
623.1797 338.9189 596.1797 383.9189 569.1797 383.9189 c
S
0 To
1 0 0 1 559.584 427.0869 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 21 Tf
(T) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 525 398 0 Tp
TP
0 Tr
(T') Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 703.9912 368.0869 0 Tp
TP
0 Tr
(A'') Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 660.6846 556.0762 0 Tp
TP
0 Tr
/_Symbol 21 Tf
(g) Tx 1 0 Tk
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1322 2786 a(Figure)27 b(15)100 2938 y(If)c
Fl(T)239 2908 y Fh(0)284 2938 y Fp(is)g(parallel)e(in)i
Fl(X)7 b Fp(\()p Fl(L)p Fp(\))23 b(to)f Fl(@)5 b(N)k
Fp(\()p Fl(\015)c Fp(\),)24 b(then)f(pushing)g Fl(T)1895
2908 y Fh(0)1940 2938 y Fp(bac)n(k)f(across)e Fl(\015)28
b Fp(via)22 b(the)h(ann)n(ulus)0 3038 y Fl(Q)66 3008
y Fh(00)136 3038 y Fp(to)28 b Fl(T)39 b Fp(demonstrates)27
b(that)h Fl(T)39 b Fp(b)r(ounds)28 b(a)g(solid)f(torus)g(in)i
Fl(X)7 b Fp(\()p Fl(L)p Fp(\),)27 b(a)h(con)n(tradiction.)36
b(If)28 b Fl(T)2966 3008 y Fh(0)0 3137 y Fp(is)h(parallel)f(in)h
Fl(X)7 b Fp(\()p Fl(L)p Fp(\))28 b(to)h Fl(@)5 b(N)k
Fp(\()p Fl(K)d Fp(\),)29 b(then)h(since)e Fl(T)1582 3107
y Fh(0)1624 3137 y Fm(\\)20 b Fl(F)37 b Fp(=)25 b Fm(;)p
Fp(,)k Fl(F)41 b Fp(lies)29 b(in)g(the)g(pro)r(duct)g(region)0
3237 y(b)r(et)n(w)n(een)g Fl(T)383 3207 y Fh(0)433 3237
y Fp(and)g Fl(@)5 b(N)k Fp(\()p Fl(K)d Fp(\),)28 b(implying)h(that)g
Fl(F)40 b Fp(is)29 b(compressible,)e(a)i(con)n(tradiction.)38
b(If)29 b Fl(T)2882 3207 y Fh(0)2933 3237 y Fp(is)0 3337
y(compressible)d(in)i Fl(X)7 b Fp(\()p Fl(L)p Fp(\))27
b(via)g(a)g(compressing)f(disk)h Fl(D)r Fp(,)h(then)g(as)e(b)r(efore)i
(either)f Fl(T)2609 3307 y Fh(0)2659 3337 y Fp(b)r(ounds)g(a)0
3436 y(solid)i(torus)g Fl(M)492 3448 y Fj(1)559 3436
y Fp(in)h Fl(X)7 b Fp(\()p Fl(L)p Fp(\))29 b(or)g(it)h(b)r(ounds)f(a)h
(solid)f(torus)g Fl(M)1927 3448 y Fj(1)1993 3436 y Fp(con)n(taining)g
Fl(K)35 b Fp(or)29 b Fl(\015)5 b Fp(,)30 b(and)f(the)0
3536 y(curv)n(e)e(is)g(disjoin)n(t)h(from)f(a)g(meridian)g(disk)h(for)f
Fl(M)1594 3548 y Fj(1)1631 3536 y Fp(.)100 3636 y(If)k
Fl(M)267 3648 y Fj(1)331 3636 y Fm(\022)d Fl(X)7 b Fp(\()p
Fl(L)p Fp(\),)31 b(then)g Fl(Q)933 3606 y Fh(0)o(0)995
3636 y Fm(\\)21 b Fl(M)1152 3648 y Fj(1)1217 3636 y Fp(=)27
b Fl(\015)1352 3648 y Fj(1)1420 3636 y Fp(m)n(ust)k(represen)n(t)e(a)h
(generator)e(of)j Fl(\031)2579 3648 y Fj(1)2616 3636
y Fp(\()p Fl(M)2729 3648 y Fj(1)2766 3636 y Fp(\).)46
b(F)-7 b(or)0 3736 y(otherwise)37 b(either)h Fl(\015)669
3748 y Fj(1)745 3736 y Fp(is)g(a)g(meridian)g(curv)n(e,)i(and)e(then)h
Fl(Q)1972 3706 y Fh(00)2052 3736 y Fp(together)f(with)g(a)g(meridian)0
3836 y(disk)i(is)f(a)h(disk)f(in)h Fl(X)7 b Fp(\()p Fl(L)p
Fp(\))40 b(with)g(b)r(oundary)f Fl(\015)5 b Fp(,)43 b(implying)c(that)h
Fl(\015)45 b Fp(is)40 b(n)n(ull)g(homotopic)f(in)0 3935
y Fl(X)7 b Fp(\()p Fl(K)f Fp(\),)36 b(a)f(con)n(tradiction,)h(or)e
Fl(\015)1043 3947 y Fj(1)1115 3935 y Fp(represen)n(ts)g(a)h(prop)r(er)f
(p)r(o)n(w)n(er)g(of)h(the)g(core)f(of)h Fl(M)2732 3947
y Fj(1)2769 3935 y Fp(.)60 b(But)0 4035 y(then)39 b(since)g
Fl(M)496 4047 y Fj(1)558 4035 y Fm([)26 b Fl(Q)705 4005
y Fh(00)789 4035 y Fm(\022)41 b Fl(X)7 b Fp(\()p Fl(F)12
b Fp(\),)41 b(this)e(implies)g(that)g Fl(\015)k Fp(represen)n(ts)37
b(a)h(prop)r(er)g(p)r(o)n(w)n(er)g(in)0 4134 y Fl(\031)47
4146 y Fj(1)85 4134 y Fp(\()p Fl(X)7 b Fp(\()p Fl(F)12
b Fp(\)\))32 b(=)f Fl(F)12 b Fp(\()p Fl(a;)i(b)p Fp(\),)34
b(and)f(so,)h(when)f(written)g(in)g(normal)f(form)g(as)g(a)h(w)n(ord)e
(in)j Fl(a)e Fp(and)h Fl(b)p Fp(,)0 4234 y(it)d(is)f(a)g(prop)r(er)f(p)
r(o)n(w)n(er)g(of)h(a)g(sub)n(w)n(ord.)41 b Fl(\015)5
b Fp(,)29 b(ho)n(w)n(ev)n(er,)f(is)h(parallel,)f(via)h(the)h(ann)n
(ulus)f Fl(Q)p Fp(,)g(to)g(a)0 4334 y(simple)f(curv)n(e)e
Fl(\021)31 b Fp(in)c Fl(@)5 b(X)i Fp(\()p Fl(F)12 b Fp(\))23
b(=)f Fl(G)p Fp(,)28 b(whic)n(h,)g(b)n(y)f(a)g(previous)f(argumen)n(t,)
g(cannot)h(b)r(e)h(a)f(prop)r(er)0 4433 y(p)r(o)n(w)n(er)h(in)h
Fl(\031)389 4445 y Fj(1)426 4433 y Fp(\()p Fl(G)p Fp(\).)42
b(This)28 b(in)h(itself)h(is)e(not)h(a)f(con)n(tradiction,)g(since)h
(there)f(are)g(simple)h(curv)n(es)0 4533 y(in)e Fl(G)g
Fp(whic)n(h)g(are)e(prop)r(er)h(p)r(o)n(w)n(ers)f(in)i
Fl(\031)1244 4545 y Fj(1)1282 4533 y Fp(\()p Fl(X)7 b
Fp(\()p Fl(F)12 b Fp(\)\).)37 b(But)27 b Fl(\021)j Fp(is)d(disjoin)n(t)
f(from)h(the)g(lo)r(ops)f Fl(\013)h Fp(and)0 4633 y Fl(\014)g
Fp(of)c(Figure)f(1)g(ab)r(o)n(v)n(e,)g(and)h(this)g(implies)g(that)g
(when)g(written)g(in)f(the)i(generators)c Fl(a;)14 b(b;)g(c;)g(d)22
b Fp(of)0 4732 y Fl(\031)47 4744 y Fj(1)85 4732 y Fp(\()p
Fl(G)p Fp(\))27 b(=)p Fl(<)g(a;)14 b(b;)g(c;)g(d)26 b
Fp(:)h(\()p Fl(AcaC)6 b Fp(\)\()p Fl(dbD)r(B)t Fp(\))29
b(=)d(1)h Fl(>)i Fp(p)r(ortra)n(y)n(ed)f(b)r(elo)n(w)i(\(Figure)f
(16\),)i(it)f(can)f(b)r(e)0 4832 y(c)n(hosen)22 b(to)g(b)r(e)h(a)f(w)n
(ord)g(in)h(only)f Fl(a)g Fp(and)h Fl(b)p Fp(,)g(since)f
Fl(G)8 b Fm(n)g Fp(\()p Fl(D)1728 4802 y Fj(2)1775 4832
y Fm([)g Fl(\013)h Fm([)f Fl(\014)t Fp(\))25 b(deformation)c(retracts)h
(on)n(to)0 4932 y(the)30 b(subgraph)f(generated)g(b)n(y)h
Fl(a)g Fp(and)g Fl(b)g Fp(of)g(the)g(spine)g(of)g Fl(G)21
b Fm(n)e Fl(D)2083 4901 y Fj(2)2121 4932 y Fp(.)44 b(The)30
b(inclusion-induced)0 5031 y(map)f(from)f Fl(\031)430
5043 y Fj(1)468 5031 y Fp(\()p Fl(G)p Fp(\))h(to)g Fl(F)12
b Fp(\()p Fl(a;)i(b)p Fp(\))28 b(is)h(the)g(ob)n(vious)f(one)g(whic)n
(h)h(sends)f Fl(c)h Fp(and)f Fl(d)h Fp(to)g(1;)g(therefore,)p
eop
%%Page: 16 16
16 15 bop 0 42 a Fn(16)1152 b(Mark)24 b(Brittenham)0
241 y Fl(\021)s Fp(,)34 b(when)e(written)h(as)f(a)g(w)n(ord)f(in)i
Fl(a)f Fp(and)g Fl(b)g Fp(in)h Fl(\031)1570 253 y Fj(1)1607
241 y Fp(\()p Fl(G)p Fp(\),)i(is)d(represen)n(ted)f(b)n(y)h(the)h
Fk(same)g Fp(w)n(ord)0 340 y(in)k Fl(F)12 b Fp(\()p Fl(a;)i(b)p
Fp(\).)63 b(Since)36 b(this)h(w)n(ord,)g(in)g Fl(F)12
b Fp(\()p Fl(a;)i(b)p Fp(\),)39 b(is)d(h)n(yp)r(othesized)g(to)g(b)r(e)
h(a)f(prop)r(er)f(p)r(o)n(w)n(er,)j Fl(\021)0 440 y Fp(therefore)26
b(m)n(ust)g(represen)n(t)f(a)h(prop)r(er)g(p)r(o)n(w)n(er)f(in)i
Fl(\031)1626 452 y Fj(1)1663 440 y Fp(\()p Fl(G)p Fp(\),)h(a)e(con)n
(tradiction.)35 b(But)27 b(then)g(when)0 540 y(w)n(e)i(push)g
Fl(T)385 510 y Fh(0)436 540 y Fp(bac)n(k)g(to)g Fl(T)40
b Fp(via)28 b Fl(Q)1027 510 y Fh(00)1069 540 y Fp(,)i
Fl(\015)k Fp(b)r(ecomes)29 b(the)g(core)f(of)h(the)g(solid)g(torus)f
Fl(M)2583 552 y Fj(1)2620 540 y Fp(,)i(implying)0 639
y(that)e Fl(T)39 b Fp(is)27 b(parallel)g(to)g Fl(@)5
b(N)k Fp(\()p Fl(\015)c Fp(\),)27 b(a)h(con)n(tradiction.)774
1574 y @beginspecial 34 @llx 105 @lly 614 @urx 438 @ury
1728 @rwi @setspecial
%%BeginDocument: d_fig16.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 8
%%For: (Mark Brittenham) (me)
%%Title: (d_fig16.eps)
%%CreationDate: (9/10/2002) (10:26 AM)
%%BoundingBox: 34 105 614 438
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: Helvetica
%%DocumentNeededFonts: Helvetica
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 18 16 594 778
%AI3_DocumentPreview: Header
%%PageOrigin:18 16
%%AI3_PaperRect:-18 778 594 -14
%%AI3_Margin:18 -15 -18 14
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
 end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_cmykcolor eq
	{
 end
	} if
} def
/setcmykcolor
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
0 68.4097 m
72 68.4097 l
S
0 61.209 m
72 61.209 L
S
0 54.0088 m
72 54.0088 L
S
0 46.8076 m
72 46.8076 L
S
0 39.6084 m
72 39.6084 L
S
0 32.4072 m
72 32.4072 L
S
0 25.207 m
72 25.207 L
S
0 18.0059 m
72 18.0059 L
S
0 10.8057 m
72 10.8057 L
S
0 3.6064 m
72 3.6064 L
S
68.4102 68.4097 m
68.4102 61.2217 l
S
54.0098 68.4097 m
54.0098 61.2217 L
S
39.6094 68.4097 m
39.6094 61.2217 L
S
25.21 68.4097 m
25.21 61.2217 L
S
10.8105 68.4097 m
10.8105 61.2217 L
S
68.4102 53.9717 m
68.4102 46.7842 l
S
54.0098 53.9717 m
54.0098 46.7842 L
S
39.6094 53.9717 m
39.6094 46.7842 L
S
25.21 53.9717 m
25.21 46.7842 L
S
10.8105 53.9717 m
10.8105 46.7842 L
S
68.4102 39.5967 m
68.4102 32.4092 l
S
54.0098 39.5967 m
54.0098 32.4092 L
S
39.6094 39.5967 m
39.6094 32.4092 L
S
25.21 39.5967 m
25.21 32.4092 L
S
10.8105 39.5967 m
10.8105 32.4092 L
S
68.4102 25.2217 m
68.4102 18.0342 l
S
54.0098 25.2217 m
54.0098 18.0342 L
S
39.6094 25.2217 m
39.6094 18.0342 L
S
25.21 25.2217 m
25.21 18.0342 L
S
10.8105 25.2217 m
10.8105 18.0342 L
S
68.4102 10.7842 m
68.4102 3.5967 l
S
54.0098 10.7842 m
54.0098 3.5967 L
S
39.6094 10.7842 m
39.6094 3.5967 L
S
25.21 10.7842 m
25.21 3.5967 L
S
10.8105 10.7842 m
10.8105 3.5967 L
S
61.1973 3.5967 m
61.1973 0 L
S
46.7969 3.5967 m
46.7969 0 L
S
32.3965 3.5967 m
32.3965 0 L
S
17.9971 3.5967 m
17.9971 0 L
S
3.5967 3.5967 m
3.5967 0 l
S
61.1973 18.0342 m
61.1973 10.8467 L
S
46.7969 18.0342 m
46.7969 10.8467 L
S
32.3965 18.0342 m
32.3965 10.8467 L
S
17.9971 18.0342 m
17.9971 10.8467 L
S
3.5967 18.0342 m
3.5967 10.8467 l
S
61.1973 32.4092 m
61.1973 25.2217 L
S
46.7969 32.4092 m
46.7969 25.2217 L
S
17.9971 32.4092 m
17.9971 25.2217 L
S
3.5967 32.4092 m
3.5967 25.2217 l
S
61.1973 46.7842 m
61.1973 39.5967 L
S
46.7969 46.7842 m
46.7969 39.5967 L
S
32.3965 46.7842 m
32.3965 39.5967 L
S
17.9971 46.7842 m
17.9971 39.5967 L
S
3.5967 46.7842 m
3.5967 39.5967 l
S
61.1973 61.2217 m
61.1973 54.0347 L
S
46.7969 61.2217 m
46.7969 54.0347 L
S
32.3965 61.2217 m
32.3965 54.0347 L
S
17.9971 61.2217 m
17.9971 54.0347 L
S
3.5967 61.2217 m
3.5967 54.0347 l
S
61.1973 71.959 m
61.1973 68.4717 L
S
46.7969 71.959 m
46.7969 68.4717 L
S
32.3965 71.959 m
32.3965 68.4717 L
S
17.9971 71.959 m
17.9971 68.4717 L
S
3.5967 71.959 m
3.5967 68.4717 l
S
32.3965 32.4092 m
32.3965 25.2217 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 0.3 w 4 M []0 d
%AI3_Note:
0 D
10.6 64.867 m
7.85 62.867 l
S
9.1 8.617 m
6.85 6.867 l
S
78.1 68.617 m
74.85 67.867 l
S
76.85 56.867 m
74.35 55.117 l
S
79.6 51.617 m
76.6 51.617 l
S
76.35 44.117 m
73.6 45.867 l
S
78.6 35.867 m
76.6 34.367 l
S
76.1 23.867 m
73.35 26.117 l
S
78.1 12.867 m
73.85 13.617 l
S
68.35 14.617 m
66.1 12.867 l
S
76.6 30.617 m
73.6 30.617 l
S
62.85 58.117 m
60.956 60.941 l
S
32.85 59.617 m
31.196 62.181 l
S
47.891 64.061 m
49.744 66.742 l
S
72.814 2.769 m
73.928 5.729 l
S
67.976 2.633 m
67.35 5.909 l
S
61.85 27.617 m
59.956 30.441 l
S
53.504 56.053 m
51.85 58.617 l
S
52.762 1.779 m
52.876 4.776 l
S
45.391 5.311 m
47.244 7.992 l
S
37.062 3.375 m
35.639 5.43 l
S
55.165 34.828 m
57.518 37.491 l
S
20.795 3.242 m
22.12 5.193 l
S
14.097 4.747 m
15.008 8.965 l
S
9.736 1.91 m
8.073 4.225 l
S
31.891 5.573 m
32.005 8.571 l
S
12.1 70.367 m
15.6 68.867 l
S
9.35 54.867 m
9.6 58.117 l
S
12.85 31.867 m
14.35 28.117 l
S
10.1 37.367 m
12.35 41.117 l
S
34.1 71.117 m
31.85 68.617 l
S
38.35 71.117 m
41.6 68.367 l
S
55.1 71.117 m
58.35 69.117 l
S
57.35 65.117 m
55.35 61.867 l
S
64.35 66.367 m
69.35 68.617 l
S
71.85 62.867 m
69.35 61.117 l
S
23.6 70.867 m
23.6 67.867 l
S
20.6 65.867 m
17.35 65.367 l
S
24.85 61.367 m
25.35 58.117 l
S
25.85 65.867 m
29.35 66.617 l
S
14.1 54.117 m
16.85 56.117 l
S
12.35 11.617 m
12.6 15.617 l
S
12.1 19.867 m
14.35 22.367 l
S
26.1 9.867 m
23.6 13.367 l
S
34.6 47.117 m
32.1 45.367 l
S
62.6 41.867 m
59.85 43.367 l
S
31.6 35.617 m
27.85 36.367 l
S
36.35 26.117 m
34.35 24.617 l
S
33.85 14.117 m
31.1 16.367 l
S
37.1 9.867 m
35.1 11.117 l
S
34.35 20.867 m
31.35 20.867 l
S
44.6 56.617 m
42.1 54.867 l
S
47.35 51.367 m
44.35 51.367 l
S
44.1 43.867 m
41.35 45.617 l
S
43.35 33.117 m
42.6 30.617 l
S
43.85 23.617 m
41.1 25.867 l
S
44.35 15.617 m
42.35 16.867 l
S
67.823 31.1 m
64.823 31.1 l
S
27.1 32.617 m
29.6 30.867 l
S
31.85 55.117 m
34.85 55.117 l
S
19.6 40.867 m
22.1 39.117 l
S
16.85 35.617 m
19.85 35.617 l
S
20.1 28.117 m
22.85 29.867 l
S
52.1 42.617 m
54.484 44.178 l
S
52.437 50.146 m
54.821 48.325 l
S
59.572 54.133 m
59.35 51.117 l
S
50.185 10.055 m
53.234 9.928 l
S
51.187 15.896 m
53.571 14.075 l
S
58.322 19.883 m
59.445 16.823 l
S
53.1 32.117 m
50.6 30.367 l
S
52.85 24.617 m
49.6 25.617 l
S
61.85 9.117 m
59.1 10.867 l
S
69.35 34.617 m
66.6 36.367 l
S
67.1 23.617 m
65.1 22.117 l
S
24.435 46.055 m
27.484 45.928 l
S
25.437 51.896 m
27.821 50.075 l
S
62.6 47.117 m
65.321 46.575 l
S
19.85 19.867 m
20.35 16.617 l
S
21.85 21.867 m
25.35 22.617 l
S
37.6 62.867 m
41.6 62.117 l
S
38.323 42.1 m
38.823 38.6 l
S
69.35 52.617 m
66.85 53.867 l
S
14.85 62.117 m
18.1 59.367 l
S
9.6 46.117 m
7.1 44.367 l
S
20.6 51.617 m
18.6 50.117 l
S
46.141 70.811 m
47.994 73.492 l
S
69.391 40.561 m
71.244 43.242 l
S
38.641 49.311 m
39.35 52.117 l
S
25.141 16.811 m
25.85 19.617 l
S
36.6 32.867 m
34.6 31.367 l
S
6.1 68.617 m
2.85 67.867 l
S
4.85 56.867 m
2.35 55.117 l
S
7.6 51.617 m
4.6 51.617 l
S
6.6 35.867 m
4.6 34.367 l
S
6.1 12.867 m
1.85 13.617 l
S
4.6 30.617 m
1.6 30.617 l
S
72.814 74.769 m
73.928 77.729 l
S
67.976 74.633 m
67.35 77.909 l
S
52.762 73.779 m
52.876 76.776 l
S
37.062 75.375 m
35.639 77.43 l
S
20.795 75.242 m
22.12 77.193 l
S
9.736 73.91 m
8.073 76.225 l
S
10.1 23.617 m
6.35 24.367 l
S
73.217 18.276 m
71.323 21.1 l
S
28.823 39.6 m
29.505 42.389 l
S
49.6 38.617 m
47.6 37.117 l
S
60.323 73.6 m
62.323 76.6 l
S
60.323 1.6 m
62.323 4.6 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
1 D
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f
13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f
41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f
27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f
13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f
41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.2 8.2 m
80.7 8.2 L
S
8.2 22.6001 m
80.7 22.6001 L
S
8.2 37.0002 m
80.7 37.0002 L
S
8.2 51.4 m
80.7 51.4 L
S
8.2 65.8001 m
80.7 65.8001 L
S
8.2 15.4 m
80.7 15.4 L
S
8.2 29.8001 m
80.7 29.8001 L
S
8.2 44.2 m
80.7 44.2 L
S
8.2 58.6001 m
80.7 58.6001 L
S
8.2 73.0002 m
80.7 73.0002 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 R
0 0 0 1 K
0 i
0 J 0 j 4 w 4 M []0 d
%AI3_Note:
0 D
180.0908 214.2744 m
160.208 214.2246 144.0498 230.3008 144 250.1836 c
143.9502 270.0654 160.0273 286.2246 179.9092 286.2744 c
199.791 286.3242 215.9502 270.2471 216 250.3652 c
216.0498 230.4824 199.9727 214.3242 180.0908 214.2744 c
s
468.0908 214.999 m
448.209 214.9492 432.0498 231.0264 432 250.9082 c
431.9492 270.791 448.0273 286.9492 467.9092 286.999 c
487.791 287.0498 503.9492 270.9717 504 251.0898 c
504.0498 231.208 487.9727 215.0488 468.0908 214.999 c
s
3 w [4 6 ]0 d
36 249.9121 m
35.9761 259.3867 51.207 267.4756 72.4185 270.4404 c
77.9131 271.208 83.8091 271.6318 89.9453 271.6475 c
91.4224 271.6514 92.8857 271.6309 94.333 271.5879 c
97.2974 271.5 100.1943 271.3164 103.0049 271.0439 C
110.0234 270.3643 116.501 269.1348 122.1367 267.4746 c
135.3867 263.5713 143.9819 257.29 144 250.1836 c
S
[]0 d
144 250.1836 m
144.0303 238.2539 119.877 228.5225 90.0547 228.4473 c
60.2314 228.373 36.0303 237.9824 36 249.9121 c
36 249.9121 l
S
2 w
179.6377 394.2744 m
467.6377 395 l
547.165 395.2002 611.7998 330.8896 612 251.3613 c
612.2002 171.834 547.8906 107.1992 468.3623 107 c
180.3623 106.2744 l
180.3623 106.2744 l
100.835 106.0742 36.2002 170.3838 36 249.9121 c
35.7998 329.4395 100.1094 394.0742 179.6377 394.2744 c
179.6377 394.2744 l
S
3 w [4 6 ]0 d
504 251.0898 m
503.9824 258.1504 512.4365 264.4414 525.5234 268.416 c
531.2461 270.1543 537.8555 271.4492 545.0293 272.1719 c
549.167 272.5889 553.4932 272.8154 557.9453 272.8262 c
563.3623 272.8398 568.5947 272.5342 573.5303 271.9531 c
576.792 271.5693 579.9238 271.0645 582.8945 270.4521 c
588.3965 269.3184 593.3447 267.8145 597.5332 266.0234 c
598.2998 265.6953 599.041 265.3574 599.7559 265.0107 c
607.3965 261.3047 611.9863 256.5527 612 251.3613 c
S
[]0 d
504 251.0898 m
504.0303 239.1602 528.2314 229.5508 558.0547 229.626 c
587.877 229.7012 612.0303 239.4326 612 251.3613 c
S
u
0.9098 0 1 0 K
[4 6 ]0 d
216 250.3652 m
215.999 250.8359 216.0527 251.3027 216.1602 251.7676 c
S
432 250.9082 m
S
432 250.9082 m
432.001 250.4375 431.9473 249.9697 431.8389 249.5039 c
S
[]0 d
431.8389 249.5039 m
S
U
1 w
333.1123 239.4268 m
326.8447 248.6328 320.6836 258.0791 314.4102 267.2725 c
N
0 R
0.0157 0.749 0.9137 0 K
4 w [4 6 ]0 d
548 132 m
S
0 To
1 0 0 1 268.3271 404.292 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w []0 d
/_Helvetica 36 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(K) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
4 w
319.5 342 m
319.5 339.5146 317.4854 337.5 315 337.5 c
312.5146 337.5 310.5 339.5146 310.5 342 c
310.5 344.4854 312.5146 346.5 315 346.5 c
317.4854 346.5 319.5 344.4854 319.5 342 c
b
315 342 m
378 342 576 351 576 252 c
576 153 495 153 468 153 c
387 153 342 297 315 342 c
S
315 342 m
252 342 72 351 72 252 c
72 153 135 153 162 153 c
279 153 288 297 315 342 c
S
468 288 m
396 288 351 324 315 342 c
S
[4 6 ]0 d
515.7295 315 m
506.1836 297 487.0918 288 468 288 c
S
1 w []0 d
521.4033 333 m
520.4775 326.2383 518.5078 320.2383 515.7295 315 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
432 396 m
477 396 522 378 522 342 c
522 338.8633 521.7949 335.8633 521.4033 333 c
S
[]0 d
315 342 m
333 360 396 396 432 396 c
S
180 288 m
252 288 279 324 315 342 c
S
[4 6 ]0 d
125.998 313.7646 m
138.4058 296.5879 161.3501 288 180 288 c
S
1 w []0 d
120.3574 324.0029 m
121.8286 320.3057 123.7388 316.8926 125.998 313.7646 c
N
0 R
0 0 0 1 K
4 w [4 6 ]0 d
189 395.7529 m
148.2944 393.4824 117 375.5645 117 342 c
117 335.3945 118.2119 329.3955 120.3574 324.0029 c
S
[]0 d
315 342 m
297 360 234 396 198 396 c
194.9561 396 191.9531 395.9175 189 395.7529 c
S
585 261 m
576 243 l
567 261 l
S
81 261 m
72 243 l
63 261 l
S
0 To
1 0 0 1 90 243 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w
/_Helvetica 21 Tf
(a) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 549 243 0 Tp
TP
0 Tr
(b) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 135 351 0 Tp
TP
0 Tr
(c) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 495 351 0 Tp
TP
0 Tr
(d) Tx 1 0 Tk
(\r) TX 
TO
0 R
0 0 0 1 K
2 w
126 351 m
117 333 l
108 351 l
S
531 351 m
522 333 l
513 351 l
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1322 1674 a(Figure)f(16)100 1817 y(If)j
Fl(T)246 1787 y Fh(0)299 1817 y Fp(b)r(ounds)g(a)g(solid)g(torus)f
Fl(M)1155 1829 y Fj(1)1222 1817 y Fp(con)n(taining)h
Fl(K)35 b Fp(or)30 b Fl(\015)5 b Fp(,)30 b(with)h(this)g(curv)n(e)e
(disjoin)n(t)h(from)0 1917 y(a)g(meridian)f(disk)h Fl(D)j
Fp(for)c Fl(M)908 1929 y Fj(1)945 1917 y Fp(,)i(then)g(the)f(argumen)n
(t)f(of)i(Prop)r(osition)d(3)i(of)g([Br1])f(applies)h(to)0
2016 y(sho)n(w)d(that)h Fl(D)h Fp(can)f(b)r(e)g(made)f(disjoin)n(t)h
(from)f Fl(Q)1529 1986 y Fh(00)1571 2016 y Fp(.)37 b(Then)28
b(when)g(w)n(e)f(push)h Fl(T)2447 1986 y Fh(0)2497 2016
y Fp(bac)n(k)f(to)h Fl(T)38 b Fp(via)0 2116 y Fl(Q)66
2086 y Fh(00)108 2116 y Fp(,)28 b(the)g(compressing)e(disk)h
Fl(D)j Fp(p)r(ersists,)d(so)g Fl(T)39 b Fp(is)27 b(compressible,)g(a)g
(con)n(tradiction.)100 2216 y(Therefore,)35 b Fl(T)569
2185 y Fh(0)626 2216 y Fp(m)n(ust)g(b)r(e)g(an)f(essen)n(tial)g(torus)g
(in)h Fl(X)7 b Fp(\()p Fl(L)p Fp(\).)57 b(Con)n(tin)n(uing)34
b(this)h(pro)r(cess)f(of)0 2315 y(pushing)26 b(the)h(torus)e(across)f
Fl(\015)5 b Fp(,)27 b(w)n(e)f(ev)n(en)n(tually)f(\014nd)i(a)e(torus)h
Fl(T)37 b Fp(essen)n(tial)26 b(in)g Fl(X)7 b Fp(\()p
Fl(L)p Fp(\))26 b(whic)n(h)g(is)0 2415 y(disjoin)n(t)32
b(from)f(b)r(oth)h Fl(F)44 b Fp(and)32 b Fl(Q)p Fp(.)49
b(But)32 b(suc)n(h)f(a)h(torus)f(then)h(lies)g(in)g Fl(X)7
b Fp(\()p Fl(F)32 b Fm([)22 b Fl(Q)p Fp(\),)33 b(whic)n(h)f(is)f(a)0
2514 y(handleb)r(o)r(dy)-7 b(,)30 b(and)f(so)f(there)h(is)g(a)g
(compressing)e(disk)i Fl(D)1818 2484 y Fh(0)1871 2514
y Fp(for)g Fl(T)40 b Fp(in)29 b Fl(X)7 b Fp(\()p Fl(F)31
b Fm([)20 b Fl(Q)p Fp(\))26 b Fm(\022)f Fl(X)7 b Fp(\()p
Fl(L)p Fp(\).)41 b Fl(T)0 2614 y Fp(is)26 b(therefore)f(compressible)g
(in)i Fl(X)7 b Fp(\()p Fl(L)p Fp(\),)25 b(a)h(con)n(tradiction.)35
b(So)26 b(there)g(are)f(no)h(essen)n(tial)f(tori)h(in)0
2714 y Fl(X)7 b Fp(\()p Fl(L)p Fp(\).)p 256 2737 36 60
v 100 2857 a(Consequen)n(tly)-7 b(,)23 b(the)i(links)e
Fl(K)1030 2869 y Fi(p;q)1131 2857 y Fm([)11 b Fl(\015)5
b Fp(,)24 b(where)g Fl(p;)14 b(q)25 b Fm(\025)e Fp(2)g(and)h
Fl(\015)k Fp(satis\014es)23 b(the)i(conditions)e(set)0
2957 y(forth)31 b(in)h(the)f(previous)f(sections,)i(is)f(a)g(h)n(yp)r
(erb)r(olic)f(link.)48 b(Therefore,)31 b(for)g(in\014nitely)g(man)n(y)0
3056 y Fl(n)p Fp(,)k(the)f(knots)f Fl(K)558 3068 y Fi(n)636
3056 y Fp(are)g(h)n(yp)r(erb)r(olic.)54 b(T)-7 b(aking)33
b(this)h(and)f(the)h(results)f(of)g(the)h(previous)f(t)n(w)n(o)0
3156 y(sections)27 b(together,)g(w)n(e)g(ha)n(v)n(e:)0
3300 y Fr(Theorem)41 b(7.)47 b Fk(The)39 b(ar)l(e)g(in\014nitely)f
(many)g(hyp)l(erb)l(olic)j(knots)d Fl(K)43 b Fk(in)c(the)f(3-spher)l(e)
h(which)0 3399 y(admit)28 b(genus-one,)f(fr)l(e)l(e,)h(Seifert)g
(surfac)l(es)f(which)i(c)l(annot)d(b)l(e)h(the)g(c)l(omp)l(act)h(le)l
(af)g(of)g(a)f(depth-)0 3499 y(one)j(foliation)i(of)e(the)g(exterior)g
(of)h Fl(K)6 b Fk(.)1453 3686 y Fm(x)p Fq(5)1058 3786
y(Concluding)30 b(remarks)100 3935 y Fp(In)23 b(this)h(pap)r(er)f(w)n
(e)g(ha)n(v)n(e)f(found)h(families)h(of)f(h)n(yp)r(erb)r(olic)g(knots)f
(with)i(depth)g(greater)e(than)0 4035 y(one.)47 b(\\F)-7
b(ound")30 b(here)h(m)n(ust,)h(ho)n(w)n(ev)n(er)d(b)r(e)j(in)n
(terpreted)e(in)i(the)f(w)n(eak)f(sense;)j(b)n(y)e(app)r(ealing)0
4134 y(to)c(the)h(Hyp)r(erb)r(olic)f(Dehn)h(Surgery)e(Theorem,)h(w)n(e)
g(can)g(conclude)g(that)g(our)g(knots)g Fl(K)2806 4146
y Fi(n)2878 4134 y Fp(are)0 4234 y(h)n(yp)r(erb)r(olic)e(for)h(most)g
(v)-5 b(alues)25 b(of)h Fl(n)p Fp(,)g(but)h(w)n(e)e(can)h(conclude)f
(this)i(for)e(no)h Fk(sp)l(e)l(ci\014c)g Fp(v)-5 b(alue)26
b(of)g Fl(n)p Fp(.)0 4334 y(Exp)r(erimen)n(tal)j(evidence,)h(b)n(y)g(w)
n(a)n(y)f(of)g(snapp)r(ea)h([W)-7 b(e])30 b(or)f(Snap)h([Go],)g(w)n
(ould)g(suggest)f(that)0 4433 y Fl(K)71 4445 y Fi(n)140
4433 y Fp(is)c(in)g(fact)f(h)n(yp)r(erb)r(olic)g(for)g(\()p
Fl(p;)14 b(q)26 b Fm(\025)d Fp(2)h(and\))h(all)f Fl(n)f
Fm(\025)f Fp(1;)k(su\016cien)n(t)e(diligence)h(migh)n(t)f(allo)n(w)0
4533 y(for)j(a)g(uni\014ed)h(pro)r(of)f(of)h(this.)37
b(W)-7 b(e)28 b(do)f(not)h(undertak)n(e)f(suc)n(h)g(an)g(e\013ort)h
(here.)100 4633 y(Our)e(result)g(falls)h(short)f(of)h(the)g(standards)e
(set)i(b)n(y)g(Koba)n(y)n(ashi's)d(result)i(in)h(another)f(w)n(a)n(y)-7
b(,)0 4732 y(in)27 b(that)g(w)n(e)f(do)h(not)f(determine)h(the)g
(actual)f(depth)h(of)g(the)g(knots)f Fl(K)2198 4744 y
Fi(n)2270 4732 y Fp(that)h(w)n(e)f(ha)n(v)n(e)f(found.)0
4832 y(W)-7 b(e)35 b(only)e(establish)h(that)h(it)g(is)f(at)g(least)g
(2,)h(for)f(eac)n(h.)56 b(Koba)n(y)n(ashi)32 b(determined)i(that)g(the)
0 4932 y(depth)e(of)g(his)g(knot,)g(whic)n(h)g(w)n(e)f(will)h(call)f
Fl(K)1447 4944 y Fi(ob)1513 4932 y Fp(,)i(is)e(exactly)g(2,)i(b)n(y)e
(constructing)g(a)g(sutured)0 5031 y(manifold)e(decomp)r(osition)f
([Ga1])g(of)h Fl(X)7 b Fp(\()p Fl(K)1391 5043 y Fi(ob)1456
5031 y Fp(\))29 b(b)n(y)f(hand.)40 b(W)-7 b(e)29 b(should)g(note,)g(ho)
n(w)n(ev)n(er,)e(that)p eop
%%Page: 17 17
17 16 bop 750 42 a Fn(Unique)24 b(minimal)c(gen)n(us)25
b(Seifert)e(surfaces)h(and)g(depth)657 b(17)0 241 y Fp(his)25
b(knot)f Fl(K)386 253 y Fi(ob)476 241 y Fp(is)h(distinct)g(from)f(all)h
(of)f(ours,)h(since)f(the)h(unique)g(gen)n(us-1)e(Seifert)i(surface)e
(for)0 340 y Fl(K)71 352 y Fi(ob)164 340 y Fp(do)r(es)28
b(not)f(ha)n(v)n(e)g(handleb)r(o)r(dy)g(complemen)n(t.)100
453 y(It)j(is)f(tempting)h(to)g(conjecture)f(that)h(all)f(of)g(the)h
(knots)f(built)i(here)e(ha)n(v)n(e)f(depth)i(2,)g(since)0
553 y(they)j(are)e(built)j(from)e(\(2-bridge,)g(hence\))h(depth)g(1)g
(knots)f(b)n(y)g(spinning)g(around)g(a)g(lo)r(op)g Fl(\015)0
652 y Fp(whic)n(h)25 b(b)r(ounds)h(a)f(surface)f(\006)h(in)h
Fl(X)7 b Fp(\()p Fl(F)12 b Fp(\).)36 b(\006)25 b(is)g(also)g(a)g
(natural)f(candidate)h(for)g(the)h(surface)e(to)0 752
y(next)f(decomp)r(ose)f(the)h(sutured)f(manifold)h(\()p
Fl(X)7 b Fp(\()p Fl(F)1560 764 y Fi(n)1605 752 y Fp(\))p
Fl(;)14 b(@)5 b(X)i Fp(\()p Fl(F)1884 764 y Fi(n)1929
752 y Fp(\))h Fm(\\)g Fl(N)h Fp(\()p Fl(K)2211 764 y
Fi(n)2257 752 y Fp(\)\))24 b(along.)34 b(The)22 b(reader)0
851 y(can)27 b(v)n(erify)-7 b(,)28 b(ho)n(w)n(ev)n(er,)d(that)j(this)g
(will)g(not)g(yield)g(a)f(taut)h(sutured)g(manifold;)g(the)g(surface)f
(\006)0 951 y(can)32 b(b)r(e)h(c)n(hosen)f(to)g(b)r(e)h(one)g(of)f(the)
h(once-punctured)f(torus)g(comp)r(onen)n(ts)g(of)h Fl(@)5
b(X)i Fp(\()p Fl(F)2756 963 y Fi(n)2801 951 y Fp(\))22
b Fm(n)f Fl(\015)5 b Fp(,)0 1051 y(and)28 b(an)n(y)g(c)n(hoice)g(of)h
(orien)n(tations)e(yields)h(trivial)g(sutures)g(under)g(the)h(decomp)r
(osition.)40 b(Un-)0 1150 y(fortunately)-7 b(,)31 b(the)g(tec)n
(hnology)f(do)r(es)g(not)h(y)n(et)f(exist)h(to)f(sho)n(w)g(that)h(a)g
(h)n(yp)r(erb)r(olic)f(knot)g(has)0 1250 y(depth)e(greater)d(than)j(2.)
36 b(T)-7 b(o)27 b(sho)n(w)f(that)i Fl(X)7 b Fp(\()p
Fl(K)1497 1262 y Fi(n)1541 1250 y Fp(\))27 b(do)r(es)g(not)g(admit)h(a)
f(depth)h(2)e(foliation,)h(w)n(e)0 1350 y(essen)n(tially)20
b(need)h(to)g(sho)n(w)f(that)h(there)g(is)g(no)g(decomp)r(osing)f
(surface)g(\006)h(for)f Fl(X)7 b Fp(\()p Fl(F)2557 1362
y Fi(n)2603 1350 y Fp(\))21 b(suc)n(h)g(that)0 1449 y(decomp)r(osing)g
(\()p Fl(X)7 b Fp(\()p Fl(F)679 1461 y Fi(n)725 1449
y Fp(\))p Fl(;)14 b(K)865 1461 y Fi(n)910 1449 y Fp(\))23
b(along)e(\006,)i(to)g(\()p Fl(M)1506 1419 y Fh(0)1529
1449 y Fl(;)14 b(\015)1614 1419 y Fh(0)1636 1449 y Fp(\),)24
b(yields)e(a)g(sutured)h(manifold)f(whic)n(h)g(ad-)0
1549 y(mits)g(a)g(depth)g(1)g(foliation.)34 b(In)23 b(our)e(con)n
(text,)h(where)g Fl(X)7 b Fp(\()p Fl(F)1841 1561 y Fi(n)1886
1549 y Fp(\))22 b(is)g(a)g(tuat)g(sutured)g(handleb)r(o)r(dy)-7
b(,)0 1648 y(some)29 b(kind)h(of)g(approac)n(h)e(to)h(this)h(migh)n(t)g
(b)r(e)g(p)r(ossible,)g(since)g(ev)n(ery)e(further)i(decomp)r(osing)0
1748 y(surface)37 b(\006,)j(b)r(eing)e(least)f(gen)n(us)g(and)g
(therefore)g(incompressible,)i(will)f(split)g Fl(X)7
b Fp(\()p Fl(F)2733 1760 y Fi(n)2778 1748 y Fp(\))38
b(in)n(to)0 1848 y(another)31 b(taut)i(sutured)f(handleb)r(o)r(dy;)i
Fl(M)1368 1818 y Fh(0)1424 1848 y Fp(injects,)f(on)f(the)h(lev)n(el)f
(of)g(fundamen)n(tal)g(group,)0 1947 y(in)n(to)27 b(the)h(free)g(group)
e Fl(\031)753 1959 y Fj(1)791 1947 y Fp(\()p Fl(X)7 b
Fp(\()p Fl(F)984 1959 y Fi(n)1029 1947 y Fp(\)\).)100
2060 y(F)-7 b(or)21 b(our)f(purp)r(oses,)i(w)n(e)g(can)f(therefore)f
(fo)r(cus)i(on)f(dev)n(eloping)g(\(more)g(general\))f(conditions)0
2160 y(to)32 b(decide)g(that)g(a)g(sutured)f(handleb)r(o)r(dy)h(deos)g
(not)g(admit)g(a)f(depth)i(1)e(\(or)h(higher)f(depth\))0
2259 y(foliation.)67 b(F)-7 b(or)38 b(sutured)g(handleb)r(o)r(dies)g
(\()p Fl(H)r(;)14 b(A)p Fp(\))38 b(of)g(an)n(y)f(gen)n(us,)j(depth)f(1)
e(implies)h([Ga3])0 2359 y(that)e(in)n(t\()p Fl(H)30
b Fm([)473 2371 y Fi(A)551 2359 y Fp(\()p Fl(D)654 2329
y Fj(2)716 2359 y Fm(\002)23 b Fl(I)7 b Fp(\))35 b(is)h(a)e(bundle)i(o)
n(v)n(er)e(the)h(circle,)i(but)f(when)f(the)h(gen)n(us)f(of)g
Fl(H)42 b Fp(is)0 2458 y(greater)25 b(than)h(2,)g(the)h(\014b)r(er,)g
(necessarily)-7 b(,)25 b(has)h(in\014nite)h(gen)n(us.)35
b(When)27 b(the)g(gen)n(us)f(of)g Fl(H)33 b Fp(is)26
b(2,)0 2558 y(the)31 b(\014b)r(er)f(has)g(\014nite)h(gen)n(us,)g(whic)n
(h)f(is)g(wh)n(y)g(in)h(the)g(Can)n(t)n(w)n(ell-Conlon)d(condition)j(w)
n(e)f(ma)n(y)0 2658 y(replace)23 b(in)n(t\()p Fl(H)d
Fm([)553 2670 y Fi(A)619 2658 y Fp(\()p Fl(D)722 2628
y Fj(2)771 2658 y Fm(\002)12 b Fl(I)7 b Fp(\))25 b(with)g
Fl(H)18 b Fm([)1276 2670 y Fi(A)1343 2658 y Fp(\()p Fl(D)1446
2628 y Fj(2)1495 2658 y Fm(\002)12 b Fl(I)7 b Fp(\))24
b(.)36 b(W)-7 b(e)25 b(can,)g(at)f(presen)n(t,)g(o\013er)g(no)g(insigh)
n(t)0 2757 y(in)n(to)32 b(ho)n(w)g(to)h(o)n(v)n(ercome)d(the)j(problem)
f(of)h(needing)f(to)g(test)h(ev)n(ery)f(p)r(ossible)g(decomp)r(osing)0
2857 y(surface.)100 2970 y(Our)19 b(tec)n(hniques)g(for)g(establishing)
g(that)h Fl(K)1468 2982 y Fi(n)1533 2970 y Fp(had)f(unique)h(minimal)g
(gen)n(us)f(Seifert)h(surface)0 3069 y(also)i(used)g(in)h(a)f(strong)g
(w)n(a)n(y)f(the)i(fact)g(that)g(the)g(Seifert)g(surfaces)e
Fl(F)2141 3081 y Fi(n)2209 3069 y Fp(had)i(gen)n(us)f(1.)34
b(It)23 b(w)n(ould)0 3169 y(b)r(e)32 b(in)n(teresting)f(to)h(dev)n
(elop)f(more)g(general)f(conditions)h(along)g(these)g(lines)h(for)f
(generating)0 3268 y(knots)18 b(with)h(free)g(gen)n(us)e
Fl(g)22 b Fp(Seifert)c(surfaces)g(whic)n(h)g(are)g(unique)h(for)f(the)h
(knot)f(among)g(minimal)0 3368 y(gen)n(us)32 b(Seifert)i(surfaces.)52
b(In)33 b(principle)g(is)g(seems)g(lik)n(ely)f(that)i(a)e(similar)h
(approac)n(h,)f(using)0 3468 y(the)c(group)e(theoretic)h(prop)r(erties)
g(of)g(the)h(w)n(ord)e(represen)n(ting)g Fl(K)2097 3480
y Fi(n)2170 3468 y Fp(in)h(a)g(free)h(group,)e(should)0
3567 y(b)r(e)i(successful.)37 b(But)27 b(the)h(needed)g(conditions)f
(will)h(lik)n(ely)f(b)r(e)h(more)f(complicated.)100 3680
y(Recen)n(t)c(w)n(ork)e(of)i(Sc)n(harlemann)f([Sc)n(ha])g(implies)h
(that)g(all)g(of)g(the)g(knots)g Fl(K)2465 3692 y Fi(n)2532
3680 y Fp(that)h(w)n(e)e(ha)n(v)n(e)0 3780 y(constructed)k(ha)n(v)n(e)g
(tunnel)h(n)n(um)n(b)r(er)g(2.)36 b(A)27 b(free)f(gen)n(us)g(one)g
(knot)h(can)f(ha)n(v)n(e)g(tunnel)h(n)n(um)n(b)r(er)0
3879 y(at)f(most)g(2;)g(an)n(y)f(t)n(w)n(o)h(simple)g(arcs)f(in)h(the)g
(surface)g Fl(F)1699 3891 y Fi(n)1770 3879 y Fp(whic)n(h)g(split)h
Fl(F)2243 3891 y Fi(n)2314 3879 y Fp(to)f(a)g(2-disk)f
Fl(D)j Fp(form)0 3979 y(a)g(system)g(of)h(tunnels)g(for)f
Fl(K)933 3991 y Fi(n)977 3979 y Fp(,)h(since)g(the)g(exterior)e(of)h
Fl(K)1852 3991 y Fi(n)1897 3979 y Fm([)p Fp(\(tunnels\))i(is)e
Fl(X)7 b Fp(\()p Fl(F)2554 3991 y Fi(n)2599 3979 y Fp(\),)29
b(with)g(the)0 4078 y(t)n(w)n(o)e(disks)g(in)h Fl(F)513
4090 y Fj(+)597 4078 y Fp(and)f Fl(F)811 4090 y Fh(\000)895
4078 y Fp(corresp)r(onding)f(to)i Fl(D)i Fp(glued)d(together.)37
b(But)28 b(Sc)n(harlemann)e(has)0 4178 y(sho)n(wn)33
b(that)g(a)g(gen)n(us-1)f(tunnel-1)h(knot)g(m)n(ust)h(either)f(b)r(e)h
(a)f(satellite)g(knot)g(or)f(a)h(2-bridge)0 4278 y(knot,)c(whic)n(h)g
(none)f(of)h(our)f(examples)g(are;)g(2-bridge)f(knots)i(are)e
(alternating,)h(and)h(so)f(ha)n(v)n(e)0 4377 y(depth)g(1)f([Ga3].)100
4528 y(In)f(the)h(end,)f(it)h(w)n(as)e(surprising)g(\(to)i(the)f
(author\))g(ho)n(w)f(man)n(y)h(of)g(the)h(original)d(collection)0
4627 y(of)34 b(knots)g Fl(K)403 4639 y Fi(n)481 4627
y Fp(had)g(unique)h(minimal)f(gen)n(us)f(Seifert)h(surface.)56
b(And)35 b(so)e(w)n(e)h(end)g(with)g(the)0 4727 y(somewhat)27
b(ill-p)r(osed)0 4915 y Fr(Question.)46 b Fk(How)39 b(c)l(ommon)g(is)h
(it)e(for)i(a)g(knot)e(to)h(have)h(unique)f(minimal)h(genus)e(Seifert)0
5015 y(surfac)l(e?)p eop
%%Page: 18 18
18 17 bop 0 42 a Fn(18)1152 b(Mark)24 b(Brittenham)1252
241 y Fq(References)0 457 y Fn([BNS])90 b(R.)19 b(Bieri,)g(W.)h
(Neumann,)f(amd)g(R.)g(Streb)r(el,)h Fg(A)i(ge)l(ometric)f(invariant)h
(of)g(discr)l(ete)g(gr)l(oups)p Fn(,)f(In)n(v)n(en)n(t.)272
540 y(Math)j Fd(90)f Fn(\(1987\),)i(451-477.)0 623 y([Br1])119
b(M.)28 b(Brittenham,)i Fg(F)-5 b(r)l(e)l(e)30 b(genus)h(one)f(knots)h
(with)g(lar)l(ge)f(volume)p Fn(,)h(P)n(aci\014c)e(J.)g(Math.)h
Fd(201)f Fn(\(2001\),)272 706 y(61-82.)0 789 y([Br2])p
272 789 212 4 v 343 w(,)22 b Fg(F)-5 b(r)l(e)l(e)25 b(Seifert)f(surfac)
l(es)i(and)f(disk)g(de)l(c)l(omp)l(ositions)p Fn(,)h(Math.)d(Zeit.)g
Fd(240)e Fn(\(2002\),)k(197-210.)0 872 y([Bro])119 b(K.)30
b(Bro)n(wn,)i Fg(T)-5 b(r)l(e)l(es,)33 b(valuations)g(and)g(the)f
(Bieri-Neumann-Str)l(eb)l(el)f(invariant)p Fn(,)h(In)n(v.)f(Math.)h
Fd(90)272 955 y Fn(\(1987\),)25 b(479-504.)0 1038 y([CC1])95
b(J.)24 b(Can)n(t)n(w)n(ell)g(and)g(L.)f(Conlon,)h Fg(Depth)i(of)f
(knots)p Fn(,)f(T)-6 b(op)r(ology)24 b(Appl.)f Fd(42)g
Fn(\(1991\),)i(277{289.)0 1121 y([CC2])p 272 1121 V 319
w(,)c Fg(F)-5 b(oliations)24 b(of)f Fc(E)t Fn(\(5)1064
1130 y Fb(2)1099 1121 y Fn(\))h Fg(and)g(r)l(elate)l(d)g(knot)f(c)l
(omplements)p Fn(,)f(Pro)r(c.)f(AMS)g Fd(118)g Fn(\(1993\),)i(953{)272
1204 y(962.)0 1287 y([Ga1])107 b(D.)23 b(Gabai,)h Fg(F)-5
b(oliations)27 b(and)f(the)g(top)l(olo)l(gy)h(of)f(3-manifolds)p
Fn(,)f(J)e(Di\013)h(Geom)f Fd(18)g Fn(\(1983\),)i(445{503.)0
1370 y([Ga2])p 272 1370 V 331 w(,)e Fg(Gener)l(a)j(of)g(the)f(arb)l(or)
l(esc)l(ent)i(links)p Fn(,)c(Mem.)f(Amer.)g(Math.)h(So)r(c.)h
Fd(59)f Fn(\(1986\),)i(1{98.)0 1453 y([Ga3])p 272 1453
V 331 w(,)e Fg(F)-5 b(oliations)27 b(and)f(gener)l(a)g(of)g(links)p
Fn(,)d(T)-6 b(op)r(ology)25 b Fd(23)e Fn(\(1984\),)i(381{394.)0
1536 y([Go])142 b(O.)19 b(Go)r(o)r(dman,)i(Snap,)g(a)f(computer)f
(program)g(for)g(studying)i(arithmetic)e(in)n(v)l(arian)n(ts)h(of)f(h)n
(yp)r(erb)r(olic)272 1619 y(3-manifolds,)j(a)n(v)l(ailable)i(from)d(h)n
(ttp://www.ms.unimelb.edu.au/)i(snap/.)0 1702 y([GL])133
b(C.)25 b(Gordon)h(and)f(J.)g(Luec)n(k)n(e,)h Fg(Knots)h(ar)l(e)h
(determine)l(d)f(by)f(their)h(c)l(omplements)p Fn(,)f(J.)f(Amer.)e
(Math.)272 1785 y(So)r(c.)h Fd(2)f Fn(\(1989\),)j(371{415.)0
1868 y([Ko])p 272 1868 V 366 w(,)d Fg(Example)j(of)g(hyp)l(erb)l(olic)g
(knot)f(which)h(do)g(not)g(admit)g(depth)g(1)f(foliation)p
Fn(,)f(Kob)r(e)g(J)f(Math)272 1951 y Fd(13)g Fn(\(1996\),)i(209{221.)0
2034 y([MKS])73 b(W.)30 b(Magn)n(us,)g(A.)f(Karrass,)g(and)h(D.)f
(Solitar,)h Fg(Combinatorial)i(gr)l(oup)g(the)l(ory)p
Fn(,)f(John)f(Wiley)f(and)272 2117 y(Sons,)24 b(Inc.,)g(1966.)0
2200 y([Me])136 b(W.)26 b(Menasco,)i Fg(Close)l(d)h(inc)l(ompr)l
(essible)g(surfac)l(es)g(in)f(alternating)f(knot)h(and)h(link)f(c)l
(omplements)p Fn(,)272 2283 y(T)-6 b(op)r(ology)25 b
Fd(23)e Fn(\(1984\),)i(37{44.)0 2366 y([Ri])160 b(I.)23
b(Ric)n(hards,)g Fg(On)i(the)g(classi\014c)l(ation)i(of)e(nonc)l(omp)l
(act)i(surfac)l(es)p Fn(,)d(T)-6 b(rans.)23 b(Amer.)e(Math.)i(So)r(c.)h
Fd(106)272 2449 y Fn(\(1963\),)h(259{269.)0 2532 y([Sc)n(ha])90
b(M.)15 b(Sc)n(harlemann,)i Fg(Ther)l(e)i(ar)l(e)g(no)f(unexp)l(e)l
(cte)l(d)i(tunnel)e(numb)l(er)h(one)f(knots)h(of)f(genus)h(one)p
Fn(,)e(preprin)n(t.)0 2615 y([ST])142 b(M.)34 b(Sc)n(harlemann)g(and)h
(A.)f(Thompson,)i Fg(Finding)g(disjoint)g(Seifert)f(surfac)l(es)p
Fn(,)i(Bull.)d(LMS)i Fd(20)272 2698 y Fn(\(1988\),)25
b(61{64.)0 2781 y([Sc)n(h)n(u])88 b(H.)23 b(Sc)n(h)n(ub)r(ert,)i
Fg(Knoten)g(mit)h(zwei)f(Br)q(\177)-37 b(ucken)p Fn(,)23
b(Math.)h(Zeit.)g Fd(65)f Fn(\(1956\),)i(133{170.)0 2864
y([Stl])146 b(J.)23 b(Stallings,)g Fg(On)i(\014b)l(ering)g(c)l(ertain)g
Fn(3)p Fg(-manifolds)p Fn(,)g(T)-6 b(op)r(ology)24 b(of)f(3-manifolds)e
(and)j(related)g(topics)272 2947 y(\(Pro)r(c.)g(The)g(Univ.)f(of)g
(Georgia)i(Institute,)g(1961\),)f(Pren)n(tice-Hall,)f(1962,)i(pp.)e
(95{100.)0 3030 y([Sta])131 b(E.)23 b(Starr,)h Fg(Curves)h(in)h(hand)t
(leb)l(o)l(dies)p Fn(,)f(Thesis,)e(U)g(Cal)h(Berk)n(eley)-6
b(,)24 b(1992.)0 3113 y([Th1])107 b(W.)33 b(Th)n(urston,)i
Fg(A)f(norm)h(for)f(the)g(homolo)l(gy)i(of)e Fn(3)p Fg(-manifolds)p
Fn(,)i(Mem.)31 b(Amer.)f(Math.)j(So)r(c.)i Fd(59)272
3196 y Fn(\(1986\),)25 b(99{130.)0 3279 y([Th2])p 272
3279 V 331 w(,)30 b Fg(The)h(Ge)l(ometry)f(and)i(T)-5
b(op)l(olo)l(gy)32 b(of)f(3-manifolds)p Fn(,)h(notes)e(from)d(lectures)
j(at)g(Princeton)272 3362 y(Univ)n(ersit)n(y)-6 b(,)24
b(1979-80.)0 3445 y([Th3])p 272 3445 V 331 w(,)31 b Fg(Thr)l(e)l
(e-dimensional)i(manifolds,)h(Kleinian)d(gr)l(oups)i(and)f(hyp)l(erb)l
(olic)g(ge)l(ometry)p Fn(,)f(Bull.)272 3528 y(Amer.)22
b(Math.)i(So)r(c.)g Fd(6)f Fn(\(1982\),)i(357{381.)0
3611 y([W)-6 b(e])135 b(J.)18 b(W)-6 b(eeks,)20 b Fg(SnapPe)l(a,)j(a)e
(pr)l(o)l(gr)l(am)h(for)f(cr)l(e)l(ating)f(and)h(studying)g(hyp)l(erb)l
(olic)g(3-manifolds)p Fn(,)f(a)n(v)l(ailable)272 3694
y(for)j(do)n(wnload)i(from)c(www.geom.umn.edu.)100 3877
y Fo(Dep)l(ar)l(tment)26 b(of)g(Ma)l(thema)l(tics,)g(Oldf)-6
b(a)l(ther)27 b(810,)d(Lincoln,)i(NE)g(68588-0323)100
3960 y Fg(E-mail)g(addr)l(ess)5 b Fn(:)37 b Fa(mbritten@math.unl.edu)p
eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
